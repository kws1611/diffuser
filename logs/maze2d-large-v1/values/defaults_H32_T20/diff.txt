diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
index db2afeb..3f37401 100644
Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
diff --git a/config/maze2d.py b/config/maze2d.py
index e7698af..b6dd050 100644
--- a/config/maze2d.py
+++ b/config/maze2d.py
@@ -27,6 +27,8 @@ plan_args_to_watch = [
     ('conditional', 'cond'),
 ]
 
+logbase = 'logs'
+
 base = {
 
     'diffusion': {
@@ -74,6 +76,48 @@ base = {
         'bucket': None,
         'device': 'cuda',
     },
+    'values': {
+        'model': 'models.ValueFunction',
+        'diffusion': 'models.ValueDiffusion',
+        'horizon': 32,
+        'n_diffusion_steps': 20,
+        'dim_mults': (1, 4,8),
+        'renderer': 'utils.MuJoCoRenderer',
+
+        ## value-specific kwargs
+        'discount': 0.99,
+        'termination_penalty': -100,
+        'normed': False,
+
+        ## dataset
+        'loader': 'datasets.ValueDataset',
+        'normalizer': 'GaussianNormalizer',
+        'preprocess_fns': [],
+        'use_padding': True,
+        'max_path_length': 40000,
+
+        ## serialization
+        'logbase': logbase,
+        'prefix': 'values/defaults',
+        'exp_name': watch(diffusion_args_to_watch),
+
+        ## training
+        'n_steps_per_epoch': 10000,
+        'loss_type': 'value_l2',
+        'n_train_steps': 200e3,
+        'batch_size': 32,
+        'learning_rate': 2e-4,
+        'gradient_accumulate_every': 2,
+        'ema_decay': 0.995,
+        'save_freq': 1000,
+        'sample_freq': 0,
+        'n_saves': 5,
+        'save_parallel': False,
+        'n_reference': 8,
+        'bucket': None,
+        'device': 'cuda',
+        'seed': None,
+    },
 
     'plan': {
         'batch_size': 1,
diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
index 5923eb6..dc4aff5 100644
Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
diff --git a/diffuser/utils/__pycache__/training.cpython-38.pyc b/diffuser/utils/__pycache__/training.cpython-38.pyc
index 817bf89..ce361cf 100644
Binary files a/diffuser/utils/__pycache__/training.cpython-38.pyc and b/diffuser/utils/__pycache__/training.cpython-38.pyc differ
diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
index d01c272..265c7a0 100644
--- a/diffuser/utils/rendering.py
+++ b/diffuser/utils/rendering.py
@@ -306,6 +306,10 @@ class MazeRenderer:
             savepath : str
             observations : [ n_paths x horizon x 2 ]
         '''
+        #print("ncol_st:", ncol)
+        ncol = max(1, min(len(paths), 5))
+        #print("Number of paths:", len(paths))
+        #print("ncol:", ncol)
         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
 
         images = []
diff --git a/diffuser/utils/training.py b/diffuser/utils/training.py
index fc5d033..8fa9437 100644
--- a/diffuser/utils/training.py
+++ b/diffuser/utils/training.py
@@ -51,6 +51,7 @@ class Trainer(object):
         save_parallel=False,
         results_folder='./results',
         n_reference=8,
+        n_samples=10,
         bucket=None,
     ):
         super().__init__()
@@ -187,7 +188,7 @@ class Trainer(object):
         savepath = os.path.join(self.logdir, f'_sample-reference.png')
         self.renderer.composite(savepath, observations)
 
-    def render_samples(self, batch_size=2, n_samples=2):
+    def render_samples(self, batch_size=2, n_samples=10):
         '''
             renders samples from (ema) diffusion model
         '''
diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
index 83efa3b..b3e11b6 100644
Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
index 9ad1dbc..48a4810 100644
--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
@@ -3,13 +3,13 @@
     "add_extras": {
         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
         "_type": "python_object (type = method)",
-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
+        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoKYaUUpQu"
     },
     "attention": false,
     "batch_size": 32,
     "bucket": null,
     "clip_denoised": true,
-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
+    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
     "config": "config.maze2d",
     "dataset": "maze2d-large-v1",
     "device": "cuda",
@@ -26,18 +26,18 @@
     "eval_fstrings": {
         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
         "_type": "python_object (type = method)",
-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
+        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoV4aUUpQu"
     },
     "exp_name": "diffusion/H384_T256",
     "generate_exp_name": {
         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
         "_type": "python_object (type = method)",
-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
+        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoHIaUUpQu"
     },
     "get_commit": {
         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
         "_type": "python_object (type = method)",
-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
+        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoI4aUUpQu"
     },
     "gradient_accumulate_every": 2,
     "horizon": 384,
@@ -51,7 +51,7 @@
     "mkdir": {
         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
         "_type": "python_object (type = method)",
-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
+        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoR4aUUpQu"
     },
     "model": "models.TemporalUnet",
     "n_diffusion_steps": 256,
@@ -69,21 +69,21 @@
     "read_config": {
         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
         "_type": "python_object (type = method)",
-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
+        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoMoaUUpQu"
     },
     "renderer": "utils.Maze2dRenderer",
     "reproducibility": {
         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
         "git_has_uncommitted_changes": true,
         "git_root": "/home/wslabtop/project/diffuser",
-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
-        "time": "Fri Nov  8 09:50:02 2024"
+        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
+        "time": "Fri Nov  8 11:56:36 2024"
     },
     "sample_freq": 1000,
     "save_diff": {
         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
         "_type": "python_object (type = method)",
-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
+        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoFYaUUpQu"
     },
     "save_freq": 1000,
     "save_parallel": false,
@@ -91,12 +91,12 @@
     "set_loadbase": {
         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
         "_type": "python_object (type = method)",
-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
+        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoVIaUUpQu"
     },
     "set_seed": {
         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
         "_type": "python_object (type = method)",
-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
+        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoEoaUUpQu"
     },
     "termination_penalty": null,
     "use_padding": false
diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
index ed9549e..397cbb6 100644
--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
@@ -1,231 +1,7380 @@
-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
-index 1ad2106..5991f01 100644
---- a/diffuser/datasets/buffer.py
-+++ b/diffuser/datasets/buffer.py
-@@ -9,7 +9,7 @@ class ReplayBuffer:
- 
-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
-         self._dict = {
--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
-         }
-         self._count = 0
-         self.max_n_episodes = max_n_episodes
-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
-index 655a6f0..d5dd111 100644
---- a/diffuser/environments/registration.py
-+++ b/diffuser/environments/registration.py
-@@ -1,3 +1,5 @@
-+import sys
-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
- import gym
- 
- ENVIRONMENT_SPECS = (
-@@ -31,4 +33,4 @@ def register_environments():
-         return gym_ids
-     except:
-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
--        return tuple()
-\ No newline at end of file
-+        return tuple()
+diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
+index db2afeb..06eae6e 100644
+Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
+diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
+index 5923eb6..dc4aff5 100644
+Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
+diff --git a/diffuser/utils/__pycache__/training.cpython-38.pyc b/diffuser/utils/__pycache__/training.cpython-38.pyc
+index 817bf89..ce361cf 100644
+Binary files a/diffuser/utils/__pycache__/training.cpython-38.pyc and b/diffuser/utils/__pycache__/training.cpython-38.pyc differ
 diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
-index 8659ff1..d01c272 100644
+index d01c272..265c7a0 100644
 --- a/diffuser/utils/rendering.py
 +++ b/diffuser/utils/rendering.py
-@@ -36,15 +36,44 @@ def env_map(env_name):
- #------------------------------ helper functions -----------------------------#
- #-----------------------------------------------------------------------------#
- 
-+def atmost_2d(x):
-+    while x.ndim > 2:
-+        x = x.squeeze(0)
-+    return x
-+
-+def zipsafe(*args):
-+    length = len(args[0])
-+    assert all([len(a) == length for a in args])
-+    return zip(*args)
-+
-+def zipkw(*args, **kwargs):
-+    nargs = len(args)
-+    keys = kwargs.keys()
-+    vals = [kwargs[k] for k in keys]
-+    zipped = zipsafe(*args, *vals)
-+    for items in zipped:
-+        zipped_args = items[:nargs]
-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
-+        yield zipped_args, zipped_kwargs
-+
- def get_image_mask(img):
-     background = (img == 255).all(axis=-1, keepdims=True)
-     mask = ~background.repeat(3, axis=-1)
-     return mask
- 
--def atmost_2d(x):
--    while x.ndim > 2:
--        x = x.squeeze(0)
--    return x
-+def plot2img(fig, remove_margins=True):
-+    # https://stackoverflow.com/a/35362787/2912349
-+    # https://stackoverflow.com/a/54334430/2912349
-+
-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
-+
-+    if remove_margins:
-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
-+
-+    canvas = FigureCanvasAgg(fig)
-+    canvas.draw()
-+    img_as_string, (width, height) = canvas.print_to_buffer()
-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
- 
- #-----------------------------------------------------------------------------#
- #---------------------------------- renderers --------------------------------#
-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
-         else:
-             self.env = env
-         ## - 1 because the envs in renderer are fully-observed
-+        ## @TODO : clean up
-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
-         self.action_dim = np.prod(self.env.action_space.shape)
-         try:
-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
-     def __call__(self, *args, **kwargs):
-         return self.renders(*args, **kwargs)
+@@ -306,6 +306,10 @@ class MazeRenderer:
+             savepath : str
+             observations : [ n_paths x horizon x 2 ]
+         '''
++        #print("ncol_st:", ncol)
++        ncol = max(1, min(len(paths), 5))
++        #print("Number of paths:", len(paths))
++        #print("ncol:", ncol)
+         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
  
-+#-----------------------------------------------------------------------------#
-+#----------------------------------- maze2d ----------------------------------#
-+#-----------------------------------------------------------------------------#
-+
-+MAZE_BOUNDS = {
-+    'maze2d-umaze-v1': (0, 5, 0, 5),
-+    'maze2d-medium-v1': (0, 8, 0, 8),
-+    'maze2d-large-v1': (0, 9, 0, 12)
-+}
-+
-+class MazeRenderer:
-+
-+    def __init__(self, env):
-+        if type(env) is str: env = load_environment(env)
-+        self._config = env._config
-+        self._background = self._config != ' '
-+        self._remove_margins = False
-+        self._extent = (0, 1, 1, 0)
-+
-+    def renders(self, observations, conditions=None, title=None):
-+        plt.clf()
-+        fig = plt.gcf()
-+        fig.set_size_inches(5, 5)
-+        plt.imshow(self._background * .5,
-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
-+
-+        path_length = len(observations)
-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
-+        plt.axis('off')
-+        plt.title(title)
-+        img = plot2img(fig, remove_margins=self._remove_margins)
-+        return img
-+
-+    def composite(self, savepath, paths, ncol=5, **kwargs):
-+        '''
-+            savepath : str
-+            observations : [ n_paths x horizon x 2 ]
-+        '''
-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
-+
-+        images = []
-+        for path, kw in zipkw(paths, **kwargs):
-+            img = self.renders(*path, **kw)
-+            images.append(img)
-+        images = np.stack(images, axis=0)
-+
-+        nrow = len(images) // ncol
-+        images = einops.rearrange(images,
-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
-+        imageio.imsave(savepath, images)
-+        print(f'Saved {len(paths)} samples to: {savepath}')
-+
-+class Maze2dRenderer(MazeRenderer):
-+
-+    def __init__(self, env, observation_dim=None):
-+        self.env_name = env
-+        self.env = load_environment(env)
-+        self.observation_dim = np.prod(self.env.observation_space.shape)
-+        self.action_dim = np.prod(self.env.action_space.shape)
-+        self.goal = None
-+        self._background = self.env.maze_arr == 10
-+        self._remove_margins = False
-+        self._extent = (0, 1, 1, 0)
-+
-+    def renders(self, observations, conditions=None, **kwargs):
-+        bounds = MAZE_BOUNDS[self.env_name]
-+
-+        observations = observations + .5
-+        if len(bounds) == 2:
-+            _, scale = bounds
-+            observations /= scale
-+        elif len(bounds) == 4:
-+            _, iscale, _, jscale = bounds
-+            observations[:, 0] /= iscale
-+            observations[:, 1] /= jscale
-+        else:
-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
-+
-+        if conditions is not None:
-+            conditions /= scale
-+        return super().renders(observations, conditions, **kwargs)
-+
- #-----------------------------------------------------------------------------#
- #---------------------------------- rollouts ---------------------------------#
- #-----------------------------------------------------------------------------#
-diff --git a/environment.yml b/environment.yml
-index c14a0cf..e56b6a9 100644
---- a/environment.yml
-+++ b/environment.yml
-@@ -1,4 +1,4 @@
--name: diffuser
-+name: diffuser_2
- channels:
- - defaults
- - conda-forge
-@@ -12,9 +12,7 @@ dependencies:
-     - gym==0.18.0
-     - mujoco-py==2.0.2.13
-     - matplotlib==3.3.4
--    - torch==1.9.1+cu111
-     - typed-argument-parser
--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
-     - scikit-image==0.17.2
-     - scikit-video==1.1.11
-     - gitpython
-@@ -31,5 +29,4 @@ dependencies:
-     - crcmod # for fast gsutil rsync on large files
-     - google-api-python-client
-     - cryptography
--    - git+https://github.com/JannerM/doodad.git@janner
-     - gdown>=4.6.0
-diff --git a/scripts/train.py b/scripts/train.py
-index 502837e..f9646f7 100644
---- a/scripts/train.py
-+++ b/scripts/train.py
-@@ -7,7 +7,8 @@ import diffuser.utils as utils
+         images = []
+diff --git a/diffuser/utils/training.py b/diffuser/utils/training.py
+index fc5d033..8fa9437 100644
+--- a/diffuser/utils/training.py
++++ b/diffuser/utils/training.py
+@@ -51,6 +51,7 @@ class Trainer(object):
+         save_parallel=False,
+         results_folder='./results',
+         n_reference=8,
++        n_samples=10,
+         bucket=None,
+     ):
+         super().__init__()
+@@ -187,7 +188,7 @@ class Trainer(object):
+         savepath = os.path.join(self.logdir, f'_sample-reference.png')
+         self.renderer.composite(savepath, observations)
  
- class Parser(utils.Parser):
-     dataset: str = 'hopper-medium-expert-v2'
--    config: str = 'config.locomotion'
-+    #config: str = 'config.locomotion'
-+    config: str = 'config.maze2d'
- 
- args = Parser().parse_args('diffusion')
- 
-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
-     results_folder=args.savepath,
-     bucket=args.bucket,
-     n_reference=args.n_reference,
-+    n_samples=args.n_samples,
-+
- )
- 
- #-----------------------------------------------------------------------------#
\ No newline at end of file
+-    def render_samples(self, batch_size=2, n_samples=2):
++    def render_samples(self, batch_size=2, n_samples=10):
+         '''
+             renders samples from (ema) diffusion model
+         '''
+diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
+index 83efa3b..01e892b 100644
+Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
+diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+index 9ad1dbc..48a4810 100644
+--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+@@ -3,13 +3,13 @@
+     "add_extras": {
+         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+         "_type": "python_object (type = method)",
+-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoKYaUUpQu"
+     },
+     "attention": false,
+     "batch_size": 32,
+     "bucket": null,
+     "clip_denoised": true,
+-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
+     "config": "config.maze2d",
+     "dataset": "maze2d-large-v1",
+     "device": "cuda",
+@@ -26,18 +26,18 @@
+     "eval_fstrings": {
+         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+         "_type": "python_object (type = method)",
+-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoV4aUUpQu"
+     },
+     "exp_name": "diffusion/H384_T256",
+     "generate_exp_name": {
+         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+         "_type": "python_object (type = method)",
+-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoHIaUUpQu"
+     },
+     "get_commit": {
+         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+         "_type": "python_object (type = method)",
+-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoI4aUUpQu"
+     },
+     "gradient_accumulate_every": 2,
+     "horizon": 384,
+@@ -51,7 +51,7 @@
+     "mkdir": {
+         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+         "_type": "python_object (type = method)",
+-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoR4aUUpQu"
+     },
+     "model": "models.TemporalUnet",
+     "n_diffusion_steps": 256,
+@@ -69,21 +69,21 @@
+     "read_config": {
+         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+         "_type": "python_object (type = method)",
+-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoMoaUUpQu"
+     },
+     "renderer": "utils.Maze2dRenderer",
+     "reproducibility": {
+         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
+         "git_has_uncommitted_changes": true,
+         "git_root": "/home/wslabtop/project/diffuser",
+-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
+-        "time": "Fri Nov  8 09:50:02 2024"
++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
++        "time": "Fri Nov  8 11:56:36 2024"
+     },
+     "sample_freq": 1000,
+     "save_diff": {
+         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+         "_type": "python_object (type = method)",
+-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoFYaUUpQu"
+     },
+     "save_freq": 1000,
+     "save_parallel": false,
+@@ -91,12 +91,12 @@
+     "set_loadbase": {
+         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+         "_type": "python_object (type = method)",
+-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoVIaUUpQu"
+     },
+     "set_seed": {
+         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+         "_type": "python_object (type = method)",
+-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAdob3Jpem9ulE2AAYwLc2FtcGxlX2ZyZXGUTegDjAlhdHRlbnRpb26UiYwJZW1hX2RlY2F5lEc/79cKPXCj14wHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAlzYXZlX2RpZmaUaAJoBmgVhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaByGlFKUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MDWNsaXBfZGVub2lzZWSUiIwJbG9zc190eXBllIwCbDKUjApnZXRfY29tbWl0lGgCaAZoI4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMD21heF9wYXRoX2xlbmd0aJRNQJyMCmFkZF9leHRyYXOUaAJoBmgphpRSlIwNc2F2ZV9wYXJhbGxlbJSJjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwHbG9nYmFzZZSMBGxvZ3OUjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1sb3NzX2Rpc2NvdW50lEsBjAluX3NhbXBsZXOUSwqMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLdXNlX3BhZGRpbmeUiYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCmJhdGNoX3NpemWUSyCMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAZwcmVmaXiUjApkaWZmdXNpb24vlIwGZGV2aWNllIwEY3VkYZSMBW1rZGlylGgCaAZoR4aUUpSMC25fcmVmZXJlbmNllEsyjA1hY3Rpb25fd2VpZ2h0lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9wcmVkaWN0X2Vwc2lsb26UiYwMbG9zc193ZWlnaHRzlE6MCXNhdmVfZnJlcZRN6AOMDHNldF9sb2FkYmFzZZRoAmgGaFSGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoV4aUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUdWJoEoaUUpQu"
+     },
+     "termination_penalty": null,
+     "use_padding": false
+diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+index ed9549e..f429b10 100644
+--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+@@ -1,231 +1,6813 @@
+-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
+-index 1ad2106..5991f01 100644
+---- a/diffuser/datasets/buffer.py
+-+++ b/diffuser/datasets/buffer.py
+-@@ -9,7 +9,7 @@ class ReplayBuffer:
+- 
+-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
+-         self._dict = {
+--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
+-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
+-         }
+-         self._count = 0
+-         self.max_n_episodes = max_n_episodes
+-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
+-index 655a6f0..d5dd111 100644
+---- a/diffuser/environments/registration.py
+-+++ b/diffuser/environments/registration.py
+-@@ -1,3 +1,5 @@
+-+import sys
+-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
+- import gym
+- 
+- ENVIRONMENT_SPECS = (
+-@@ -31,4 +33,4 @@ def register_environments():
+-         return gym_ids
+-     except:
+-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
+--        return tuple()
+-\ No newline at end of file
+-+        return tuple()
++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
++index db2afeb..06eae6e 100644
++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
++index 5923eb6..2f3a4e3 100644
++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
++diff --git a/diffuser/utils/__pycache__/training.cpython-38.pyc b/diffuser/utils/__pycache__/training.cpython-38.pyc
++index 817bf89..ce361cf 100644
++Binary files a/diffuser/utils/__pycache__/training.cpython-38.pyc and b/diffuser/utils/__pycache__/training.cpython-38.pyc differ
+ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
+-index 8659ff1..d01c272 100644
++index d01c272..45ee659 100644
+ --- a/diffuser/utils/rendering.py
+ +++ b/diffuser/utils/rendering.py
+-@@ -36,15 +36,44 @@ def env_map(env_name):
+- #------------------------------ helper functions -----------------------------#
+- #-----------------------------------------------------------------------------#
+- 
+-+def atmost_2d(x):
+-+    while x.ndim > 2:
+-+        x = x.squeeze(0)
+-+    return x
+-+
+-+def zipsafe(*args):
+-+    length = len(args[0])
+-+    assert all([len(a) == length for a in args])
+-+    return zip(*args)
+-+
+-+def zipkw(*args, **kwargs):
+-+    nargs = len(args)
+-+    keys = kwargs.keys()
+-+    vals = [kwargs[k] for k in keys]
+-+    zipped = zipsafe(*args, *vals)
+-+    for items in zipped:
+-+        zipped_args = items[:nargs]
+-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
+-+        yield zipped_args, zipped_kwargs
+-+
+- def get_image_mask(img):
+-     background = (img == 255).all(axis=-1, keepdims=True)
+-     mask = ~background.repeat(3, axis=-1)
+-     return mask
+- 
+--def atmost_2d(x):
+--    while x.ndim > 2:
+--        x = x.squeeze(0)
+--    return x
+-+def plot2img(fig, remove_margins=True):
+-+    # https://stackoverflow.com/a/35362787/2912349
+-+    # https://stackoverflow.com/a/54334430/2912349
+-+
+-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
+-+
+-+    if remove_margins:
+-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
+-+
+-+    canvas = FigureCanvasAgg(fig)
+-+    canvas.draw()
+-+    img_as_string, (width, height) = canvas.print_to_buffer()
+-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
+- 
+- #-----------------------------------------------------------------------------#
+- #---------------------------------- renderers --------------------------------#
+-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
+-         else:
+-             self.env = env
+-         ## - 1 because the envs in renderer are fully-observed
+-+        ## @TODO : clean up
+-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
+-         self.action_dim = np.prod(self.env.action_space.shape)
+-         try:
+-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
+-     def __call__(self, *args, **kwargs):
+-         return self.renders(*args, **kwargs)
++@@ -306,6 +306,10 @@ class MazeRenderer:
++             savepath : str
++             observations : [ n_paths x horizon x 2 ]
++         '''
+++        print("ncol_st:", ncol)
+++        ncol = max(1, min(len(paths), 10))
+++        print("Number of paths:", len(paths))
+++        print("ncol:", ncol)
++         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+  
+-+#-----------------------------------------------------------------------------#
+-+#----------------------------------- maze2d ----------------------------------#
+-+#-----------------------------------------------------------------------------#
+-+
+-+MAZE_BOUNDS = {
+-+    'maze2d-umaze-v1': (0, 5, 0, 5),
+-+    'maze2d-medium-v1': (0, 8, 0, 8),
+-+    'maze2d-large-v1': (0, 9, 0, 12)
+-+}
+-+
+-+class MazeRenderer:
+-+
+-+    def __init__(self, env):
+-+        if type(env) is str: env = load_environment(env)
+-+        self._config = env._config
+-+        self._background = self._config != ' '
+-+        self._remove_margins = False
+-+        self._extent = (0, 1, 1, 0)
+-+
+-+    def renders(self, observations, conditions=None, title=None):
+-+        plt.clf()
+-+        fig = plt.gcf()
+-+        fig.set_size_inches(5, 5)
+-+        plt.imshow(self._background * .5,
+-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
+-+
+-+        path_length = len(observations)
+-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
+-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
+-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
+-+        plt.axis('off')
+-+        plt.title(title)
+-+        img = plot2img(fig, remove_margins=self._remove_margins)
+-+        return img
+-+
+-+    def composite(self, savepath, paths, ncol=5, **kwargs):
+-+        '''
+-+            savepath : str
+-+            observations : [ n_paths x horizon x 2 ]
+-+        '''
+-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+-+
+-+        images = []
+-+        for path, kw in zipkw(paths, **kwargs):
+-+            img = self.renders(*path, **kw)
+-+            images.append(img)
+-+        images = np.stack(images, axis=0)
+-+
+-+        nrow = len(images) // ncol
+-+        images = einops.rearrange(images,
+-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
+-+        imageio.imsave(savepath, images)
+-+        print(f'Saved {len(paths)} samples to: {savepath}')
+-+
+-+class Maze2dRenderer(MazeRenderer):
+-+
+-+    def __init__(self, env, observation_dim=None):
+-+        self.env_name = env
+-+        self.env = load_environment(env)
+-+        self.observation_dim = np.prod(self.env.observation_space.shape)
+-+        self.action_dim = np.prod(self.env.action_space.shape)
+-+        self.goal = None
+-+        self._background = self.env.maze_arr == 10
+-+        self._remove_margins = False
+-+        self._extent = (0, 1, 1, 0)
+-+
+-+    def renders(self, observations, conditions=None, **kwargs):
+-+        bounds = MAZE_BOUNDS[self.env_name]
+-+
+-+        observations = observations + .5
+-+        if len(bounds) == 2:
+-+            _, scale = bounds
+-+            observations /= scale
+-+        elif len(bounds) == 4:
+-+            _, iscale, _, jscale = bounds
+-+            observations[:, 0] /= iscale
+-+            observations[:, 1] /= jscale
+-+        else:
+-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
+-+
+-+        if conditions is not None:
+-+            conditions /= scale
+-+        return super().renders(observations, conditions, **kwargs)
+-+
+- #-----------------------------------------------------------------------------#
+- #---------------------------------- rollouts ---------------------------------#
+- #-----------------------------------------------------------------------------#
+-diff --git a/environment.yml b/environment.yml
+-index c14a0cf..e56b6a9 100644
+---- a/environment.yml
+-+++ b/environment.yml
+-@@ -1,4 +1,4 @@
+--name: diffuser
+-+name: diffuser_2
+- channels:
+- - defaults
+- - conda-forge
+-@@ -12,9 +12,7 @@ dependencies:
+-     - gym==0.18.0
+-     - mujoco-py==2.0.2.13
+-     - matplotlib==3.3.4
+--    - torch==1.9.1+cu111
+-     - typed-argument-parser
+--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
+-     - scikit-image==0.17.2
+-     - scikit-video==1.1.11
+-     - gitpython
+-@@ -31,5 +29,4 @@ dependencies:
+-     - crcmod # for fast gsutil rsync on large files
+-     - google-api-python-client
+-     - cryptography
+--    - git+https://github.com/JannerM/doodad.git@janner
+-     - gdown>=4.6.0
+-diff --git a/scripts/train.py b/scripts/train.py
+-index 502837e..f9646f7 100644
+---- a/scripts/train.py
+-+++ b/scripts/train.py
+-@@ -7,7 +7,8 @@ import diffuser.utils as utils
++         images = []
++diff --git a/diffuser/utils/training.py b/diffuser/utils/training.py
++index fc5d033..8fa9437 100644
++--- a/diffuser/utils/training.py
+++++ b/diffuser/utils/training.py
++@@ -51,6 +51,7 @@ class Trainer(object):
++         save_parallel=False,
++         results_folder='./results',
++         n_reference=8,
+++        n_samples=10,
++         bucket=None,
++     ):
++         super().__init__()
++@@ -187,7 +188,7 @@ class Trainer(object):
++         savepath = os.path.join(self.logdir, f'_sample-reference.png')
++         self.renderer.composite(savepath, observations)
+  
+- class Parser(utils.Parser):
+-     dataset: str = 'hopper-medium-expert-v2'
+--    config: str = 'config.locomotion'
+-+    #config: str = 'config.locomotion'
+-+    config: str = 'config.maze2d'
+- 
+- args = Parser().parse_args('diffusion')
+- 
+-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
+-     results_folder=args.savepath,
+-     bucket=args.bucket,
+-     n_reference=args.n_reference,
+-+    n_samples=args.n_samples,
+-+
+- )
+- 
+- #-----------------------------------------------------------------------------#
+\ No newline at end of file
++-    def render_samples(self, batch_size=2, n_samples=2):
+++    def render_samples(self, batch_size=2, n_samples=10):
++         '''
++             renders samples from (ema) diffusion model
++         '''
++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
++index 83efa3b..0bc1a7b 100644
++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++index 9ad1dbc..1657462 100644
++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++@@ -3,13 +3,13 @@
++     "add_extras": {
++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++         "_type": "python_object (type = method)",
++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
+++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowLbl9yZWZlcmVuY2WUSzKMDWNsaXBfZGVub2lzZWSUiIwLdXNlX3BhZGRpbmeUiYwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWV2YWxfZnN0cmluZ3OUaAJoBmgPhpRSlIwFbWtkaXKUaAJoBmgShpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCHNldF9zZWVklGgCaAZoG4aUUpSMBmJ1Y2tldJROjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZkZXZpY2WUjARjdWRhlIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwJbG9zc190eXBllIwCbDKUjAlhdHRlbnRpb26UiYwJZGltX211bHRzlEsBSwRLCIeUjAlzYXZlX2RpZmaUaAJoBmgshpRSlIwKZ2V0X2NvbW1pdJRoAmgGaC+GlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj14wHaG9yaXpvbpRNgAGMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMDHNldF9sb2FkYmFzZZRoAmgGaDiGlFKUjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmg9hpRSlIwMbG9zc193ZWlnaHRzlE6MBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMB25fc2F2ZXOUSzKMDWFjdGlvbl93ZWlnaHSUSwGMDWxvc3NfZGlzY291bnSUSwGMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNc2F2ZV9wYXJhbGxlbJSJjA9wcmVkaWN0X2Vwc2lsb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMB2xvZ2Jhc2WUjARsb2dzlIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjAtyZWFkX2NvbmZpZ5RoAmgGaFaGlFKUjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaFmGlFKUdWJoPYaUUpQu"
++     },
++     "attention": false,
++     "batch_size": 32,
++     "bucket": null,
++     "clip_denoised": true,
++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
+++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
++     "config": "config.maze2d",
++     "dataset": "maze2d-large-v1",
++     "device": "cuda",
++@@ -26,18 +26,18 @@
++     "eval_fstrings": {
++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++         "_type": "python_object (type = method)",
++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
+++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowLbl9yZWZlcmVuY2WUSzKMDWNsaXBfZGVub2lzZWSUiIwLdXNlX3BhZGRpbmeUiYwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWV2YWxfZnN0cmluZ3OUaAJoBmgPhpRSlIwFbWtkaXKUaAJoBmgShpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCHNldF9zZWVklGgCaAZoG4aUUpSMBmJ1Y2tldJROjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZkZXZpY2WUjARjdWRhlIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwJbG9zc190eXBllIwCbDKUjAlhdHRlbnRpb26UiYwJZGltX211bHRzlEsBSwRLCIeUjAlzYXZlX2RpZmaUaAJoBmgshpRSlIwKZ2V0X2NvbW1pdJRoAmgGaC+GlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj14wHaG9yaXpvbpRNgAGMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMDHNldF9sb2FkYmFzZZRoAmgGaDiGlFKUjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmg9hpRSlIwMbG9zc193ZWlnaHRzlE6MBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMB25fc2F2ZXOUSzKMDWFjdGlvbl93ZWlnaHSUSwGMDWxvc3NfZGlzY291bnSUSwGMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNc2F2ZV9wYXJhbGxlbJSJjA9wcmVkaWN0X2Vwc2lsb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMB2xvZ2Jhc2WUjARsb2dzlIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjAtyZWFkX2NvbmZpZ5RoAmgGaFaGlFKUjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaFmGlFKUdWJoD4aUUpQu"
++     },
++     "exp_name": "diffusion/H384_T256",
++     "generate_exp_name": {
++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++         "_type": "python_object (type = method)",
++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
+++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowLbl9yZWZlcmVuY2WUSzKMDWNsaXBfZGVub2lzZWSUiIwLdXNlX3BhZGRpbmeUiYwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWV2YWxfZnN0cmluZ3OUaAJoBmgPhpRSlIwFbWtkaXKUaAJoBmgShpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCHNldF9zZWVklGgCaAZoG4aUUpSMBmJ1Y2tldJROjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZkZXZpY2WUjARjdWRhlIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwJbG9zc190eXBllIwCbDKUjAlhdHRlbnRpb26UiYwJZGltX211bHRzlEsBSwRLCIeUjAlzYXZlX2RpZmaUaAJoBmgshpRSlIwKZ2V0X2NvbW1pdJRoAmgGaC+GlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj14wHaG9yaXpvbpRNgAGMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMDHNldF9sb2FkYmFzZZRoAmgGaDiGlFKUjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmg9hpRSlIwMbG9zc193ZWlnaHRzlE6MBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMB25fc2F2ZXOUSzKMDWFjdGlvbl93ZWlnaHSUSwGMDWxvc3NfZGlzY291bnSUSwGMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNc2F2ZV9wYXJhbGxlbJSJjA9wcmVkaWN0X2Vwc2lsb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMB2xvZ2Jhc2WUjARsb2dzlIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjAtyZWFkX2NvbmZpZ5RoAmgGaFaGlFKUjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaFmGlFKUdWJoWYaUUpQu"
++     },
++     "get_commit": {
++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++         "_type": "python_object (type = method)",
++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
+++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowLbl9yZWZlcmVuY2WUSzKMDWNsaXBfZGVub2lzZWSUiIwLdXNlX3BhZGRpbmeUiYwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWV2YWxfZnN0cmluZ3OUaAJoBmgPhpRSlIwFbWtkaXKUaAJoBmgShpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCHNldF9zZWVklGgCaAZoG4aUUpSMBmJ1Y2tldJROjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZkZXZpY2WUjARjdWRhlIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwJbG9zc190eXBllIwCbDKUjAlhdHRlbnRpb26UiYwJZGltX211bHRzlEsBSwRLCIeUjAlzYXZlX2RpZmaUaAJoBmgshpRSlIwKZ2V0X2NvbW1pdJRoAmgGaC+GlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj14wHaG9yaXpvbpRNgAGMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMDHNldF9sb2FkYmFzZZRoAmgGaDiGlFKUjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmg9hpRSlIwMbG9zc193ZWlnaHRzlE6MBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMB25fc2F2ZXOUSzKMDWFjdGlvbl93ZWlnaHSUSwGMDWxvc3NfZGlzY291bnSUSwGMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNc2F2ZV9wYXJhbGxlbJSJjA9wcmVkaWN0X2Vwc2lsb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMB2xvZ2Jhc2WUjARsb2dzlIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjAtyZWFkX2NvbmZpZ5RoAmgGaFaGlFKUjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaFmGlFKUdWJoL4aUUpQu"
++     },
++     "gradient_accumulate_every": 2,
++     "horizon": 384,
++@@ -51,7 +51,7 @@
++     "mkdir": {
++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++         "_type": "python_object (type = method)",
++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
+++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowLbl9yZWZlcmVuY2WUSzKMDWNsaXBfZGVub2lzZWSUiIwLdXNlX3BhZGRpbmeUiYwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWV2YWxfZnN0cmluZ3OUaAJoBmgPhpRSlIwFbWtkaXKUaAJoBmgShpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCHNldF9zZWVklGgCaAZoG4aUUpSMBmJ1Y2tldJROjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZkZXZpY2WUjARjdWRhlIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwJbG9zc190eXBllIwCbDKUjAlhdHRlbnRpb26UiYwJZGltX211bHRzlEsBSwRLCIeUjAlzYXZlX2RpZmaUaAJoBmgshpRSlIwKZ2V0X2NvbW1pdJRoAmgGaC+GlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj14wHaG9yaXpvbpRNgAGMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMDHNldF9sb2FkYmFzZZRoAmgGaDiGlFKUjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmg9hpRSlIwMbG9zc193ZWlnaHRzlE6MBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMB25fc2F2ZXOUSzKMDWFjdGlvbl93ZWlnaHSUSwGMDWxvc3NfZGlzY291bnSUSwGMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNc2F2ZV9wYXJhbGxlbJSJjA9wcmVkaWN0X2Vwc2lsb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMB2xvZ2Jhc2WUjARsb2dzlIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjAtyZWFkX2NvbmZpZ5RoAmgGaFaGlFKUjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaFmGlFKUdWJoEoaUUpQu"
++     },
++     "model": "models.TemporalUnet",
++     "n_diffusion_steps": 256,
++@@ -69,21 +69,21 @@
++     "read_config": {
++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++         "_type": "python_object (type = method)",
++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
+++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowLbl9yZWZlcmVuY2WUSzKMDWNsaXBfZGVub2lzZWSUiIwLdXNlX3BhZGRpbmeUiYwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWV2YWxfZnN0cmluZ3OUaAJoBmgPhpRSlIwFbWtkaXKUaAJoBmgShpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCHNldF9zZWVklGgCaAZoG4aUUpSMBmJ1Y2tldJROjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZkZXZpY2WUjARjdWRhlIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwJbG9zc190eXBllIwCbDKUjAlhdHRlbnRpb26UiYwJZGltX211bHRzlEsBSwRLCIeUjAlzYXZlX2RpZmaUaAJoBmgshpRSlIwKZ2V0X2NvbW1pdJRoAmgGaC+GlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj14wHaG9yaXpvbpRNgAGMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMDHNldF9sb2FkYmFzZZRoAmgGaDiGlFKUjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmg9hpRSlIwMbG9zc193ZWlnaHRzlE6MBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMB25fc2F2ZXOUSzKMDWFjdGlvbl93ZWlnaHSUSwGMDWxvc3NfZGlzY291bnSUSwGMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNc2F2ZV9wYXJhbGxlbJSJjA9wcmVkaWN0X2Vwc2lsb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMB2xvZ2Jhc2WUjARsb2dzlIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjAtyZWFkX2NvbmZpZ5RoAmgGaFaGlFKUjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaFmGlFKUdWJoVoaUUpQu"
++     },
++     "renderer": "utils.Maze2dRenderer",
++     "reproducibility": {
++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
++         "git_has_uncommitted_changes": true,
++         "git_root": "/home/wslabtop/project/diffuser",
++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
++-        "time": "Fri Nov  8 09:50:02 2024"
+++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
+++        "time": "Fri Nov  8 11:55:53 2024"
++     },
++     "sample_freq": 1000,
++     "save_diff": {
++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++         "_type": "python_object (type = method)",
++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
+++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowLbl9yZWZlcmVuY2WUSzKMDWNsaXBfZGVub2lzZWSUiIwLdXNlX3BhZGRpbmeUiYwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWV2YWxfZnN0cmluZ3OUaAJoBmgPhpRSlIwFbWtkaXKUaAJoBmgShpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCHNldF9zZWVklGgCaAZoG4aUUpSMBmJ1Y2tldJROjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZkZXZpY2WUjARjdWRhlIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwJbG9zc190eXBllIwCbDKUjAlhdHRlbnRpb26UiYwJZGltX211bHRzlEsBSwRLCIeUjAlzYXZlX2RpZmaUaAJoBmgshpRSlIwKZ2V0X2NvbW1pdJRoAmgGaC+GlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj14wHaG9yaXpvbpRNgAGMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMDHNldF9sb2FkYmFzZZRoAmgGaDiGlFKUjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmg9hpRSlIwMbG9zc193ZWlnaHRzlE6MBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMB25fc2F2ZXOUSzKMDWFjdGlvbl93ZWlnaHSUSwGMDWxvc3NfZGlzY291bnSUSwGMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNc2F2ZV9wYXJhbGxlbJSJjA9wcmVkaWN0X2Vwc2lsb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMB2xvZ2Jhc2WUjARsb2dzlIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjAtyZWFkX2NvbmZpZ5RoAmgGaFaGlFKUjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaFmGlFKUdWJoLIaUUpQu"
++     },
++     "save_freq": 1000,
++     "save_parallel": false,
++@@ -91,12 +91,12 @@
++     "set_loadbase": {
++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++         "_type": "python_object (type = method)",
++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
+++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowLbl9yZWZlcmVuY2WUSzKMDWNsaXBfZGVub2lzZWSUiIwLdXNlX3BhZGRpbmeUiYwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWV2YWxfZnN0cmluZ3OUaAJoBmgPhpRSlIwFbWtkaXKUaAJoBmgShpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCHNldF9zZWVklGgCaAZoG4aUUpSMBmJ1Y2tldJROjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZkZXZpY2WUjARjdWRhlIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwJbG9zc190eXBllIwCbDKUjAlhdHRlbnRpb26UiYwJZGltX211bHRzlEsBSwRLCIeUjAlzYXZlX2RpZmaUaAJoBmgshpRSlIwKZ2V0X2NvbW1pdJRoAmgGaC+GlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj14wHaG9yaXpvbpRNgAGMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMDHNldF9sb2FkYmFzZZRoAmgGaDiGlFKUjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmg9hpRSlIwMbG9zc193ZWlnaHRzlE6MBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMB25fc2F2ZXOUSzKMDWFjdGlvbl93ZWlnaHSUSwGMDWxvc3NfZGlzY291bnSUSwGMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNc2F2ZV9wYXJhbGxlbJSJjA9wcmVkaWN0X2Vwc2lsb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMB2xvZ2Jhc2WUjARsb2dzlIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjAtyZWFkX2NvbmZpZ5RoAmgGaFaGlFKUjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaFmGlFKUdWJoOIaUUpQu"
++     },
++     "set_seed": {
++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++         "_type": "python_object (type = method)",
++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
+++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowLbl9yZWZlcmVuY2WUSzKMDWNsaXBfZGVub2lzZWSUiIwLdXNlX3BhZGRpbmeUiYwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWV2YWxfZnN0cmluZ3OUaAJoBmgPhpRSlIwFbWtkaXKUaAJoBmgShpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCHNldF9zZWVklGgCaAZoG4aUUpSMBmJ1Y2tldJROjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZkZXZpY2WUjARjdWRhlIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwJbG9zc190eXBllIwCbDKUjAlhdHRlbnRpb26UiYwJZGltX211bHRzlEsBSwRLCIeUjAlzYXZlX2RpZmaUaAJoBmgshpRSlIwKZ2V0X2NvbW1pdJRoAmgGaC+GlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj14wHaG9yaXpvbpRNgAGMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMDHNldF9sb2FkYmFzZZRoAmgGaDiGlFKUjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmg9hpRSlIwMbG9zc193ZWlnaHRzlE6MBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMB25fc2F2ZXOUSzKMDWFjdGlvbl93ZWlnaHSUSwGMDWxvc3NfZGlzY291bnSUSwGMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNc2F2ZV9wYXJhbGxlbJSJjA9wcmVkaWN0X2Vwc2lsb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMB2xvZ2Jhc2WUjARsb2dzlIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjAtyZWFkX2NvbmZpZ5RoAmgGaFaGlFKUjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaFmGlFKUdWJoG4aUUpQu"
++     },
++     "termination_penalty": null,
++     "use_padding": false
++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++index ed9549e..a601bdd 100644
++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++@@ -1,231 +1,6245 @@
++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
++-index 1ad2106..5991f01 100644
++---- a/diffuser/datasets/buffer.py
++-+++ b/diffuser/datasets/buffer.py
++-@@ -9,7 +9,7 @@ class ReplayBuffer:
++- 
++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
++-         self._dict = {
++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
++-         }
++-         self._count = 0
++-         self.max_n_episodes = max_n_episodes
++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
++-index 655a6f0..d5dd111 100644
++---- a/diffuser/environments/registration.py
++-+++ b/diffuser/environments/registration.py
++-@@ -1,3 +1,5 @@
++-+import sys
++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
++- import gym
++- 
++- ENVIRONMENT_SPECS = (
++-@@ -31,4 +33,4 @@ def register_environments():
++-         return gym_ids
++-     except:
++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
++--        return tuple()
++-\ No newline at end of file
++-+        return tuple()
+++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
+++index db2afeb..06eae6e 100644
+++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
+++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
+++index 5923eb6..2f3a4e3 100644
+++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
+++diff --git a/diffuser/utils/__pycache__/training.cpython-38.pyc b/diffuser/utils/__pycache__/training.cpython-38.pyc
+++index 817bf89..942200a 100644
+++Binary files a/diffuser/utils/__pycache__/training.cpython-38.pyc and b/diffuser/utils/__pycache__/training.cpython-38.pyc differ
++ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
++-index 8659ff1..d01c272 100644
+++index d01c272..45ee659 100644
++ --- a/diffuser/utils/rendering.py
++ +++ b/diffuser/utils/rendering.py
++-@@ -36,15 +36,44 @@ def env_map(env_name):
++- #------------------------------ helper functions -----------------------------#
++- #-----------------------------------------------------------------------------#
++- 
++-+def atmost_2d(x):
++-+    while x.ndim > 2:
++-+        x = x.squeeze(0)
++-+    return x
++-+
++-+def zipsafe(*args):
++-+    length = len(args[0])
++-+    assert all([len(a) == length for a in args])
++-+    return zip(*args)
++-+
++-+def zipkw(*args, **kwargs):
++-+    nargs = len(args)
++-+    keys = kwargs.keys()
++-+    vals = [kwargs[k] for k in keys]
++-+    zipped = zipsafe(*args, *vals)
++-+    for items in zipped:
++-+        zipped_args = items[:nargs]
++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
++-+        yield zipped_args, zipped_kwargs
++-+
++- def get_image_mask(img):
++-     background = (img == 255).all(axis=-1, keepdims=True)
++-     mask = ~background.repeat(3, axis=-1)
++-     return mask
++- 
++--def atmost_2d(x):
++--    while x.ndim > 2:
++--        x = x.squeeze(0)
++--    return x
++-+def plot2img(fig, remove_margins=True):
++-+    # https://stackoverflow.com/a/35362787/2912349
++-+    # https://stackoverflow.com/a/54334430/2912349
++-+
++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
++-+
++-+    if remove_margins:
++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
++-+
++-+    canvas = FigureCanvasAgg(fig)
++-+    canvas.draw()
++-+    img_as_string, (width, height) = canvas.print_to_buffer()
++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
++- 
++- #-----------------------------------------------------------------------------#
++- #---------------------------------- renderers --------------------------------#
++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
++-         else:
++-             self.env = env
++-         ## - 1 because the envs in renderer are fully-observed
++-+        ## @TODO : clean up
++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
++-         self.action_dim = np.prod(self.env.action_space.shape)
++-         try:
++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
++-     def __call__(self, *args, **kwargs):
++-         return self.renders(*args, **kwargs)
+++@@ -306,6 +306,10 @@ class MazeRenderer:
+++             savepath : str
+++             observations : [ n_paths x horizon x 2 ]
+++         '''
++++        print("ncol_st:", ncol)
++++        ncol = max(1, min(len(paths), 10))
++++        print("Number of paths:", len(paths))
++++        print("ncol:", ncol)
+++         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++  
++-+#-----------------------------------------------------------------------------#
++-+#----------------------------------- maze2d ----------------------------------#
++-+#-----------------------------------------------------------------------------#
++-+
++-+MAZE_BOUNDS = {
++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
++-+    'maze2d-medium-v1': (0, 8, 0, 8),
++-+    'maze2d-large-v1': (0, 9, 0, 12)
++-+}
++-+
++-+class MazeRenderer:
++-+
++-+    def __init__(self, env):
++-+        if type(env) is str: env = load_environment(env)
++-+        self._config = env._config
++-+        self._background = self._config != ' '
++-+        self._remove_margins = False
++-+        self._extent = (0, 1, 1, 0)
++-+
++-+    def renders(self, observations, conditions=None, title=None):
++-+        plt.clf()
++-+        fig = plt.gcf()
++-+        fig.set_size_inches(5, 5)
++-+        plt.imshow(self._background * .5,
++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
++-+
++-+        path_length = len(observations)
++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
++-+        plt.axis('off')
++-+        plt.title(title)
++-+        img = plot2img(fig, remove_margins=self._remove_margins)
++-+        return img
++-+
++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
++-+        '''
++-+            savepath : str
++-+            observations : [ n_paths x horizon x 2 ]
++-+        '''
++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++-+
++-+        images = []
++-+        for path, kw in zipkw(paths, **kwargs):
++-+            img = self.renders(*path, **kw)
++-+            images.append(img)
++-+        images = np.stack(images, axis=0)
++-+
++-+        nrow = len(images) // ncol
++-+        images = einops.rearrange(images,
++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
++-+        imageio.imsave(savepath, images)
++-+        print(f'Saved {len(paths)} samples to: {savepath}')
++-+
++-+class Maze2dRenderer(MazeRenderer):
++-+
++-+    def __init__(self, env, observation_dim=None):
++-+        self.env_name = env
++-+        self.env = load_environment(env)
++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
++-+        self.action_dim = np.prod(self.env.action_space.shape)
++-+        self.goal = None
++-+        self._background = self.env.maze_arr == 10
++-+        self._remove_margins = False
++-+        self._extent = (0, 1, 1, 0)
++-+
++-+    def renders(self, observations, conditions=None, **kwargs):
++-+        bounds = MAZE_BOUNDS[self.env_name]
++-+
++-+        observations = observations + .5
++-+        if len(bounds) == 2:
++-+            _, scale = bounds
++-+            observations /= scale
++-+        elif len(bounds) == 4:
++-+            _, iscale, _, jscale = bounds
++-+            observations[:, 0] /= iscale
++-+            observations[:, 1] /= jscale
++-+        else:
++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
++-+
++-+        if conditions is not None:
++-+            conditions /= scale
++-+        return super().renders(observations, conditions, **kwargs)
++-+
++- #-----------------------------------------------------------------------------#
++- #---------------------------------- rollouts ---------------------------------#
++- #-----------------------------------------------------------------------------#
++-diff --git a/environment.yml b/environment.yml
++-index c14a0cf..e56b6a9 100644
++---- a/environment.yml
++-+++ b/environment.yml
++-@@ -1,4 +1,4 @@
++--name: diffuser
++-+name: diffuser_2
++- channels:
++- - defaults
++- - conda-forge
++-@@ -12,9 +12,7 @@ dependencies:
++-     - gym==0.18.0
++-     - mujoco-py==2.0.2.13
++-     - matplotlib==3.3.4
++--    - torch==1.9.1+cu111
++-     - typed-argument-parser
++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
++-     - scikit-image==0.17.2
++-     - scikit-video==1.1.11
++-     - gitpython
++-@@ -31,5 +29,4 @@ dependencies:
++-     - crcmod # for fast gsutil rsync on large files
++-     - google-api-python-client
++-     - cryptography
++--    - git+https://github.com/JannerM/doodad.git@janner
++-     - gdown>=4.6.0
++-diff --git a/scripts/train.py b/scripts/train.py
++-index 502837e..f9646f7 100644
++---- a/scripts/train.py
++-+++ b/scripts/train.py
++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
++- 
++- class Parser(utils.Parser):
++-     dataset: str = 'hopper-medium-expert-v2'
++--    config: str = 'config.locomotion'
++-+    #config: str = 'config.locomotion'
++-+    config: str = 'config.maze2d'
++- 
++- args = Parser().parse_args('diffusion')
++- 
++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
++-     results_folder=args.savepath,
++-     bucket=args.bucket,
++-     n_reference=args.n_reference,
++-+    n_samples=args.n_samples,
++-+
++- )
++- 
++- #-----------------------------------------------------------------------------#
++\ No newline at end of file
+++         images = []
+++diff --git a/diffuser/utils/training.py b/diffuser/utils/training.py
+++index fc5d033..ded9897 100644
+++--- a/diffuser/utils/training.py
++++++ b/diffuser/utils/training.py
+++@@ -51,6 +51,7 @@ class Trainer(object):
+++         save_parallel=False,
+++         results_folder='./results',
+++         n_reference=8,
++++        n_samples=10,
+++         bucket=None,
+++     ):
+++         super().__init__()
+++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
+++index 83efa3b..a40f17a 100644
+++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
+++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++index 9ad1dbc..57f538a 100644
+++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++@@ -3,13 +3,13 @@
+++     "add_extras": {
+++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++         "_type": "python_object (type = method)",
+++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCmFkZF9leHRyYXOUaAJoBmgIhpRSlIwLbl9yZWZlcmVuY2WUSzKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBmJ1Y2tldJROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwJZW1hX2RlY2F5lEc/79cKPXCj14wPbWF4X3BhdGhfbGVuZ3RolE1AnIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDGxvc3Nfd2VpZ2h0c5ROjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlzYXZlX2RpZmaUaAJoBmglhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNbG9zc19kaXNjb3VudJRLAYwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwLc2FtcGxlX2ZyZXGUTegDjAZkZXZpY2WUjARjdWRhlIwNZXZhbF9mc3RyaW5nc5RoAmgGaDKGlFKUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlhdHRlbnRpb26UiYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMDWNsaXBfZGVub2lzZWSUiIwJbl9zYW1wbGVzlEsKjAdob3Jpem9ulE2AAYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApiYXRjaF9zaXpllEsgjA1zYXZlX3BhcmFsbGVslImMC3VzZV9wYWRkaW5nlImMCWxvc3NfdHlwZZSMAmwylIwKZ2V0X2NvbW1pdJRoAmgGaEmGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmhMhpRSlIwFbWtkaXKUaAJoBmhPhpRSlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwHbl9zYXZlc5RLMowRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhVhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAtyZWFkX2NvbmZpZ5RoAmgGaFmGlFKUdWJoCIaUUpQu"
+++     },
+++     "attention": false,
+++     "batch_size": 32,
+++     "bucket": null,
+++     "clip_denoised": true,
+++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
+++     "config": "config.maze2d",
+++     "dataset": "maze2d-large-v1",
+++     "device": "cuda",
+++@@ -26,18 +26,18 @@
+++     "eval_fstrings": {
+++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++         "_type": "python_object (type = method)",
+++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCmFkZF9leHRyYXOUaAJoBmgIhpRSlIwLbl9yZWZlcmVuY2WUSzKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBmJ1Y2tldJROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwJZW1hX2RlY2F5lEc/79cKPXCj14wPbWF4X3BhdGhfbGVuZ3RolE1AnIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDGxvc3Nfd2VpZ2h0c5ROjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlzYXZlX2RpZmaUaAJoBmglhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNbG9zc19kaXNjb3VudJRLAYwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwLc2FtcGxlX2ZyZXGUTegDjAZkZXZpY2WUjARjdWRhlIwNZXZhbF9mc3RyaW5nc5RoAmgGaDKGlFKUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlhdHRlbnRpb26UiYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMDWNsaXBfZGVub2lzZWSUiIwJbl9zYW1wbGVzlEsKjAdob3Jpem9ulE2AAYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApiYXRjaF9zaXpllEsgjA1zYXZlX3BhcmFsbGVslImMC3VzZV9wYWRkaW5nlImMCWxvc3NfdHlwZZSMAmwylIwKZ2V0X2NvbW1pdJRoAmgGaEmGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmhMhpRSlIwFbWtkaXKUaAJoBmhPhpRSlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwHbl9zYXZlc5RLMowRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhVhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAtyZWFkX2NvbmZpZ5RoAmgGaFmGlFKUdWJoMoaUUpQu"
+++     },
+++     "exp_name": "diffusion/H384_T256",
+++     "generate_exp_name": {
+++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++         "_type": "python_object (type = method)",
+++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCmFkZF9leHRyYXOUaAJoBmgIhpRSlIwLbl9yZWZlcmVuY2WUSzKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBmJ1Y2tldJROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwJZW1hX2RlY2F5lEc/79cKPXCj14wPbWF4X3BhdGhfbGVuZ3RolE1AnIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDGxvc3Nfd2VpZ2h0c5ROjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlzYXZlX2RpZmaUaAJoBmglhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNbG9zc19kaXNjb3VudJRLAYwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwLc2FtcGxlX2ZyZXGUTegDjAZkZXZpY2WUjARjdWRhlIwNZXZhbF9mc3RyaW5nc5RoAmgGaDKGlFKUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlhdHRlbnRpb26UiYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMDWNsaXBfZGVub2lzZWSUiIwJbl9zYW1wbGVzlEsKjAdob3Jpem9ulE2AAYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApiYXRjaF9zaXpllEsgjA1zYXZlX3BhcmFsbGVslImMC3VzZV9wYWRkaW5nlImMCWxvc3NfdHlwZZSMAmwylIwKZ2V0X2NvbW1pdJRoAmgGaEmGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmhMhpRSlIwFbWtkaXKUaAJoBmhPhpRSlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwHbl9zYXZlc5RLMowRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhVhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAtyZWFkX2NvbmZpZ5RoAmgGaFmGlFKUdWJoVYaUUpQu"
+++     },
+++     "get_commit": {
+++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++         "_type": "python_object (type = method)",
+++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCmFkZF9leHRyYXOUaAJoBmgIhpRSlIwLbl9yZWZlcmVuY2WUSzKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBmJ1Y2tldJROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwJZW1hX2RlY2F5lEc/79cKPXCj14wPbWF4X3BhdGhfbGVuZ3RolE1AnIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDGxvc3Nfd2VpZ2h0c5ROjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlzYXZlX2RpZmaUaAJoBmglhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNbG9zc19kaXNjb3VudJRLAYwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwLc2FtcGxlX2ZyZXGUTegDjAZkZXZpY2WUjARjdWRhlIwNZXZhbF9mc3RyaW5nc5RoAmgGaDKGlFKUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlhdHRlbnRpb26UiYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMDWNsaXBfZGVub2lzZWSUiIwJbl9zYW1wbGVzlEsKjAdob3Jpem9ulE2AAYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApiYXRjaF9zaXpllEsgjA1zYXZlX3BhcmFsbGVslImMC3VzZV9wYWRkaW5nlImMCWxvc3NfdHlwZZSMAmwylIwKZ2V0X2NvbW1pdJRoAmgGaEmGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmhMhpRSlIwFbWtkaXKUaAJoBmhPhpRSlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwHbl9zYXZlc5RLMowRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhVhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAtyZWFkX2NvbmZpZ5RoAmgGaFmGlFKUdWJoSYaUUpQu"
+++     },
+++     "gradient_accumulate_every": 2,
+++     "horizon": 384,
+++@@ -51,7 +51,7 @@
+++     "mkdir": {
+++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++         "_type": "python_object (type = method)",
+++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCmFkZF9leHRyYXOUaAJoBmgIhpRSlIwLbl9yZWZlcmVuY2WUSzKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBmJ1Y2tldJROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwJZW1hX2RlY2F5lEc/79cKPXCj14wPbWF4X3BhdGhfbGVuZ3RolE1AnIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDGxvc3Nfd2VpZ2h0c5ROjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlzYXZlX2RpZmaUaAJoBmglhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNbG9zc19kaXNjb3VudJRLAYwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwLc2FtcGxlX2ZyZXGUTegDjAZkZXZpY2WUjARjdWRhlIwNZXZhbF9mc3RyaW5nc5RoAmgGaDKGlFKUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlhdHRlbnRpb26UiYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMDWNsaXBfZGVub2lzZWSUiIwJbl9zYW1wbGVzlEsKjAdob3Jpem9ulE2AAYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApiYXRjaF9zaXpllEsgjA1zYXZlX3BhcmFsbGVslImMC3VzZV9wYWRkaW5nlImMCWxvc3NfdHlwZZSMAmwylIwKZ2V0X2NvbW1pdJRoAmgGaEmGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmhMhpRSlIwFbWtkaXKUaAJoBmhPhpRSlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwHbl9zYXZlc5RLMowRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhVhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAtyZWFkX2NvbmZpZ5RoAmgGaFmGlFKUdWJoT4aUUpQu"
+++     },
+++     "model": "models.TemporalUnet",
+++     "n_diffusion_steps": 256,
+++@@ -69,21 +69,21 @@
+++     "read_config": {
+++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++         "_type": "python_object (type = method)",
+++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCmFkZF9leHRyYXOUaAJoBmgIhpRSlIwLbl9yZWZlcmVuY2WUSzKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBmJ1Y2tldJROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwJZW1hX2RlY2F5lEc/79cKPXCj14wPbWF4X3BhdGhfbGVuZ3RolE1AnIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDGxvc3Nfd2VpZ2h0c5ROjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlzYXZlX2RpZmaUaAJoBmglhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNbG9zc19kaXNjb3VudJRLAYwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwLc2FtcGxlX2ZyZXGUTegDjAZkZXZpY2WUjARjdWRhlIwNZXZhbF9mc3RyaW5nc5RoAmgGaDKGlFKUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlhdHRlbnRpb26UiYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMDWNsaXBfZGVub2lzZWSUiIwJbl9zYW1wbGVzlEsKjAdob3Jpem9ulE2AAYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApiYXRjaF9zaXpllEsgjA1zYXZlX3BhcmFsbGVslImMC3VzZV9wYWRkaW5nlImMCWxvc3NfdHlwZZSMAmwylIwKZ2V0X2NvbW1pdJRoAmgGaEmGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmhMhpRSlIwFbWtkaXKUaAJoBmhPhpRSlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwHbl9zYXZlc5RLMowRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhVhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAtyZWFkX2NvbmZpZ5RoAmgGaFmGlFKUdWJoWYaUUpQu"
+++     },
+++     "renderer": "utils.Maze2dRenderer",
+++     "reproducibility": {
+++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
+++         "git_has_uncommitted_changes": true,
+++         "git_root": "/home/wslabtop/project/diffuser",
+++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
+++-        "time": "Fri Nov  8 09:50:02 2024"
++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
++++        "time": "Fri Nov  8 11:54:34 2024"
+++     },
+++     "sample_freq": 1000,
+++     "save_diff": {
+++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++         "_type": "python_object (type = method)",
+++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCmFkZF9leHRyYXOUaAJoBmgIhpRSlIwLbl9yZWZlcmVuY2WUSzKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBmJ1Y2tldJROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwJZW1hX2RlY2F5lEc/79cKPXCj14wPbWF4X3BhdGhfbGVuZ3RolE1AnIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDGxvc3Nfd2VpZ2h0c5ROjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlzYXZlX2RpZmaUaAJoBmglhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNbG9zc19kaXNjb3VudJRLAYwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwLc2FtcGxlX2ZyZXGUTegDjAZkZXZpY2WUjARjdWRhlIwNZXZhbF9mc3RyaW5nc5RoAmgGaDKGlFKUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlhdHRlbnRpb26UiYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMDWNsaXBfZGVub2lzZWSUiIwJbl9zYW1wbGVzlEsKjAdob3Jpem9ulE2AAYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApiYXRjaF9zaXpllEsgjA1zYXZlX3BhcmFsbGVslImMC3VzZV9wYWRkaW5nlImMCWxvc3NfdHlwZZSMAmwylIwKZ2V0X2NvbW1pdJRoAmgGaEmGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmhMhpRSlIwFbWtkaXKUaAJoBmhPhpRSlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwHbl9zYXZlc5RLMowRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhVhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAtyZWFkX2NvbmZpZ5RoAmgGaFmGlFKUdWJoJYaUUpQu"
+++     },
+++     "save_freq": 1000,
+++     "save_parallel": false,
+++@@ -91,12 +91,12 @@
+++     "set_loadbase": {
+++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++         "_type": "python_object (type = method)",
+++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCmFkZF9leHRyYXOUaAJoBmgIhpRSlIwLbl9yZWZlcmVuY2WUSzKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBmJ1Y2tldJROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwJZW1hX2RlY2F5lEc/79cKPXCj14wPbWF4X3BhdGhfbGVuZ3RolE1AnIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDGxvc3Nfd2VpZ2h0c5ROjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlzYXZlX2RpZmaUaAJoBmglhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNbG9zc19kaXNjb3VudJRLAYwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwLc2FtcGxlX2ZyZXGUTegDjAZkZXZpY2WUjARjdWRhlIwNZXZhbF9mc3RyaW5nc5RoAmgGaDKGlFKUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlhdHRlbnRpb26UiYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMDWNsaXBfZGVub2lzZWSUiIwJbl9zYW1wbGVzlEsKjAdob3Jpem9ulE2AAYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApiYXRjaF9zaXpllEsgjA1zYXZlX3BhcmFsbGVslImMC3VzZV9wYWRkaW5nlImMCWxvc3NfdHlwZZSMAmwylIwKZ2V0X2NvbW1pdJRoAmgGaEmGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmhMhpRSlIwFbWtkaXKUaAJoBmhPhpRSlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwHbl9zYXZlc5RLMowRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhVhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAtyZWFkX2NvbmZpZ5RoAmgGaFmGlFKUdWJoTIaUUpQu"
+++     },
+++     "set_seed": {
+++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++         "_type": "python_object (type = method)",
+++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCmFkZF9leHRyYXOUaAJoBmgIhpRSlIwLbl9yZWZlcmVuY2WUSzKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBmJ1Y2tldJROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAhzZXRfc2VlZJRoAmgGaBKGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwJZW1hX2RlY2F5lEc/79cKPXCj14wPbWF4X3BhdGhfbGVuZ3RolE1AnIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMDGxvc3Nfd2VpZ2h0c5ROjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlzYXZlX2RpZmaUaAJoBmglhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwNbG9zc19kaXNjb3VudJRLAYwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwLc2FtcGxlX2ZyZXGUTegDjAZkZXZpY2WUjARjdWRhlIwNZXZhbF9mc3RyaW5nc5RoAmgGaDKGlFKUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlhdHRlbnRpb26UiYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMDWNsaXBfZGVub2lzZWSUiIwJbl9zYW1wbGVzlEsKjAdob3Jpem9ulE2AAYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApiYXRjaF9zaXpllEsgjA1zYXZlX3BhcmFsbGVslImMC3VzZV9wYWRkaW5nlImMCWxvc3NfdHlwZZSMAmwylIwKZ2V0X2NvbW1pdJRoAmgGaEmGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmhMhpRSlIwFbWtkaXKUaAJoBmhPhpRSlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwHbl9zYXZlc5RLMowRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhVhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAtyZWFkX2NvbmZpZ5RoAmgGaFmGlFKUdWJoEoaUUpQu"
+++     },
+++     "termination_penalty": null,
+++     "use_padding": false
+++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++index ed9549e..1403322 100644
+++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++@@ -1,231 +1,5686 @@
+++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
+++-index 1ad2106..5991f01 100644
+++---- a/diffuser/datasets/buffer.py
+++-+++ b/diffuser/datasets/buffer.py
+++-@@ -9,7 +9,7 @@ class ReplayBuffer:
+++- 
+++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
+++-         self._dict = {
+++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
+++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
+++-         }
+++-         self._count = 0
+++-         self.max_n_episodes = max_n_episodes
+++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
+++-index 655a6f0..d5dd111 100644
+++---- a/diffuser/environments/registration.py
+++-+++ b/diffuser/environments/registration.py
+++-@@ -1,3 +1,5 @@
+++-+import sys
+++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
+++- import gym
+++- 
+++- ENVIRONMENT_SPECS = (
+++-@@ -31,4 +33,4 @@ def register_environments():
+++-         return gym_ids
+++-     except:
+++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
+++--        return tuple()
+++-\ No newline at end of file
+++-+        return tuple()
++++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
++++index db2afeb..cd7f3e1 100644
++++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
++++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
++++index 5923eb6..2f3a4e3 100644
++++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
+++ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
+++-index 8659ff1..d01c272 100644
++++index d01c272..45ee659 100644
+++ --- a/diffuser/utils/rendering.py
+++ +++ b/diffuser/utils/rendering.py
+++-@@ -36,15 +36,44 @@ def env_map(env_name):
+++- #------------------------------ helper functions -----------------------------#
+++- #-----------------------------------------------------------------------------#
+++- 
+++-+def atmost_2d(x):
+++-+    while x.ndim > 2:
+++-+        x = x.squeeze(0)
+++-+    return x
+++-+
+++-+def zipsafe(*args):
+++-+    length = len(args[0])
+++-+    assert all([len(a) == length for a in args])
+++-+    return zip(*args)
+++-+
+++-+def zipkw(*args, **kwargs):
+++-+    nargs = len(args)
+++-+    keys = kwargs.keys()
+++-+    vals = [kwargs[k] for k in keys]
+++-+    zipped = zipsafe(*args, *vals)
+++-+    for items in zipped:
+++-+        zipped_args = items[:nargs]
+++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
+++-+        yield zipped_args, zipped_kwargs
+++-+
+++- def get_image_mask(img):
+++-     background = (img == 255).all(axis=-1, keepdims=True)
+++-     mask = ~background.repeat(3, axis=-1)
+++-     return mask
+++- 
+++--def atmost_2d(x):
+++--    while x.ndim > 2:
+++--        x = x.squeeze(0)
+++--    return x
+++-+def plot2img(fig, remove_margins=True):
+++-+    # https://stackoverflow.com/a/35362787/2912349
+++-+    # https://stackoverflow.com/a/54334430/2912349
+++-+
+++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
+++-+
+++-+    if remove_margins:
+++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
+++-+
+++-+    canvas = FigureCanvasAgg(fig)
+++-+    canvas.draw()
+++-+    img_as_string, (width, height) = canvas.print_to_buffer()
+++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
+++- 
+++- #-----------------------------------------------------------------------------#
+++- #---------------------------------- renderers --------------------------------#
+++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
+++-         else:
+++-             self.env = env
+++-         ## - 1 because the envs in renderer are fully-observed
+++-+        ## @TODO : clean up
+++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
+++-         self.action_dim = np.prod(self.env.action_space.shape)
+++-         try:
+++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
+++-     def __call__(self, *args, **kwargs):
+++-         return self.renders(*args, **kwargs)
++++@@ -306,6 +306,10 @@ class MazeRenderer:
++++             savepath : str
++++             observations : [ n_paths x horizon x 2 ]
++++         '''
+++++        print("ncol_st:", ncol)
+++++        ncol = max(1, min(len(paths), 10))
+++++        print("Number of paths:", len(paths))
+++++        print("ncol:", ncol)
++++         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++  
+++-+#-----------------------------------------------------------------------------#
+++-+#----------------------------------- maze2d ----------------------------------#
+++-+#-----------------------------------------------------------------------------#
+++-+
+++-+MAZE_BOUNDS = {
+++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
+++-+    'maze2d-medium-v1': (0, 8, 0, 8),
+++-+    'maze2d-large-v1': (0, 9, 0, 12)
+++-+}
+++-+
+++-+class MazeRenderer:
+++-+
+++-+    def __init__(self, env):
+++-+        if type(env) is str: env = load_environment(env)
+++-+        self._config = env._config
+++-+        self._background = self._config != ' '
+++-+        self._remove_margins = False
+++-+        self._extent = (0, 1, 1, 0)
+++-+
+++-+    def renders(self, observations, conditions=None, title=None):
+++-+        plt.clf()
+++-+        fig = plt.gcf()
+++-+        fig.set_size_inches(5, 5)
+++-+        plt.imshow(self._background * .5,
+++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
+++-+
+++-+        path_length = len(observations)
+++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
+++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
+++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
+++-+        plt.axis('off')
+++-+        plt.title(title)
+++-+        img = plot2img(fig, remove_margins=self._remove_margins)
+++-+        return img
+++-+
+++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
+++-+        '''
+++-+            savepath : str
+++-+            observations : [ n_paths x horizon x 2 ]
+++-+        '''
+++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++-+
+++-+        images = []
+++-+        for path, kw in zipkw(paths, **kwargs):
+++-+            img = self.renders(*path, **kw)
+++-+            images.append(img)
+++-+        images = np.stack(images, axis=0)
+++-+
+++-+        nrow = len(images) // ncol
+++-+        images = einops.rearrange(images,
+++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
+++-+        imageio.imsave(savepath, images)
+++-+        print(f'Saved {len(paths)} samples to: {savepath}')
+++-+
+++-+class Maze2dRenderer(MazeRenderer):
+++-+
+++-+    def __init__(self, env, observation_dim=None):
+++-+        self.env_name = env
+++-+        self.env = load_environment(env)
+++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
+++-+        self.action_dim = np.prod(self.env.action_space.shape)
+++-+        self.goal = None
+++-+        self._background = self.env.maze_arr == 10
+++-+        self._remove_margins = False
+++-+        self._extent = (0, 1, 1, 0)
+++-+
+++-+    def renders(self, observations, conditions=None, **kwargs):
+++-+        bounds = MAZE_BOUNDS[self.env_name]
+++-+
+++-+        observations = observations + .5
+++-+        if len(bounds) == 2:
+++-+            _, scale = bounds
+++-+            observations /= scale
+++-+        elif len(bounds) == 4:
+++-+            _, iscale, _, jscale = bounds
+++-+            observations[:, 0] /= iscale
+++-+            observations[:, 1] /= jscale
+++-+        else:
+++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
+++-+
+++-+        if conditions is not None:
+++-+            conditions /= scale
+++-+        return super().renders(observations, conditions, **kwargs)
+++-+
+++- #-----------------------------------------------------------------------------#
+++- #---------------------------------- rollouts ---------------------------------#
+++- #-----------------------------------------------------------------------------#
+++-diff --git a/environment.yml b/environment.yml
+++-index c14a0cf..e56b6a9 100644
+++---- a/environment.yml
+++-+++ b/environment.yml
+++-@@ -1,4 +1,4 @@
+++--name: diffuser
+++-+name: diffuser_2
+++- channels:
+++- - defaults
+++- - conda-forge
+++-@@ -12,9 +12,7 @@ dependencies:
+++-     - gym==0.18.0
+++-     - mujoco-py==2.0.2.13
+++-     - matplotlib==3.3.4
+++--    - torch==1.9.1+cu111
+++-     - typed-argument-parser
+++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
+++-     - scikit-image==0.17.2
+++-     - scikit-video==1.1.11
+++-     - gitpython
+++-@@ -31,5 +29,4 @@ dependencies:
+++-     - crcmod # for fast gsutil rsync on large files
+++-     - google-api-python-client
+++-     - cryptography
+++--    - git+https://github.com/JannerM/doodad.git@janner
+++-     - gdown>=4.6.0
+++-diff --git a/scripts/train.py b/scripts/train.py
+++-index 502837e..f9646f7 100644
+++---- a/scripts/train.py
+++-+++ b/scripts/train.py
+++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
+++- 
+++- class Parser(utils.Parser):
+++-     dataset: str = 'hopper-medium-expert-v2'
+++--    config: str = 'config.locomotion'
+++-+    #config: str = 'config.locomotion'
+++-+    config: str = 'config.maze2d'
+++- 
+++- args = Parser().parse_args('diffusion')
+++- 
+++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
+++-     results_folder=args.savepath,
+++-     bucket=args.bucket,
+++-     n_reference=args.n_reference,
+++-+    n_samples=args.n_samples,
+++-+
+++- )
+++- 
+++- #-----------------------------------------------------------------------------#
+++\ No newline at end of file
++++         images = []
++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
++++index 83efa3b..a40f17a 100644
++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++index 9ad1dbc..9550266 100644
++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++@@ -3,13 +3,13 @@
++++     "add_extras": {
++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++         "_type": "python_object (type = method)",
++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
+++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2hvcml6b26UTYABjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIc2V0X3NlZWSUaAJoBmgLhpRSlIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMDWFjdGlvbl93ZWlnaHSUSwGMCWVtYV9kZWNheZRHP+/XCj1wo9eMCW5fc2FtcGxlc5RLCowLc2FtcGxlX2ZyZXGUTegDjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmgghpRSlIwJc2F2ZV9kaWZmlGgCaAZoI4aUUpSMDGxvc3Nfd2VpZ2h0c5ROjA1jbGlwX2Rlbm9pc2VklIiMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAVta2RpcpRoAmgGaCuGlFKUjA1sb3NzX2Rpc2NvdW50lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAxzZXRfbG9hZGJhc2WUaAJoBmgyhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAt1c2VfcGFkZGluZ5SJjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLbl9yZWZlcmVuY2WUSzKMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAlkaW1fbXVsdHOUSwFLBEsIh5SMCXNhdmVfZnJlcZRN6AOMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEaGlFKUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAZkZXZpY2WUjARjdWRhlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwKYmF0Y2hfc2l6ZZRLIIwKZ2V0X2NvbW1pdJRoAmgGaE+GlFKUjAduX3NhdmVzlEsyjAtyZWFkX2NvbmZpZ5RoAmgGaFOGlFKUjAlhdHRlbnRpb26UiYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhXhpRSlIwJbG9zc190eXBllIwCbDKUdWJoIIaUUpQu"
++++     },
++++     "attention": false,
++++     "batch_size": 32,
++++     "bucket": null,
++++     "clip_denoised": true,
++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
+++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
++++     "config": "config.maze2d",
++++     "dataset": "maze2d-large-v1",
++++     "device": "cuda",
++++@@ -26,18 +26,18 @@
++++     "eval_fstrings": {
++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++         "_type": "python_object (type = method)",
++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
+++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2hvcml6b26UTYABjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIc2V0X3NlZWSUaAJoBmgLhpRSlIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMDWFjdGlvbl93ZWlnaHSUSwGMCWVtYV9kZWNheZRHP+/XCj1wo9eMCW5fc2FtcGxlc5RLCowLc2FtcGxlX2ZyZXGUTegDjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmgghpRSlIwJc2F2ZV9kaWZmlGgCaAZoI4aUUpSMDGxvc3Nfd2VpZ2h0c5ROjA1jbGlwX2Rlbm9pc2VklIiMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAVta2RpcpRoAmgGaCuGlFKUjA1sb3NzX2Rpc2NvdW50lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAxzZXRfbG9hZGJhc2WUaAJoBmgyhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAt1c2VfcGFkZGluZ5SJjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLbl9yZWZlcmVuY2WUSzKMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAlkaW1fbXVsdHOUSwFLBEsIh5SMCXNhdmVfZnJlcZRN6AOMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEaGlFKUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAZkZXZpY2WUjARjdWRhlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwKYmF0Y2hfc2l6ZZRLIIwKZ2V0X2NvbW1pdJRoAmgGaE+GlFKUjAduX3NhdmVzlEsyjAtyZWFkX2NvbmZpZ5RoAmgGaFOGlFKUjAlhdHRlbnRpb26UiYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhXhpRSlIwJbG9zc190eXBllIwCbDKUdWJoRoaUUpQu"
++++     },
++++     "exp_name": "diffusion/H384_T256",
++++     "generate_exp_name": {
++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++         "_type": "python_object (type = method)",
++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
+++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2hvcml6b26UTYABjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIc2V0X3NlZWSUaAJoBmgLhpRSlIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMDWFjdGlvbl93ZWlnaHSUSwGMCWVtYV9kZWNheZRHP+/XCj1wo9eMCW5fc2FtcGxlc5RLCowLc2FtcGxlX2ZyZXGUTegDjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmgghpRSlIwJc2F2ZV9kaWZmlGgCaAZoI4aUUpSMDGxvc3Nfd2VpZ2h0c5ROjA1jbGlwX2Rlbm9pc2VklIiMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAVta2RpcpRoAmgGaCuGlFKUjA1sb3NzX2Rpc2NvdW50lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAxzZXRfbG9hZGJhc2WUaAJoBmgyhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAt1c2VfcGFkZGluZ5SJjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLbl9yZWZlcmVuY2WUSzKMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAlkaW1fbXVsdHOUSwFLBEsIh5SMCXNhdmVfZnJlcZRN6AOMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEaGlFKUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAZkZXZpY2WUjARjdWRhlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwKYmF0Y2hfc2l6ZZRLIIwKZ2V0X2NvbW1pdJRoAmgGaE+GlFKUjAduX3NhdmVzlEsyjAtyZWFkX2NvbmZpZ5RoAmgGaFOGlFKUjAlhdHRlbnRpb26UiYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhXhpRSlIwJbG9zc190eXBllIwCbDKUdWJoV4aUUpQu"
++++     },
++++     "get_commit": {
++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++         "_type": "python_object (type = method)",
++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
+++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2hvcml6b26UTYABjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIc2V0X3NlZWSUaAJoBmgLhpRSlIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMDWFjdGlvbl93ZWlnaHSUSwGMCWVtYV9kZWNheZRHP+/XCj1wo9eMCW5fc2FtcGxlc5RLCowLc2FtcGxlX2ZyZXGUTegDjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmgghpRSlIwJc2F2ZV9kaWZmlGgCaAZoI4aUUpSMDGxvc3Nfd2VpZ2h0c5ROjA1jbGlwX2Rlbm9pc2VklIiMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAVta2RpcpRoAmgGaCuGlFKUjA1sb3NzX2Rpc2NvdW50lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAxzZXRfbG9hZGJhc2WUaAJoBmgyhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAt1c2VfcGFkZGluZ5SJjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLbl9yZWZlcmVuY2WUSzKMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAlkaW1fbXVsdHOUSwFLBEsIh5SMCXNhdmVfZnJlcZRN6AOMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEaGlFKUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAZkZXZpY2WUjARjdWRhlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwKYmF0Y2hfc2l6ZZRLIIwKZ2V0X2NvbW1pdJRoAmgGaE+GlFKUjAduX3NhdmVzlEsyjAtyZWFkX2NvbmZpZ5RoAmgGaFOGlFKUjAlhdHRlbnRpb26UiYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhXhpRSlIwJbG9zc190eXBllIwCbDKUdWJoT4aUUpQu"
++++     },
++++     "gradient_accumulate_every": 2,
++++     "horizon": 384,
++++@@ -51,7 +51,7 @@
++++     "mkdir": {
++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++         "_type": "python_object (type = method)",
++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
+++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2hvcml6b26UTYABjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIc2V0X3NlZWSUaAJoBmgLhpRSlIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMDWFjdGlvbl93ZWlnaHSUSwGMCWVtYV9kZWNheZRHP+/XCj1wo9eMCW5fc2FtcGxlc5RLCowLc2FtcGxlX2ZyZXGUTegDjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmgghpRSlIwJc2F2ZV9kaWZmlGgCaAZoI4aUUpSMDGxvc3Nfd2VpZ2h0c5ROjA1jbGlwX2Rlbm9pc2VklIiMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAVta2RpcpRoAmgGaCuGlFKUjA1sb3NzX2Rpc2NvdW50lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAxzZXRfbG9hZGJhc2WUaAJoBmgyhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAt1c2VfcGFkZGluZ5SJjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLbl9yZWZlcmVuY2WUSzKMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAlkaW1fbXVsdHOUSwFLBEsIh5SMCXNhdmVfZnJlcZRN6AOMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEaGlFKUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAZkZXZpY2WUjARjdWRhlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwKYmF0Y2hfc2l6ZZRLIIwKZ2V0X2NvbW1pdJRoAmgGaE+GlFKUjAduX3NhdmVzlEsyjAtyZWFkX2NvbmZpZ5RoAmgGaFOGlFKUjAlhdHRlbnRpb26UiYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhXhpRSlIwJbG9zc190eXBllIwCbDKUdWJoK4aUUpQu"
++++     },
++++     "model": "models.TemporalUnet",
++++     "n_diffusion_steps": 256,
++++@@ -69,21 +69,21 @@
++++     "read_config": {
++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++         "_type": "python_object (type = method)",
++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
+++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2hvcml6b26UTYABjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIc2V0X3NlZWSUaAJoBmgLhpRSlIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMDWFjdGlvbl93ZWlnaHSUSwGMCWVtYV9kZWNheZRHP+/XCj1wo9eMCW5fc2FtcGxlc5RLCowLc2FtcGxlX2ZyZXGUTegDjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmgghpRSlIwJc2F2ZV9kaWZmlGgCaAZoI4aUUpSMDGxvc3Nfd2VpZ2h0c5ROjA1jbGlwX2Rlbm9pc2VklIiMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAVta2RpcpRoAmgGaCuGlFKUjA1sb3NzX2Rpc2NvdW50lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAxzZXRfbG9hZGJhc2WUaAJoBmgyhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAt1c2VfcGFkZGluZ5SJjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLbl9yZWZlcmVuY2WUSzKMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAlkaW1fbXVsdHOUSwFLBEsIh5SMCXNhdmVfZnJlcZRN6AOMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEaGlFKUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAZkZXZpY2WUjARjdWRhlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwKYmF0Y2hfc2l6ZZRLIIwKZ2V0X2NvbW1pdJRoAmgGaE+GlFKUjAduX3NhdmVzlEsyjAtyZWFkX2NvbmZpZ5RoAmgGaFOGlFKUjAlhdHRlbnRpb26UiYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhXhpRSlIwJbG9zc190eXBllIwCbDKUdWJoU4aUUpQu"
++++     },
++++     "renderer": "utils.Maze2dRenderer",
++++     "reproducibility": {
++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
++++         "git_has_uncommitted_changes": true,
++++         "git_root": "/home/wslabtop/project/diffuser",
++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
++++-        "time": "Fri Nov  8 09:50:02 2024"
+++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
+++++        "time": "Fri Nov  8 11:53:14 2024"
++++     },
++++     "sample_freq": 1000,
++++     "save_diff": {
++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++         "_type": "python_object (type = method)",
++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
+++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2hvcml6b26UTYABjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIc2V0X3NlZWSUaAJoBmgLhpRSlIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMDWFjdGlvbl93ZWlnaHSUSwGMCWVtYV9kZWNheZRHP+/XCj1wo9eMCW5fc2FtcGxlc5RLCowLc2FtcGxlX2ZyZXGUTegDjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmgghpRSlIwJc2F2ZV9kaWZmlGgCaAZoI4aUUpSMDGxvc3Nfd2VpZ2h0c5ROjA1jbGlwX2Rlbm9pc2VklIiMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAVta2RpcpRoAmgGaCuGlFKUjA1sb3NzX2Rpc2NvdW50lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAxzZXRfbG9hZGJhc2WUaAJoBmgyhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAt1c2VfcGFkZGluZ5SJjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLbl9yZWZlcmVuY2WUSzKMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAlkaW1fbXVsdHOUSwFLBEsIh5SMCXNhdmVfZnJlcZRN6AOMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEaGlFKUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAZkZXZpY2WUjARjdWRhlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwKYmF0Y2hfc2l6ZZRLIIwKZ2V0X2NvbW1pdJRoAmgGaE+GlFKUjAduX3NhdmVzlEsyjAtyZWFkX2NvbmZpZ5RoAmgGaFOGlFKUjAlhdHRlbnRpb26UiYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhXhpRSlIwJbG9zc190eXBllIwCbDKUdWJoI4aUUpQu"
++++     },
++++     "save_freq": 1000,
++++     "save_parallel": false,
++++@@ -91,12 +91,12 @@
++++     "set_loadbase": {
++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++         "_type": "python_object (type = method)",
++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
+++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2hvcml6b26UTYABjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIc2V0X3NlZWSUaAJoBmgLhpRSlIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMDWFjdGlvbl93ZWlnaHSUSwGMCWVtYV9kZWNheZRHP+/XCj1wo9eMCW5fc2FtcGxlc5RLCowLc2FtcGxlX2ZyZXGUTegDjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmgghpRSlIwJc2F2ZV9kaWZmlGgCaAZoI4aUUpSMDGxvc3Nfd2VpZ2h0c5ROjA1jbGlwX2Rlbm9pc2VklIiMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAVta2RpcpRoAmgGaCuGlFKUjA1sb3NzX2Rpc2NvdW50lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAxzZXRfbG9hZGJhc2WUaAJoBmgyhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAt1c2VfcGFkZGluZ5SJjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLbl9yZWZlcmVuY2WUSzKMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAlkaW1fbXVsdHOUSwFLBEsIh5SMCXNhdmVfZnJlcZRN6AOMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEaGlFKUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAZkZXZpY2WUjARjdWRhlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwKYmF0Y2hfc2l6ZZRLIIwKZ2V0X2NvbW1pdJRoAmgGaE+GlFKUjAduX3NhdmVzlEsyjAtyZWFkX2NvbmZpZ5RoAmgGaFOGlFKUjAlhdHRlbnRpb26UiYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhXhpRSlIwJbG9zc190eXBllIwCbDKUdWJoMoaUUpQu"
++++     },
++++     "set_seed": {
++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++         "_type": "python_object (type = method)",
++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
+++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2hvcml6b26UTYABjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIc2V0X3NlZWSUaAJoBmgLhpRSlIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMDWFjdGlvbl93ZWlnaHSUSwGMCWVtYV9kZWNheZRHP+/XCj1wo9eMCW5fc2FtcGxlc5RLCowLc2FtcGxlX2ZyZXGUTegDjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCmFkZF9leHRyYXOUaAJoBmgghpRSlIwJc2F2ZV9kaWZmlGgCaAZoI4aUUpSMDGxvc3Nfd2VpZ2h0c5ROjA1jbGlwX2Rlbm9pc2VklIiMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAVta2RpcpRoAmgGaCuGlFKUjA1sb3NzX2Rpc2NvdW50lEsBjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmJ1Y2tldJROjAxzZXRfbG9hZGJhc2WUaAJoBmgyhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAt1c2VfcGFkZGluZ5SJjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wLbl9yZWZlcmVuY2WUSzKMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAlkaW1fbXVsdHOUSwFLBEsIh5SMCXNhdmVfZnJlcZRN6AOMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEaGlFKUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAZkZXZpY2WUjARjdWRhlIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwKYmF0Y2hfc2l6ZZRLIIwKZ2V0X2NvbW1pdJRoAmgGaE+GlFKUjAduX3NhdmVzlEsyjAtyZWFkX2NvbmZpZ5RoAmgGaFOGlFKUjAlhdHRlbnRpb26UiYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhXhpRSlIwJbG9zc190eXBllIwCbDKUdWJoC4aUUpQu"
++++     },
++++     "termination_penalty": null,
++++     "use_padding": false
++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++index ed9549e..d6ff0f0 100644
++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++@@ -1,231 +1,5147 @@
++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
++++-index 1ad2106..5991f01 100644
++++---- a/diffuser/datasets/buffer.py
++++-+++ b/diffuser/datasets/buffer.py
++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
++++- 
++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
++++-         self._dict = {
++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
++++-         }
++++-         self._count = 0
++++-         self.max_n_episodes = max_n_episodes
++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
++++-index 655a6f0..d5dd111 100644
++++---- a/diffuser/environments/registration.py
++++-+++ b/diffuser/environments/registration.py
++++-@@ -1,3 +1,5 @@
++++-+import sys
++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
++++- import gym
++++- 
++++- ENVIRONMENT_SPECS = (
++++-@@ -31,4 +33,4 @@ def register_environments():
++++-         return gym_ids
++++-     except:
++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
++++--        return tuple()
++++-\ No newline at end of file
++++-+        return tuple()
+++++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
+++++index db2afeb..ec28ee5 100644
+++++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
+++++diff --git a/config/maze2d.py b/config/maze2d.py
+++++index e7698af..e5ef81a 100644
+++++--- a/config/maze2d.py
++++++++ b/config/maze2d.py
+++++@@ -70,7 +70,6 @@ base = {
+++++         'n_saves': 50,
+++++         'save_parallel': False,
+++++         'n_reference': 50,
+++++-        'n_samples': 10,
+++++         'bucket': None,
+++++         'device': 'cuda',
+++++     },
+++++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
+++++index 5923eb6..2f3a4e3 100644
+++++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
++++ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
++++-index 8659ff1..d01c272 100644
+++++index d01c272..45ee659 100644
++++ --- a/diffuser/utils/rendering.py
++++ +++ b/diffuser/utils/rendering.py
++++-@@ -36,15 +36,44 @@ def env_map(env_name):
++++- #------------------------------ helper functions -----------------------------#
++++- #-----------------------------------------------------------------------------#
++++- 
++++-+def atmost_2d(x):
++++-+    while x.ndim > 2:
++++-+        x = x.squeeze(0)
++++-+    return x
++++-+
++++-+def zipsafe(*args):
++++-+    length = len(args[0])
++++-+    assert all([len(a) == length for a in args])
++++-+    return zip(*args)
++++-+
++++-+def zipkw(*args, **kwargs):
++++-+    nargs = len(args)
++++-+    keys = kwargs.keys()
++++-+    vals = [kwargs[k] for k in keys]
++++-+    zipped = zipsafe(*args, *vals)
++++-+    for items in zipped:
++++-+        zipped_args = items[:nargs]
++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
++++-+        yield zipped_args, zipped_kwargs
++++-+
++++- def get_image_mask(img):
++++-     background = (img == 255).all(axis=-1, keepdims=True)
++++-     mask = ~background.repeat(3, axis=-1)
++++-     return mask
++++- 
++++--def atmost_2d(x):
++++--    while x.ndim > 2:
++++--        x = x.squeeze(0)
++++--    return x
++++-+def plot2img(fig, remove_margins=True):
++++-+    # https://stackoverflow.com/a/35362787/2912349
++++-+    # https://stackoverflow.com/a/54334430/2912349
++++-+
++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
++++-+
++++-+    if remove_margins:
++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
++++-+
++++-+    canvas = FigureCanvasAgg(fig)
++++-+    canvas.draw()
++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
++++- 
++++- #-----------------------------------------------------------------------------#
++++- #---------------------------------- renderers --------------------------------#
++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
++++-         else:
++++-             self.env = env
++++-         ## - 1 because the envs in renderer are fully-observed
++++-+        ## @TODO : clean up
++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
++++-         self.action_dim = np.prod(self.env.action_space.shape)
++++-         try:
++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
++++-     def __call__(self, *args, **kwargs):
++++-         return self.renders(*args, **kwargs)
+++++@@ -306,6 +306,10 @@ class MazeRenderer:
+++++             savepath : str
+++++             observations : [ n_paths x horizon x 2 ]
+++++         '''
++++++        print("ncol_st:", ncol)
++++++        ncol = max(1, min(len(paths), 10))
++++++        print("Number of paths:", len(paths))
++++++        print("ncol:", ncol)
+++++         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++++  
++++-+#-----------------------------------------------------------------------------#
++++-+#----------------------------------- maze2d ----------------------------------#
++++-+#-----------------------------------------------------------------------------#
++++-+
++++-+MAZE_BOUNDS = {
++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
++++-+    'maze2d-large-v1': (0, 9, 0, 12)
++++-+}
++++-+
++++-+class MazeRenderer:
++++-+
++++-+    def __init__(self, env):
++++-+        if type(env) is str: env = load_environment(env)
++++-+        self._config = env._config
++++-+        self._background = self._config != ' '
++++-+        self._remove_margins = False
++++-+        self._extent = (0, 1, 1, 0)
++++-+
++++-+    def renders(self, observations, conditions=None, title=None):
++++-+        plt.clf()
++++-+        fig = plt.gcf()
++++-+        fig.set_size_inches(5, 5)
++++-+        plt.imshow(self._background * .5,
++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
++++-+
++++-+        path_length = len(observations)
++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
++++-+        plt.axis('off')
++++-+        plt.title(title)
++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
++++-+        return img
++++-+
++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
++++-+        '''
++++-+            savepath : str
++++-+            observations : [ n_paths x horizon x 2 ]
++++-+        '''
++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++++-+
++++-+        images = []
++++-+        for path, kw in zipkw(paths, **kwargs):
++++-+            img = self.renders(*path, **kw)
++++-+            images.append(img)
++++-+        images = np.stack(images, axis=0)
++++-+
++++-+        nrow = len(images) // ncol
++++-+        images = einops.rearrange(images,
++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
++++-+        imageio.imsave(savepath, images)
++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
++++-+
++++-+class Maze2dRenderer(MazeRenderer):
++++-+
++++-+    def __init__(self, env, observation_dim=None):
++++-+        self.env_name = env
++++-+        self.env = load_environment(env)
++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
++++-+        self.action_dim = np.prod(self.env.action_space.shape)
++++-+        self.goal = None
++++-+        self._background = self.env.maze_arr == 10
++++-+        self._remove_margins = False
++++-+        self._extent = (0, 1, 1, 0)
++++-+
++++-+    def renders(self, observations, conditions=None, **kwargs):
++++-+        bounds = MAZE_BOUNDS[self.env_name]
++++-+
++++-+        observations = observations + .5
++++-+        if len(bounds) == 2:
++++-+            _, scale = bounds
++++-+            observations /= scale
++++-+        elif len(bounds) == 4:
++++-+            _, iscale, _, jscale = bounds
++++-+            observations[:, 0] /= iscale
++++-+            observations[:, 1] /= jscale
++++-+        else:
++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
++++-+
++++-+        if conditions is not None:
++++-+            conditions /= scale
++++-+        return super().renders(observations, conditions, **kwargs)
++++-+
++++- #-----------------------------------------------------------------------------#
++++- #---------------------------------- rollouts ---------------------------------#
++++- #-----------------------------------------------------------------------------#
++++-diff --git a/environment.yml b/environment.yml
++++-index c14a0cf..e56b6a9 100644
++++---- a/environment.yml
++++-+++ b/environment.yml
++++-@@ -1,4 +1,4 @@
++++--name: diffuser
++++-+name: diffuser_2
++++- channels:
++++- - defaults
++++- - conda-forge
++++-@@ -12,9 +12,7 @@ dependencies:
++++-     - gym==0.18.0
++++-     - mujoco-py==2.0.2.13
++++-     - matplotlib==3.3.4
++++--    - torch==1.9.1+cu111
++++-     - typed-argument-parser
++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
++++-     - scikit-image==0.17.2
++++-     - scikit-video==1.1.11
++++-     - gitpython
++++-@@ -31,5 +29,4 @@ dependencies:
++++-     - crcmod # for fast gsutil rsync on large files
++++-     - google-api-python-client
++++-     - cryptography
++++--    - git+https://github.com/JannerM/doodad.git@janner
++++-     - gdown>=4.6.0
+++++         images = []
+++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
+++++index 83efa3b..1c747f9 100644
+++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
+++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++index 9ad1dbc..6bba34f 100644
+++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++@@ -3,13 +3,13 @@
+++++     "add_extras": {
+++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++         "_type": "python_object (type = method)",
+++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZGlmZpRoAmgGaAqGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMC25fcmVmZXJlbmNllEsyjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MB2hvcml6b26UTYABjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjApnZXRfY29tbWl0lGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlsb3NzX3R5cGWUjAJsMpSMBmJ1Y2tldJROjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJc2F2ZV9mcmVxlE3oA4wNc2F2ZV9wYXJhbGxlbJSJjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwKYWRkX2V4dHJhc5RoAmgGaCOGlFKUjAZkZXZpY2WUjARjdWRhlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwPcHJlZGljdF9lcHNpbG9ulImMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaDOGlFKUjAtzYW1wbGVfZnJlcZRN6AOMDGxvc3Nfd2VpZ2h0c5ROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWV2YWxfZnN0cmluZ3OUaAJoBmg6hpRSlIwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwNY2xpcF9kZW5vaXNlZJSIjAtyZWFkX2NvbmZpZ5RoAmgGaEOGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlhdHRlbnRpb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMCHNldF9zZWVklGgCaAZoTYaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDWFjdGlvbl93ZWlnaHSUSwGMBW1rZGlylGgCaAZoVYaUUpSMDWxvc3NfZGlzY291bnSUSwGMCWRpbV9tdWx0c5RLAUsESwiHlHViaCOGlFKULg=="
+++++     },
+++++     "attention": false,
+++++     "batch_size": 32,
+++++     "bucket": null,
+++++     "clip_denoised": true,
+++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
+++++     "config": "config.maze2d",
+++++     "dataset": "maze2d-large-v1",
+++++     "device": "cuda",
+++++@@ -26,18 +26,18 @@
+++++     "eval_fstrings": {
+++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++         "_type": "python_object (type = method)",
+++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZGlmZpRoAmgGaAqGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMC25fcmVmZXJlbmNllEsyjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MB2hvcml6b26UTYABjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjApnZXRfY29tbWl0lGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlsb3NzX3R5cGWUjAJsMpSMBmJ1Y2tldJROjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJc2F2ZV9mcmVxlE3oA4wNc2F2ZV9wYXJhbGxlbJSJjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwKYWRkX2V4dHJhc5RoAmgGaCOGlFKUjAZkZXZpY2WUjARjdWRhlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwPcHJlZGljdF9lcHNpbG9ulImMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaDOGlFKUjAtzYW1wbGVfZnJlcZRN6AOMDGxvc3Nfd2VpZ2h0c5ROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWV2YWxfZnN0cmluZ3OUaAJoBmg6hpRSlIwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwNY2xpcF9kZW5vaXNlZJSIjAtyZWFkX2NvbmZpZ5RoAmgGaEOGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlhdHRlbnRpb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMCHNldF9zZWVklGgCaAZoTYaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDWFjdGlvbl93ZWlnaHSUSwGMBW1rZGlylGgCaAZoVYaUUpSMDWxvc3NfZGlzY291bnSUSwGMCWRpbV9tdWx0c5RLAUsESwiHlHViaDqGlFKULg=="
+++++     },
+++++     "exp_name": "diffusion/H384_T256",
+++++     "generate_exp_name": {
+++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++         "_type": "python_object (type = method)",
+++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZGlmZpRoAmgGaAqGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMC25fcmVmZXJlbmNllEsyjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MB2hvcml6b26UTYABjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjApnZXRfY29tbWl0lGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlsb3NzX3R5cGWUjAJsMpSMBmJ1Y2tldJROjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJc2F2ZV9mcmVxlE3oA4wNc2F2ZV9wYXJhbGxlbJSJjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwKYWRkX2V4dHJhc5RoAmgGaCOGlFKUjAZkZXZpY2WUjARjdWRhlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwPcHJlZGljdF9lcHNpbG9ulImMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaDOGlFKUjAtzYW1wbGVfZnJlcZRN6AOMDGxvc3Nfd2VpZ2h0c5ROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWV2YWxfZnN0cmluZ3OUaAJoBmg6hpRSlIwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwNY2xpcF9kZW5vaXNlZJSIjAtyZWFkX2NvbmZpZ5RoAmgGaEOGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlhdHRlbnRpb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMCHNldF9zZWVklGgCaAZoTYaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDWFjdGlvbl93ZWlnaHSUSwGMBW1rZGlylGgCaAZoVYaUUpSMDWxvc3NfZGlzY291bnSUSwGMCWRpbV9tdWx0c5RLAUsESwiHlHViaDOGlFKULg=="
+++++     },
+++++     "get_commit": {
+++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++         "_type": "python_object (type = method)",
+++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZGlmZpRoAmgGaAqGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMC25fcmVmZXJlbmNllEsyjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MB2hvcml6b26UTYABjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjApnZXRfY29tbWl0lGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlsb3NzX3R5cGWUjAJsMpSMBmJ1Y2tldJROjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJc2F2ZV9mcmVxlE3oA4wNc2F2ZV9wYXJhbGxlbJSJjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwKYWRkX2V4dHJhc5RoAmgGaCOGlFKUjAZkZXZpY2WUjARjdWRhlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwPcHJlZGljdF9lcHNpbG9ulImMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaDOGlFKUjAtzYW1wbGVfZnJlcZRN6AOMDGxvc3Nfd2VpZ2h0c5ROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWV2YWxfZnN0cmluZ3OUaAJoBmg6hpRSlIwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwNY2xpcF9kZW5vaXNlZJSIjAtyZWFkX2NvbmZpZ5RoAmgGaEOGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlhdHRlbnRpb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMCHNldF9zZWVklGgCaAZoTYaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDWFjdGlvbl93ZWlnaHSUSwGMBW1rZGlylGgCaAZoVYaUUpSMDWxvc3NfZGlzY291bnSUSwGMCWRpbV9tdWx0c5RLAUsESwiHlHViaBaGlFKULg=="
+++++     },
+++++     "gradient_accumulate_every": 2,
+++++     "horizon": 384,
+++++@@ -51,12 +51,11 @@
+++++     "mkdir": {
+++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++         "_type": "python_object (type = method)",
+++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZGlmZpRoAmgGaAqGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMC25fcmVmZXJlbmNllEsyjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MB2hvcml6b26UTYABjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjApnZXRfY29tbWl0lGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlsb3NzX3R5cGWUjAJsMpSMBmJ1Y2tldJROjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJc2F2ZV9mcmVxlE3oA4wNc2F2ZV9wYXJhbGxlbJSJjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwKYWRkX2V4dHJhc5RoAmgGaCOGlFKUjAZkZXZpY2WUjARjdWRhlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwPcHJlZGljdF9lcHNpbG9ulImMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaDOGlFKUjAtzYW1wbGVfZnJlcZRN6AOMDGxvc3Nfd2VpZ2h0c5ROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWV2YWxfZnN0cmluZ3OUaAJoBmg6hpRSlIwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwNY2xpcF9kZW5vaXNlZJSIjAtyZWFkX2NvbmZpZ5RoAmgGaEOGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlhdHRlbnRpb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMCHNldF9zZWVklGgCaAZoTYaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDWFjdGlvbl93ZWlnaHSUSwGMBW1rZGlylGgCaAZoVYaUUpSMDWxvc3NfZGlzY291bnSUSwGMCWRpbV9tdWx0c5RLAUsESwiHlHViaFWGlFKULg=="
+++++     },
+++++     "model": "models.TemporalUnet",
+++++     "n_diffusion_steps": 256,
+++++     "n_reference": 50,
+++++-    "n_samples": 10,
+++++     "n_saves": 50,
+++++     "n_steps_per_epoch": 10000,
+++++     "n_train_steps": 2000000.0,
+++++@@ -69,21 +68,21 @@
+++++     "read_config": {
+++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++         "_type": "python_object (type = method)",
+++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZGlmZpRoAmgGaAqGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMC25fcmVmZXJlbmNllEsyjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MB2hvcml6b26UTYABjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjApnZXRfY29tbWl0lGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlsb3NzX3R5cGWUjAJsMpSMBmJ1Y2tldJROjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJc2F2ZV9mcmVxlE3oA4wNc2F2ZV9wYXJhbGxlbJSJjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwKYWRkX2V4dHJhc5RoAmgGaCOGlFKUjAZkZXZpY2WUjARjdWRhlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwPcHJlZGljdF9lcHNpbG9ulImMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaDOGlFKUjAtzYW1wbGVfZnJlcZRN6AOMDGxvc3Nfd2VpZ2h0c5ROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWV2YWxfZnN0cmluZ3OUaAJoBmg6hpRSlIwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwNY2xpcF9kZW5vaXNlZJSIjAtyZWFkX2NvbmZpZ5RoAmgGaEOGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlhdHRlbnRpb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMCHNldF9zZWVklGgCaAZoTYaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDWFjdGlvbl93ZWlnaHSUSwGMBW1rZGlylGgCaAZoVYaUUpSMDWxvc3NfZGlzY291bnSUSwGMCWRpbV9tdWx0c5RLAUsESwiHlHViaEOGlFKULg=="
+++++     },
+++++     "renderer": "utils.Maze2dRenderer",
+++++     "reproducibility": {
+++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
+++++         "git_has_uncommitted_changes": true,
+++++         "git_root": "/home/wslabtop/project/diffuser",
+++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
+++++-        "time": "Fri Nov  8 09:50:02 2024"
++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
++++++        "time": "Fri Nov  8 11:52:30 2024"
+++++     },
+++++     "sample_freq": 1000,
+++++     "save_diff": {
+++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++         "_type": "python_object (type = method)",
+++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZGlmZpRoAmgGaAqGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMC25fcmVmZXJlbmNllEsyjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MB2hvcml6b26UTYABjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjApnZXRfY29tbWl0lGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlsb3NzX3R5cGWUjAJsMpSMBmJ1Y2tldJROjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJc2F2ZV9mcmVxlE3oA4wNc2F2ZV9wYXJhbGxlbJSJjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwKYWRkX2V4dHJhc5RoAmgGaCOGlFKUjAZkZXZpY2WUjARjdWRhlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwPcHJlZGljdF9lcHNpbG9ulImMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaDOGlFKUjAtzYW1wbGVfZnJlcZRN6AOMDGxvc3Nfd2VpZ2h0c5ROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWV2YWxfZnN0cmluZ3OUaAJoBmg6hpRSlIwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwNY2xpcF9kZW5vaXNlZJSIjAtyZWFkX2NvbmZpZ5RoAmgGaEOGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlhdHRlbnRpb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMCHNldF9zZWVklGgCaAZoTYaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDWFjdGlvbl93ZWlnaHSUSwGMBW1rZGlylGgCaAZoVYaUUpSMDWxvc3NfZGlzY291bnSUSwGMCWRpbV9tdWx0c5RLAUsESwiHlHViaAqGlFKULg=="
+++++     },
+++++     "save_freq": 1000,
+++++     "save_parallel": false,
+++++@@ -91,12 +90,12 @@
+++++     "set_loadbase": {
+++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++         "_type": "python_object (type = method)",
+++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZGlmZpRoAmgGaAqGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMC25fcmVmZXJlbmNllEsyjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MB2hvcml6b26UTYABjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjApnZXRfY29tbWl0lGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlsb3NzX3R5cGWUjAJsMpSMBmJ1Y2tldJROjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJc2F2ZV9mcmVxlE3oA4wNc2F2ZV9wYXJhbGxlbJSJjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwKYWRkX2V4dHJhc5RoAmgGaCOGlFKUjAZkZXZpY2WUjARjdWRhlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwPcHJlZGljdF9lcHNpbG9ulImMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaDOGlFKUjAtzYW1wbGVfZnJlcZRN6AOMDGxvc3Nfd2VpZ2h0c5ROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWV2YWxfZnN0cmluZ3OUaAJoBmg6hpRSlIwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwNY2xpcF9kZW5vaXNlZJSIjAtyZWFkX2NvbmZpZ5RoAmgGaEOGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlhdHRlbnRpb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMCHNldF9zZWVklGgCaAZoTYaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDWFjdGlvbl93ZWlnaHSUSwGMBW1rZGlylGgCaAZoVYaUUpSMDWxvc3NfZGlzY291bnSUSwGMCWRpbV9tdWx0c5RLAUsESwiHlHViaCyGlFKULg=="
+++++     },
+++++     "set_seed": {
+++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++         "_type": "python_object (type = method)",
+++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZGlmZpRoAmgGaAqGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMC25fcmVmZXJlbmNllEsyjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MB2hvcml6b26UTYABjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjApnZXRfY29tbWl0lGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAlsb3NzX3R5cGWUjAJsMpSMBmJ1Y2tldJROjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJc2F2ZV9mcmVxlE3oA4wNc2F2ZV9wYXJhbGxlbJSJjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwKYWRkX2V4dHJhc5RoAmgGaCOGlFKUjAZkZXZpY2WUjARjdWRhlIwHbG9nYmFzZZSMBGxvZ3OUjAZjb21taXSUjC0wYjFmNTMwOGFlNmFmNjkzZmQ5ZGUyMTE1NDBiYjBmYzk1OTVjNWU3IG1haW6UjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwPcHJlZGljdF9lcHNpbG9ulImMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAduX3NhdmVzlEsyjBFnZW5lcmF0ZV9leHBfbmFtZZRoAmgGaDOGlFKUjAtzYW1wbGVfZnJlcZRN6AOMDGxvc3Nfd2VpZ2h0c5ROjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWV2YWxfZnN0cmluZ3OUaAJoBmg6hpRSlIwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwNY2xpcF9kZW5vaXNlZJSIjAtyZWFkX2NvbmZpZ5RoAmgGaEOGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlhdHRlbnRpb26UiYwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMCHNldF9zZWVklGgCaAZoTYaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDWFjdGlvbl93ZWlnaHSUSwGMBW1rZGlylGgCaAZoVYaUUpSMDWxvc3NfZGlzY291bnSUSwGMCWRpbV9tdWx0c5RLAUsESwiHlHViaE2GlFKULg=="
+++++     },
+++++     "termination_penalty": null,
+++++     "use_padding": false
+++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++index ed9549e..ff3972d 100644
+++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++@@ -1,231 +1,4579 @@
+++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
+++++-index 1ad2106..5991f01 100644
+++++---- a/diffuser/datasets/buffer.py
+++++-+++ b/diffuser/datasets/buffer.py
+++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
+++++- 
+++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
+++++-         self._dict = {
+++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
+++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
+++++-         }
+++++-         self._count = 0
+++++-         self.max_n_episodes = max_n_episodes
+++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
+++++-index 655a6f0..d5dd111 100644
+++++---- a/diffuser/environments/registration.py
+++++-+++ b/diffuser/environments/registration.py
+++++-@@ -1,3 +1,5 @@
+++++-+import sys
+++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
+++++- import gym
+++++- 
+++++- ENVIRONMENT_SPECS = (
+++++-@@ -31,4 +33,4 @@ def register_environments():
+++++-         return gym_ids
+++++-     except:
+++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
+++++--        return tuple()
+++++-\ No newline at end of file
+++++-+        return tuple()
++++++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
++++++index db2afeb..ec28ee5 100644
++++++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
++++++diff --git a/config/maze2d.py b/config/maze2d.py
++++++index e7698af..e5ef81a 100644
++++++--- a/config/maze2d.py
+++++++++ b/config/maze2d.py
++++++@@ -70,7 +70,6 @@ base = {
++++++         'n_saves': 50,
++++++         'save_parallel': False,
++++++         'n_reference': 50,
++++++-        'n_samples': 10,
++++++         'bucket': None,
++++++         'device': 'cuda',
++++++     },
++++++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
++++++index 5923eb6..63f15a5 100644
++++++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
+++++ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
+++++-index 8659ff1..d01c272 100644
++++++index d01c272..7327789 100644
+++++ --- a/diffuser/utils/rendering.py
+++++ +++ b/diffuser/utils/rendering.py
+++++-@@ -36,15 +36,44 @@ def env_map(env_name):
+++++- #------------------------------ helper functions -----------------------------#
+++++- #-----------------------------------------------------------------------------#
+++++- 
+++++-+def atmost_2d(x):
+++++-+    while x.ndim > 2:
+++++-+        x = x.squeeze(0)
+++++-+    return x
+++++-+
+++++-+def zipsafe(*args):
+++++-+    length = len(args[0])
+++++-+    assert all([len(a) == length for a in args])
+++++-+    return zip(*args)
+++++-+
+++++-+def zipkw(*args, **kwargs):
+++++-+    nargs = len(args)
+++++-+    keys = kwargs.keys()
+++++-+    vals = [kwargs[k] for k in keys]
+++++-+    zipped = zipsafe(*args, *vals)
+++++-+    for items in zipped:
+++++-+        zipped_args = items[:nargs]
+++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
+++++-+        yield zipped_args, zipped_kwargs
+++++-+
+++++- def get_image_mask(img):
+++++-     background = (img == 255).all(axis=-1, keepdims=True)
+++++-     mask = ~background.repeat(3, axis=-1)
+++++-     return mask
+++++- 
+++++--def atmost_2d(x):
+++++--    while x.ndim > 2:
+++++--        x = x.squeeze(0)
+++++--    return x
+++++-+def plot2img(fig, remove_margins=True):
+++++-+    # https://stackoverflow.com/a/35362787/2912349
+++++-+    # https://stackoverflow.com/a/54334430/2912349
+++++-+
+++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
+++++-+
+++++-+    if remove_margins:
+++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
+++++-+
+++++-+    canvas = FigureCanvasAgg(fig)
+++++-+    canvas.draw()
+++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
+++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
+++++- 
+++++- #-----------------------------------------------------------------------------#
+++++- #---------------------------------- renderers --------------------------------#
+++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
+++++-         else:
+++++-             self.env = env
+++++-         ## - 1 because the envs in renderer are fully-observed
+++++-+        ## @TODO : clean up
+++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
+++++-         self.action_dim = np.prod(self.env.action_space.shape)
+++++-         try:
+++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
+++++-     def __call__(self, *args, **kwargs):
+++++-         return self.renders(*args, **kwargs)
++++++@@ -306,6 +306,10 @@ class MazeRenderer:
++++++             savepath : str
++++++             observations : [ n_paths x horizon x 2 ]
++++++         '''
+++++++        print("ncol_st:", ncol)
+++++++        ncol = max(1, min(len(paths), 5))
+++++++        print("Number of paths:", len(paths))
+++++++        print("ncol:", ncol)
++++++         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++++  
+++++-+#-----------------------------------------------------------------------------#
+++++-+#----------------------------------- maze2d ----------------------------------#
+++++-+#-----------------------------------------------------------------------------#
+++++-+
+++++-+MAZE_BOUNDS = {
+++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
+++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
+++++-+    'maze2d-large-v1': (0, 9, 0, 12)
+++++-+}
+++++-+
+++++-+class MazeRenderer:
+++++-+
+++++-+    def __init__(self, env):
+++++-+        if type(env) is str: env = load_environment(env)
+++++-+        self._config = env._config
+++++-+        self._background = self._config != ' '
+++++-+        self._remove_margins = False
+++++-+        self._extent = (0, 1, 1, 0)
+++++-+
+++++-+    def renders(self, observations, conditions=None, title=None):
+++++-+        plt.clf()
+++++-+        fig = plt.gcf()
+++++-+        fig.set_size_inches(5, 5)
+++++-+        plt.imshow(self._background * .5,
+++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
+++++-+
+++++-+        path_length = len(observations)
+++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
+++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
+++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
+++++-+        plt.axis('off')
+++++-+        plt.title(title)
+++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
+++++-+        return img
+++++-+
+++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
+++++-+        '''
+++++-+            savepath : str
+++++-+            observations : [ n_paths x horizon x 2 ]
+++++-+        '''
+++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++++-+
+++++-+        images = []
+++++-+        for path, kw in zipkw(paths, **kwargs):
+++++-+            img = self.renders(*path, **kw)
+++++-+            images.append(img)
+++++-+        images = np.stack(images, axis=0)
+++++-+
+++++-+        nrow = len(images) // ncol
+++++-+        images = einops.rearrange(images,
+++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
+++++-+        imageio.imsave(savepath, images)
+++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
+++++-+
+++++-+class Maze2dRenderer(MazeRenderer):
+++++-+
+++++-+    def __init__(self, env, observation_dim=None):
+++++-+        self.env_name = env
+++++-+        self.env = load_environment(env)
+++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
+++++-+        self.action_dim = np.prod(self.env.action_space.shape)
+++++-+        self.goal = None
+++++-+        self._background = self.env.maze_arr == 10
+++++-+        self._remove_margins = False
+++++-+        self._extent = (0, 1, 1, 0)
+++++-+
+++++-+    def renders(self, observations, conditions=None, **kwargs):
+++++-+        bounds = MAZE_BOUNDS[self.env_name]
+++++-+
+++++-+        observations = observations + .5
+++++-+        if len(bounds) == 2:
+++++-+            _, scale = bounds
+++++-+            observations /= scale
+++++-+        elif len(bounds) == 4:
+++++-+            _, iscale, _, jscale = bounds
+++++-+            observations[:, 0] /= iscale
+++++-+            observations[:, 1] /= jscale
+++++-+        else:
+++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
+++++-+
+++++-+        if conditions is not None:
+++++-+            conditions /= scale
+++++-+        return super().renders(observations, conditions, **kwargs)
+++++-+
+++++- #-----------------------------------------------------------------------------#
+++++- #---------------------------------- rollouts ---------------------------------#
+++++- #-----------------------------------------------------------------------------#
+++++-diff --git a/environment.yml b/environment.yml
+++++-index c14a0cf..e56b6a9 100644
+++++---- a/environment.yml
+++++-+++ b/environment.yml
+++++-@@ -1,4 +1,4 @@
+++++--name: diffuser
+++++-+name: diffuser_2
+++++- channels:
+++++- - defaults
+++++- - conda-forge
+++++-@@ -12,9 +12,7 @@ dependencies:
+++++-     - gym==0.18.0
+++++-     - mujoco-py==2.0.2.13
+++++-     - matplotlib==3.3.4
+++++--    - torch==1.9.1+cu111
+++++-     - typed-argument-parser
+++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
+++++-     - scikit-image==0.17.2
+++++-     - scikit-video==1.1.11
+++++-     - gitpython
+++++-@@ -31,5 +29,4 @@ dependencies:
+++++-     - crcmod # for fast gsutil rsync on large files
+++++-     - google-api-python-client
+++++-     - cryptography
+++++--    - git+https://github.com/JannerM/doodad.git@janner
+++++-     - gdown>=4.6.0
++++++         images = []
++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
++++++index 83efa3b..e17216d 100644
++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++index 9ad1dbc..77943d6 100644
++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++@@ -3,13 +3,13 @@
++++++     "add_extras": {
++++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++         "_type": "python_object (type = method)",
++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
+++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2xvZ2Jhc2WUjARsb2dzlIwPcHJlZGljdF9lcHNpbG9ulImMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMBW1rZGlylGgCaAZoDYaUUpSMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAdob3Jpem9ulE2AAYwGcHJlZml4lIwKZGlmZnVzaW9uL5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1zYXZlX3BhcmFsbGVslImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgZhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwLcmVhZF9jb25maWeUaAJoBmgihpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaCWGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmgohpRSlIwLdXNlX3BhZGRpbmeUiYwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJZW1hX2RlY2F5lEc/79cKPXCj14wIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwIc2V0X3NlZWSUaAJoBmgyhpRSlIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMC3NhbXBsZV9mcmVxlE3oA4wNbG9zc19kaXNjb3VudJRLAYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wKYmF0Y2hfc2l6ZZRLIIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAZkZXZpY2WUjARjdWRhlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAtuX3JlZmVyZW5jZZRLMowMbG9zc193ZWlnaHRzlE6MBmJ1Y2tldJROjApnZXRfY29tbWl0lGgCaAZoR4aUUpSMB25fc2F2ZXOUSzKMCWxvc3NfdHlwZZSMAmwylIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZnJlcZRN6AOMDWNsaXBfZGVub2lzZWSUiIwJc2F2ZV9kaWZmlGgCaAZoVYaUUpSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlhdHRlbnRpb26UiXViaD6GlFKULg=="
++++++     },
++++++     "attention": false,
++++++     "batch_size": 32,
++++++     "bucket": null,
++++++     "clip_denoised": true,
++++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
+++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
++++++     "config": "config.maze2d",
++++++     "dataset": "maze2d-large-v1",
++++++     "device": "cuda",
++++++@@ -26,18 +26,18 @@
++++++     "eval_fstrings": {
++++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++         "_type": "python_object (type = method)",
++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
+++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2xvZ2Jhc2WUjARsb2dzlIwPcHJlZGljdF9lcHNpbG9ulImMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMBW1rZGlylGgCaAZoDYaUUpSMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAdob3Jpem9ulE2AAYwGcHJlZml4lIwKZGlmZnVzaW9uL5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1zYXZlX3BhcmFsbGVslImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgZhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwLcmVhZF9jb25maWeUaAJoBmgihpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaCWGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmgohpRSlIwLdXNlX3BhZGRpbmeUiYwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJZW1hX2RlY2F5lEc/79cKPXCj14wIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwIc2V0X3NlZWSUaAJoBmgyhpRSlIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMC3NhbXBsZV9mcmVxlE3oA4wNbG9zc19kaXNjb3VudJRLAYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wKYmF0Y2hfc2l6ZZRLIIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAZkZXZpY2WUjARjdWRhlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAtuX3JlZmVyZW5jZZRLMowMbG9zc193ZWlnaHRzlE6MBmJ1Y2tldJROjApnZXRfY29tbWl0lGgCaAZoR4aUUpSMB25fc2F2ZXOUSzKMCWxvc3NfdHlwZZSMAmwylIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZnJlcZRN6AOMDWNsaXBfZGVub2lzZWSUiIwJc2F2ZV9kaWZmlGgCaAZoVYaUUpSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlhdHRlbnRpb26UiXViaCWGlFKULg=="
++++++     },
++++++     "exp_name": "diffusion/H384_T256",
++++++     "generate_exp_name": {
++++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++         "_type": "python_object (type = method)",
++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
+++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2xvZ2Jhc2WUjARsb2dzlIwPcHJlZGljdF9lcHNpbG9ulImMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMBW1rZGlylGgCaAZoDYaUUpSMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAdob3Jpem9ulE2AAYwGcHJlZml4lIwKZGlmZnVzaW9uL5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1zYXZlX3BhcmFsbGVslImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgZhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwLcmVhZF9jb25maWeUaAJoBmgihpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaCWGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmgohpRSlIwLdXNlX3BhZGRpbmeUiYwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJZW1hX2RlY2F5lEc/79cKPXCj14wIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwIc2V0X3NlZWSUaAJoBmgyhpRSlIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMC3NhbXBsZV9mcmVxlE3oA4wNbG9zc19kaXNjb3VudJRLAYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wKYmF0Y2hfc2l6ZZRLIIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAZkZXZpY2WUjARjdWRhlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAtuX3JlZmVyZW5jZZRLMowMbG9zc193ZWlnaHRzlE6MBmJ1Y2tldJROjApnZXRfY29tbWl0lGgCaAZoR4aUUpSMB25fc2F2ZXOUSzKMCWxvc3NfdHlwZZSMAmwylIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZnJlcZRN6AOMDWNsaXBfZGVub2lzZWSUiIwJc2F2ZV9kaWZmlGgCaAZoVYaUUpSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlhdHRlbnRpb26UiXViaBmGlFKULg=="
++++++     },
++++++     "get_commit": {
++++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++         "_type": "python_object (type = method)",
++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
+++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2xvZ2Jhc2WUjARsb2dzlIwPcHJlZGljdF9lcHNpbG9ulImMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMBW1rZGlylGgCaAZoDYaUUpSMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAdob3Jpem9ulE2AAYwGcHJlZml4lIwKZGlmZnVzaW9uL5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1zYXZlX3BhcmFsbGVslImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgZhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwLcmVhZF9jb25maWeUaAJoBmgihpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaCWGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmgohpRSlIwLdXNlX3BhZGRpbmeUiYwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJZW1hX2RlY2F5lEc/79cKPXCj14wIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwIc2V0X3NlZWSUaAJoBmgyhpRSlIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMC3NhbXBsZV9mcmVxlE3oA4wNbG9zc19kaXNjb3VudJRLAYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wKYmF0Y2hfc2l6ZZRLIIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAZkZXZpY2WUjARjdWRhlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAtuX3JlZmVyZW5jZZRLMowMbG9zc193ZWlnaHRzlE6MBmJ1Y2tldJROjApnZXRfY29tbWl0lGgCaAZoR4aUUpSMB25fc2F2ZXOUSzKMCWxvc3NfdHlwZZSMAmwylIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZnJlcZRN6AOMDWNsaXBfZGVub2lzZWSUiIwJc2F2ZV9kaWZmlGgCaAZoVYaUUpSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlhdHRlbnRpb26UiXViaEeGlFKULg=="
++++++     },
++++++     "gradient_accumulate_every": 2,
++++++     "horizon": 384,
++++++@@ -51,12 +51,11 @@
++++++     "mkdir": {
++++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++         "_type": "python_object (type = method)",
++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
+++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2xvZ2Jhc2WUjARsb2dzlIwPcHJlZGljdF9lcHNpbG9ulImMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMBW1rZGlylGgCaAZoDYaUUpSMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAdob3Jpem9ulE2AAYwGcHJlZml4lIwKZGlmZnVzaW9uL5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1zYXZlX3BhcmFsbGVslImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgZhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwLcmVhZF9jb25maWeUaAJoBmgihpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaCWGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmgohpRSlIwLdXNlX3BhZGRpbmeUiYwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJZW1hX2RlY2F5lEc/79cKPXCj14wIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwIc2V0X3NlZWSUaAJoBmgyhpRSlIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMC3NhbXBsZV9mcmVxlE3oA4wNbG9zc19kaXNjb3VudJRLAYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wKYmF0Y2hfc2l6ZZRLIIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAZkZXZpY2WUjARjdWRhlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAtuX3JlZmVyZW5jZZRLMowMbG9zc193ZWlnaHRzlE6MBmJ1Y2tldJROjApnZXRfY29tbWl0lGgCaAZoR4aUUpSMB25fc2F2ZXOUSzKMCWxvc3NfdHlwZZSMAmwylIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZnJlcZRN6AOMDWNsaXBfZGVub2lzZWSUiIwJc2F2ZV9kaWZmlGgCaAZoVYaUUpSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlhdHRlbnRpb26UiXViaA2GlFKULg=="
++++++     },
++++++     "model": "models.TemporalUnet",
++++++     "n_diffusion_steps": 256,
++++++     "n_reference": 50,
++++++-    "n_samples": 10,
++++++     "n_saves": 50,
++++++     "n_steps_per_epoch": 10000,
++++++     "n_train_steps": 2000000.0,
++++++@@ -69,21 +68,21 @@
++++++     "read_config": {
++++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++         "_type": "python_object (type = method)",
++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
+++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2xvZ2Jhc2WUjARsb2dzlIwPcHJlZGljdF9lcHNpbG9ulImMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMBW1rZGlylGgCaAZoDYaUUpSMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAdob3Jpem9ulE2AAYwGcHJlZml4lIwKZGlmZnVzaW9uL5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1zYXZlX3BhcmFsbGVslImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgZhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwLcmVhZF9jb25maWeUaAJoBmgihpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaCWGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmgohpRSlIwLdXNlX3BhZGRpbmeUiYwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJZW1hX2RlY2F5lEc/79cKPXCj14wIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwIc2V0X3NlZWSUaAJoBmgyhpRSlIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMC3NhbXBsZV9mcmVxlE3oA4wNbG9zc19kaXNjb3VudJRLAYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wKYmF0Y2hfc2l6ZZRLIIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAZkZXZpY2WUjARjdWRhlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAtuX3JlZmVyZW5jZZRLMowMbG9zc193ZWlnaHRzlE6MBmJ1Y2tldJROjApnZXRfY29tbWl0lGgCaAZoR4aUUpSMB25fc2F2ZXOUSzKMCWxvc3NfdHlwZZSMAmwylIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZnJlcZRN6AOMDWNsaXBfZGVub2lzZWSUiIwJc2F2ZV9kaWZmlGgCaAZoVYaUUpSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlhdHRlbnRpb26UiXViaCKGlFKULg=="
++++++     },
++++++     "renderer": "utils.Maze2dRenderer",
++++++     "reproducibility": {
++++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
++++++         "git_has_uncommitted_changes": true,
++++++         "git_root": "/home/wslabtop/project/diffuser",
++++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
++++++-        "time": "Fri Nov  8 09:50:02 2024"
+++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
+++++++        "time": "Fri Nov  8 11:51:32 2024"
++++++     },
++++++     "sample_freq": 1000,
++++++     "save_diff": {
++++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++         "_type": "python_object (type = method)",
++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
+++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2xvZ2Jhc2WUjARsb2dzlIwPcHJlZGljdF9lcHNpbG9ulImMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMBW1rZGlylGgCaAZoDYaUUpSMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAdob3Jpem9ulE2AAYwGcHJlZml4lIwKZGlmZnVzaW9uL5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1zYXZlX3BhcmFsbGVslImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgZhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwLcmVhZF9jb25maWeUaAJoBmgihpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaCWGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmgohpRSlIwLdXNlX3BhZGRpbmeUiYwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJZW1hX2RlY2F5lEc/79cKPXCj14wIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwIc2V0X3NlZWSUaAJoBmgyhpRSlIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMC3NhbXBsZV9mcmVxlE3oA4wNbG9zc19kaXNjb3VudJRLAYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wKYmF0Y2hfc2l6ZZRLIIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAZkZXZpY2WUjARjdWRhlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAtuX3JlZmVyZW5jZZRLMowMbG9zc193ZWlnaHRzlE6MBmJ1Y2tldJROjApnZXRfY29tbWl0lGgCaAZoR4aUUpSMB25fc2F2ZXOUSzKMCWxvc3NfdHlwZZSMAmwylIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZnJlcZRN6AOMDWNsaXBfZGVub2lzZWSUiIwJc2F2ZV9kaWZmlGgCaAZoVYaUUpSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlhdHRlbnRpb26UiXViaFWGlFKULg=="
++++++     },
++++++     "save_freq": 1000,
++++++     "save_parallel": false,
++++++@@ -91,12 +90,12 @@
++++++     "set_loadbase": {
++++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++         "_type": "python_object (type = method)",
++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
+++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2xvZ2Jhc2WUjARsb2dzlIwPcHJlZGljdF9lcHNpbG9ulImMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMBW1rZGlylGgCaAZoDYaUUpSMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAdob3Jpem9ulE2AAYwGcHJlZml4lIwKZGlmZnVzaW9uL5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1zYXZlX3BhcmFsbGVslImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgZhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwLcmVhZF9jb25maWeUaAJoBmgihpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaCWGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmgohpRSlIwLdXNlX3BhZGRpbmeUiYwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJZW1hX2RlY2F5lEc/79cKPXCj14wIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwIc2V0X3NlZWSUaAJoBmgyhpRSlIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMC3NhbXBsZV9mcmVxlE3oA4wNbG9zc19kaXNjb3VudJRLAYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wKYmF0Y2hfc2l6ZZRLIIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAZkZXZpY2WUjARjdWRhlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAtuX3JlZmVyZW5jZZRLMowMbG9zc193ZWlnaHRzlE6MBmJ1Y2tldJROjApnZXRfY29tbWl0lGgCaAZoR4aUUpSMB25fc2F2ZXOUSzKMCWxvc3NfdHlwZZSMAmwylIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZnJlcZRN6AOMDWNsaXBfZGVub2lzZWSUiIwJc2F2ZV9kaWZmlGgCaAZoVYaUUpSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlhdHRlbnRpb26UiXViaCiGlFKULg=="
++++++     },
++++++     "set_seed": {
++++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++         "_type": "python_object (type = method)",
++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
+++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2xvZ2Jhc2WUjARsb2dzlIwPcHJlZGljdF9lcHNpbG9ulImMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMBW1rZGlylGgCaAZoDYaUUpSMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAdob3Jpem9ulE2AAYwGcHJlZml4lIwKZGlmZnVzaW9uL5SMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1zYXZlX3BhcmFsbGVslImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgZhpRSlIwJZGltX211bHRzlEsBSwRLCIeUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwLcmVhZF9jb25maWeUaAJoBmgihpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaCWGlFKUjAxzZXRfbG9hZGJhc2WUaAJoBmgohpRSlIwLdXNlX3BhZGRpbmeUiYwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJZW1hX2RlY2F5lEc/79cKPXCj14wIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwIc2V0X3NlZWSUaAJoBmgyhpRSlIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMC3NhbXBsZV9mcmVxlE3oA4wNbG9zc19kaXNjb3VudJRLAYwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wKYmF0Y2hfc2l6ZZRLIIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAZkZXZpY2WUjARjdWRhlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAtuX3JlZmVyZW5jZZRLMowMbG9zc193ZWlnaHRzlE6MBmJ1Y2tldJROjApnZXRfY29tbWl0lGgCaAZoR4aUUpSMB25fc2F2ZXOUSzKMCWxvc3NfdHlwZZSMAmwylIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWFjdGlvbl93ZWlnaHSUSwGMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCXNhdmVfZnJlcZRN6AOMDWNsaXBfZGVub2lzZWSUiIwJc2F2ZV9kaWZmlGgCaAZoVYaUUpSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlhdHRlbnRpb26UiXViaDKGlFKULg=="
++++++     },
++++++     "termination_penalty": null,
++++++     "use_padding": false
++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++index ed9549e..6a0a268 100644
++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++@@ -1,231 +1,4011 @@
++++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
++++++-index 1ad2106..5991f01 100644
++++++---- a/diffuser/datasets/buffer.py
++++++-+++ b/diffuser/datasets/buffer.py
++++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
++++++- 
++++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
++++++-         self._dict = {
++++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
++++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
++++++-         }
++++++-         self._count = 0
++++++-         self.max_n_episodes = max_n_episodes
++++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
++++++-index 655a6f0..d5dd111 100644
++++++---- a/diffuser/environments/registration.py
++++++-+++ b/diffuser/environments/registration.py
++++++-@@ -1,3 +1,5 @@
++++++-+import sys
++++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
++++++- import gym
++++++- 
++++++- ENVIRONMENT_SPECS = (
++++++-@@ -31,4 +33,4 @@ def register_environments():
++++++-         return gym_ids
++++++-     except:
++++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
++++++--        return tuple()
++++++-\ No newline at end of file
++++++-+        return tuple()
+++++++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
+++++++index db2afeb..ec28ee5 100644
+++++++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
+++++++diff --git a/config/maze2d.py b/config/maze2d.py
+++++++index e7698af..e5ef81a 100644
+++++++--- a/config/maze2d.py
++++++++++ b/config/maze2d.py
+++++++@@ -70,7 +70,6 @@ base = {
+++++++         'n_saves': 50,
+++++++         'save_parallel': False,
+++++++         'n_reference': 50,
+++++++-        'n_samples': 10,
+++++++         'bucket': None,
+++++++         'device': 'cuda',
+++++++     },
+++++++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
+++++++index 5923eb6..a0b166c 100644
+++++++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
++++++ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
++++++-index 8659ff1..d01c272 100644
+++++++index d01c272..ba015c0 100644
++++++ --- a/diffuser/utils/rendering.py
++++++ +++ b/diffuser/utils/rendering.py
++++++-@@ -36,15 +36,44 @@ def env_map(env_name):
++++++- #------------------------------ helper functions -----------------------------#
++++++- #-----------------------------------------------------------------------------#
++++++- 
++++++-+def atmost_2d(x):
++++++-+    while x.ndim > 2:
++++++-+        x = x.squeeze(0)
++++++-+    return x
++++++-+
++++++-+def zipsafe(*args):
++++++-+    length = len(args[0])
++++++-+    assert all([len(a) == length for a in args])
++++++-+    return zip(*args)
++++++-+
++++++-+def zipkw(*args, **kwargs):
++++++-+    nargs = len(args)
++++++-+    keys = kwargs.keys()
++++++-+    vals = [kwargs[k] for k in keys]
++++++-+    zipped = zipsafe(*args, *vals)
++++++-+    for items in zipped:
++++++-+        zipped_args = items[:nargs]
++++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
++++++-+        yield zipped_args, zipped_kwargs
++++++-+
++++++- def get_image_mask(img):
++++++-     background = (img == 255).all(axis=-1, keepdims=True)
++++++-     mask = ~background.repeat(3, axis=-1)
++++++-     return mask
++++++- 
++++++--def atmost_2d(x):
++++++--    while x.ndim > 2:
++++++--        x = x.squeeze(0)
++++++--    return x
++++++-+def plot2img(fig, remove_margins=True):
++++++-+    # https://stackoverflow.com/a/35362787/2912349
++++++-+    # https://stackoverflow.com/a/54334430/2912349
++++++-+
++++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
++++++-+
++++++-+    if remove_margins:
++++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
++++++-+
++++++-+    canvas = FigureCanvasAgg(fig)
++++++-+    canvas.draw()
++++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
++++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
++++++- 
++++++- #-----------------------------------------------------------------------------#
++++++- #---------------------------------- renderers --------------------------------#
++++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
++++++-         else:
++++++-             self.env = env
++++++-         ## - 1 because the envs in renderer are fully-observed
++++++-+        ## @TODO : clean up
++++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
++++++-         self.action_dim = np.prod(self.env.action_space.shape)
++++++-         try:
++++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
++++++-     def __call__(self, *args, **kwargs):
++++++-         return self.renders(*args, **kwargs)
+++++++@@ -306,6 +306,9 @@ class MazeRenderer:
+++++++             savepath : str
+++++++             observations : [ n_paths x horizon x 2 ]
+++++++         '''
++++++++        ncol = max(1, min(len(paths), 5))
++++++++        print("Number of paths:", len(paths))
++++++++        print("ncol:", ncol)
+++++++         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++++++  
++++++-+#-----------------------------------------------------------------------------#
++++++-+#----------------------------------- maze2d ----------------------------------#
++++++-+#-----------------------------------------------------------------------------#
++++++-+
++++++-+MAZE_BOUNDS = {
++++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
++++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
++++++-+    'maze2d-large-v1': (0, 9, 0, 12)
++++++-+}
++++++-+
++++++-+class MazeRenderer:
++++++-+
++++++-+    def __init__(self, env):
++++++-+        if type(env) is str: env = load_environment(env)
++++++-+        self._config = env._config
++++++-+        self._background = self._config != ' '
++++++-+        self._remove_margins = False
++++++-+        self._extent = (0, 1, 1, 0)
++++++-+
++++++-+    def renders(self, observations, conditions=None, title=None):
++++++-+        plt.clf()
++++++-+        fig = plt.gcf()
++++++-+        fig.set_size_inches(5, 5)
++++++-+        plt.imshow(self._background * .5,
++++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
++++++-+
++++++-+        path_length = len(observations)
++++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
++++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
++++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
++++++-+        plt.axis('off')
++++++-+        plt.title(title)
++++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
++++++-+        return img
++++++-+
++++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
++++++-+        '''
++++++-+            savepath : str
++++++-+            observations : [ n_paths x horizon x 2 ]
++++++-+        '''
++++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++++++-+
++++++-+        images = []
++++++-+        for path, kw in zipkw(paths, **kwargs):
++++++-+            img = self.renders(*path, **kw)
++++++-+            images.append(img)
++++++-+        images = np.stack(images, axis=0)
++++++-+
++++++-+        nrow = len(images) // ncol
++++++-+        images = einops.rearrange(images,
++++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
++++++-+        imageio.imsave(savepath, images)
++++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
++++++-+
++++++-+class Maze2dRenderer(MazeRenderer):
++++++-+
++++++-+    def __init__(self, env, observation_dim=None):
++++++-+        self.env_name = env
++++++-+        self.env = load_environment(env)
++++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
++++++-+        self.action_dim = np.prod(self.env.action_space.shape)
++++++-+        self.goal = None
++++++-+        self._background = self.env.maze_arr == 10
++++++-+        self._remove_margins = False
++++++-+        self._extent = (0, 1, 1, 0)
++++++-+
++++++-+    def renders(self, observations, conditions=None, **kwargs):
++++++-+        bounds = MAZE_BOUNDS[self.env_name]
++++++-+
++++++-+        observations = observations + .5
++++++-+        if len(bounds) == 2:
++++++-+            _, scale = bounds
++++++-+            observations /= scale
++++++-+        elif len(bounds) == 4:
++++++-+            _, iscale, _, jscale = bounds
++++++-+            observations[:, 0] /= iscale
++++++-+            observations[:, 1] /= jscale
++++++-+        else:
++++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
++++++-+
++++++-+        if conditions is not None:
++++++-+            conditions /= scale
++++++-+        return super().renders(observations, conditions, **kwargs)
++++++-+
++++++- #-----------------------------------------------------------------------------#
++++++- #---------------------------------- rollouts ---------------------------------#
++++++- #-----------------------------------------------------------------------------#
++++++-diff --git a/environment.yml b/environment.yml
++++++-index c14a0cf..e56b6a9 100644
++++++---- a/environment.yml
++++++-+++ b/environment.yml
++++++-@@ -1,4 +1,4 @@
++++++--name: diffuser
++++++-+name: diffuser_2
++++++- channels:
++++++- - defaults
++++++- - conda-forge
++++++-@@ -12,9 +12,7 @@ dependencies:
++++++-     - gym==0.18.0
++++++-     - mujoco-py==2.0.2.13
++++++-     - matplotlib==3.3.4
++++++--    - torch==1.9.1+cu111
++++++-     - typed-argument-parser
++++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
++++++-     - scikit-image==0.17.2
++++++-     - scikit-video==1.1.11
++++++-     - gitpython
++++++-@@ -31,5 +29,4 @@ dependencies:
++++++-     - crcmod # for fast gsutil rsync on large files
++++++-     - google-api-python-client
++++++-     - cryptography
++++++--    - git+https://github.com/JannerM/doodad.git@janner
++++++-     - gdown>=4.6.0
+++++++         images = []
+++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
+++++++index 83efa3b..e1f501f 100644
+++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
+++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++index 9ad1dbc..a6b2120 100644
+++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++@@ -3,13 +3,13 @@
+++++++     "add_extras": {
+++++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++         "_type": "python_object (type = method)",
+++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMC3VzZV9wYWRkaW5nlImMDGxvc3Nfd2VpZ2h0c5ROjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwMc2V0X2xvYWRiYXNllGgCaAZoDoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCWF0dGVudGlvbpSJjAlkaW1fbXVsdHOUSwFLBEsIh5SMCWVtYV9kZWNheZRHP+/XCj1wo9eMBW1rZGlylGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMCmdldF9jb21taXSUaAJoBmgbhpRSlIwIc2V0X3NlZWSUaAJoBmgehpRSlIwNbG9zc19kaXNjb3VudJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgihpRSlIwHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMC3JlYWRfY29uZmlnlGgCaAZoKIaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjA1hY3Rpb25fd2VpZ2h0lEsBjAdob3Jpem9ulE2AAYwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAZidWNrZXSUTowGZGV2aWNllIwEY3VkYZSMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjA1jbGlwX2Rlbm9pc2VklIiMCWxvc3NfdHlwZZSMAmwylIwLc2FtcGxlX2ZyZXGUTegDjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAdsb2diYXNllIwEbG9nc5SMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCmFkZF9leHRyYXOUaAJoBmhFhpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaEiGlFKUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2RpZmaUaAJoBmhUhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMC25fcmVmZXJlbmNllEsyjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlHViaEWGlFKULg=="
+++++++     },
+++++++     "attention": false,
+++++++     "batch_size": 32,
+++++++     "bucket": null,
+++++++     "clip_denoised": true,
+++++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
++++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
+++++++     "config": "config.maze2d",
+++++++     "dataset": "maze2d-large-v1",
+++++++     "device": "cuda",
+++++++@@ -26,18 +26,18 @@
+++++++     "eval_fstrings": {
+++++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++         "_type": "python_object (type = method)",
+++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMC3VzZV9wYWRkaW5nlImMDGxvc3Nfd2VpZ2h0c5ROjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwMc2V0X2xvYWRiYXNllGgCaAZoDoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCWF0dGVudGlvbpSJjAlkaW1fbXVsdHOUSwFLBEsIh5SMCWVtYV9kZWNheZRHP+/XCj1wo9eMBW1rZGlylGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMCmdldF9jb21taXSUaAJoBmgbhpRSlIwIc2V0X3NlZWSUaAJoBmgehpRSlIwNbG9zc19kaXNjb3VudJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgihpRSlIwHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMC3JlYWRfY29uZmlnlGgCaAZoKIaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjA1hY3Rpb25fd2VpZ2h0lEsBjAdob3Jpem9ulE2AAYwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAZidWNrZXSUTowGZGV2aWNllIwEY3VkYZSMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjA1jbGlwX2Rlbm9pc2VklIiMCWxvc3NfdHlwZZSMAmwylIwLc2FtcGxlX2ZyZXGUTegDjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAdsb2diYXNllIwEbG9nc5SMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCmFkZF9leHRyYXOUaAJoBmhFhpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaEiGlFKUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2RpZmaUaAJoBmhUhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMC25fcmVmZXJlbmNllEsyjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlHViaEiGlFKULg=="
+++++++     },
+++++++     "exp_name": "diffusion/H384_T256",
+++++++     "generate_exp_name": {
+++++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++         "_type": "python_object (type = method)",
+++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMC3VzZV9wYWRkaW5nlImMDGxvc3Nfd2VpZ2h0c5ROjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwMc2V0X2xvYWRiYXNllGgCaAZoDoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCWF0dGVudGlvbpSJjAlkaW1fbXVsdHOUSwFLBEsIh5SMCWVtYV9kZWNheZRHP+/XCj1wo9eMBW1rZGlylGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMCmdldF9jb21taXSUaAJoBmgbhpRSlIwIc2V0X3NlZWSUaAJoBmgehpRSlIwNbG9zc19kaXNjb3VudJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgihpRSlIwHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMC3JlYWRfY29uZmlnlGgCaAZoKIaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjA1hY3Rpb25fd2VpZ2h0lEsBjAdob3Jpem9ulE2AAYwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAZidWNrZXSUTowGZGV2aWNllIwEY3VkYZSMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjA1jbGlwX2Rlbm9pc2VklIiMCWxvc3NfdHlwZZSMAmwylIwLc2FtcGxlX2ZyZXGUTegDjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAdsb2diYXNllIwEbG9nc5SMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCmFkZF9leHRyYXOUaAJoBmhFhpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaEiGlFKUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2RpZmaUaAJoBmhUhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMC25fcmVmZXJlbmNllEsyjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlHViaCKGlFKULg=="
+++++++     },
+++++++     "get_commit": {
+++++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++         "_type": "python_object (type = method)",
+++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMC3VzZV9wYWRkaW5nlImMDGxvc3Nfd2VpZ2h0c5ROjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwMc2V0X2xvYWRiYXNllGgCaAZoDoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCWF0dGVudGlvbpSJjAlkaW1fbXVsdHOUSwFLBEsIh5SMCWVtYV9kZWNheZRHP+/XCj1wo9eMBW1rZGlylGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMCmdldF9jb21taXSUaAJoBmgbhpRSlIwIc2V0X3NlZWSUaAJoBmgehpRSlIwNbG9zc19kaXNjb3VudJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgihpRSlIwHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMC3JlYWRfY29uZmlnlGgCaAZoKIaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjA1hY3Rpb25fd2VpZ2h0lEsBjAdob3Jpem9ulE2AAYwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAZidWNrZXSUTowGZGV2aWNllIwEY3VkYZSMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjA1jbGlwX2Rlbm9pc2VklIiMCWxvc3NfdHlwZZSMAmwylIwLc2FtcGxlX2ZyZXGUTegDjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAdsb2diYXNllIwEbG9nc5SMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCmFkZF9leHRyYXOUaAJoBmhFhpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaEiGlFKUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2RpZmaUaAJoBmhUhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMC25fcmVmZXJlbmNllEsyjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlHViaBuGlFKULg=="
+++++++     },
+++++++     "gradient_accumulate_every": 2,
+++++++     "horizon": 384,
+++++++@@ -51,12 +51,11 @@
+++++++     "mkdir": {
+++++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++         "_type": "python_object (type = method)",
+++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMC3VzZV9wYWRkaW5nlImMDGxvc3Nfd2VpZ2h0c5ROjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwMc2V0X2xvYWRiYXNllGgCaAZoDoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCWF0dGVudGlvbpSJjAlkaW1fbXVsdHOUSwFLBEsIh5SMCWVtYV9kZWNheZRHP+/XCj1wo9eMBW1rZGlylGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMCmdldF9jb21taXSUaAJoBmgbhpRSlIwIc2V0X3NlZWSUaAJoBmgehpRSlIwNbG9zc19kaXNjb3VudJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgihpRSlIwHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMC3JlYWRfY29uZmlnlGgCaAZoKIaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjA1hY3Rpb25fd2VpZ2h0lEsBjAdob3Jpem9ulE2AAYwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAZidWNrZXSUTowGZGV2aWNllIwEY3VkYZSMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjA1jbGlwX2Rlbm9pc2VklIiMCWxvc3NfdHlwZZSMAmwylIwLc2FtcGxlX2ZyZXGUTegDjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAdsb2diYXNllIwEbG9nc5SMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCmFkZF9leHRyYXOUaAJoBmhFhpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaEiGlFKUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2RpZmaUaAJoBmhUhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMC25fcmVmZXJlbmNllEsyjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlHViaBaGlFKULg=="
+++++++     },
+++++++     "model": "models.TemporalUnet",
+++++++     "n_diffusion_steps": 256,
+++++++     "n_reference": 50,
+++++++-    "n_samples": 10,
+++++++     "n_saves": 50,
+++++++     "n_steps_per_epoch": 10000,
+++++++     "n_train_steps": 2000000.0,
+++++++@@ -69,21 +68,21 @@
+++++++     "read_config": {
+++++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++         "_type": "python_object (type = method)",
+++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMC3VzZV9wYWRkaW5nlImMDGxvc3Nfd2VpZ2h0c5ROjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwMc2V0X2xvYWRiYXNllGgCaAZoDoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCWF0dGVudGlvbpSJjAlkaW1fbXVsdHOUSwFLBEsIh5SMCWVtYV9kZWNheZRHP+/XCj1wo9eMBW1rZGlylGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMCmdldF9jb21taXSUaAJoBmgbhpRSlIwIc2V0X3NlZWSUaAJoBmgehpRSlIwNbG9zc19kaXNjb3VudJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgihpRSlIwHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMC3JlYWRfY29uZmlnlGgCaAZoKIaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjA1hY3Rpb25fd2VpZ2h0lEsBjAdob3Jpem9ulE2AAYwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAZidWNrZXSUTowGZGV2aWNllIwEY3VkYZSMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjA1jbGlwX2Rlbm9pc2VklIiMCWxvc3NfdHlwZZSMAmwylIwLc2FtcGxlX2ZyZXGUTegDjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAdsb2diYXNllIwEbG9nc5SMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCmFkZF9leHRyYXOUaAJoBmhFhpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaEiGlFKUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2RpZmaUaAJoBmhUhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMC25fcmVmZXJlbmNllEsyjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlHViaCiGlFKULg=="
+++++++     },
+++++++     "renderer": "utils.Maze2dRenderer",
+++++++     "reproducibility": {
+++++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
+++++++         "git_has_uncommitted_changes": true,
+++++++         "git_root": "/home/wslabtop/project/diffuser",
+++++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
+++++++-        "time": "Fri Nov  8 09:50:02 2024"
++++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
++++++++        "time": "Fri Nov  8 11:48:41 2024"
+++++++     },
+++++++     "sample_freq": 1000,
+++++++     "save_diff": {
+++++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++         "_type": "python_object (type = method)",
+++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMC3VzZV9wYWRkaW5nlImMDGxvc3Nfd2VpZ2h0c5ROjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwMc2V0X2xvYWRiYXNllGgCaAZoDoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCWF0dGVudGlvbpSJjAlkaW1fbXVsdHOUSwFLBEsIh5SMCWVtYV9kZWNheZRHP+/XCj1wo9eMBW1rZGlylGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMCmdldF9jb21taXSUaAJoBmgbhpRSlIwIc2V0X3NlZWSUaAJoBmgehpRSlIwNbG9zc19kaXNjb3VudJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgihpRSlIwHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMC3JlYWRfY29uZmlnlGgCaAZoKIaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjA1hY3Rpb25fd2VpZ2h0lEsBjAdob3Jpem9ulE2AAYwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAZidWNrZXSUTowGZGV2aWNllIwEY3VkYZSMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjA1jbGlwX2Rlbm9pc2VklIiMCWxvc3NfdHlwZZSMAmwylIwLc2FtcGxlX2ZyZXGUTegDjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAdsb2diYXNllIwEbG9nc5SMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCmFkZF9leHRyYXOUaAJoBmhFhpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaEiGlFKUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2RpZmaUaAJoBmhUhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMC25fcmVmZXJlbmNllEsyjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlHViaFSGlFKULg=="
+++++++     },
+++++++     "save_freq": 1000,
+++++++     "save_parallel": false,
+++++++@@ -91,12 +90,12 @@
+++++++     "set_loadbase": {
+++++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++         "_type": "python_object (type = method)",
+++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMC3VzZV9wYWRkaW5nlImMDGxvc3Nfd2VpZ2h0c5ROjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwMc2V0X2xvYWRiYXNllGgCaAZoDoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCWF0dGVudGlvbpSJjAlkaW1fbXVsdHOUSwFLBEsIh5SMCWVtYV9kZWNheZRHP+/XCj1wo9eMBW1rZGlylGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMCmdldF9jb21taXSUaAJoBmgbhpRSlIwIc2V0X3NlZWSUaAJoBmgehpRSlIwNbG9zc19kaXNjb3VudJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgihpRSlIwHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMC3JlYWRfY29uZmlnlGgCaAZoKIaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjA1hY3Rpb25fd2VpZ2h0lEsBjAdob3Jpem9ulE2AAYwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAZidWNrZXSUTowGZGV2aWNllIwEY3VkYZSMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjA1jbGlwX2Rlbm9pc2VklIiMCWxvc3NfdHlwZZSMAmwylIwLc2FtcGxlX2ZyZXGUTegDjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAdsb2diYXNllIwEbG9nc5SMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCmFkZF9leHRyYXOUaAJoBmhFhpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaEiGlFKUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2RpZmaUaAJoBmhUhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMC25fcmVmZXJlbmNllEsyjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlHViaA6GlFKULg=="
+++++++     },
+++++++     "set_seed": {
+++++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++         "_type": "python_object (type = method)",
+++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMC3VzZV9wYWRkaW5nlImMDGxvc3Nfd2VpZ2h0c5ROjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwMc2V0X2xvYWRiYXNllGgCaAZoDoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMCWF0dGVudGlvbpSJjAlkaW1fbXVsdHOUSwFLBEsIh5SMCWVtYV9kZWNheZRHP+/XCj1wo9eMBW1rZGlylGgCaAZoFoaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMCmdldF9jb21taXSUaAJoBmgbhpRSlIwIc2V0X3NlZWSUaAJoBmgehpRSlIwNbG9zc19kaXNjb3VudJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgihpRSlIwHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMC3JlYWRfY29uZmlnlGgCaAZoKIaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjA1hY3Rpb25fd2VpZ2h0lEsBjAdob3Jpem9ulE2AAYwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAZidWNrZXSUTowGZGV2aWNllIwEY3VkYZSMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjA1jbGlwX2Rlbm9pc2VklIiMCWxvc3NfdHlwZZSMAmwylIwLc2FtcGxlX2ZyZXGUTegDjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAdsb2diYXNllIwEbG9nc5SMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCmFkZF9leHRyYXOUaAJoBmhFhpRSlIwNZXZhbF9mc3RyaW5nc5RoAmgGaEiGlFKUjAlzYXZlX2ZyZXGUTegDjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAlzYXZlX2RpZmaUaAJoBmhUhpRSlIwPcHJlZGljdF9lcHNpbG9ulImMC25fcmVmZXJlbmNllEsyjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlHViaB6GlFKULg=="
+++++++     },
+++++++     "termination_penalty": null,
+++++++     "use_padding": false
+++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++index ed9549e..316e242 100644
+++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++@@ -1,231 +1,3444 @@
+++++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
+++++++-index 1ad2106..5991f01 100644
+++++++---- a/diffuser/datasets/buffer.py
+++++++-+++ b/diffuser/datasets/buffer.py
+++++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
+++++++- 
+++++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
+++++++-         self._dict = {
+++++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
+++++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
+++++++-         }
+++++++-         self._count = 0
+++++++-         self.max_n_episodes = max_n_episodes
+++++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
+++++++-index 655a6f0..d5dd111 100644
+++++++---- a/diffuser/environments/registration.py
+++++++-+++ b/diffuser/environments/registration.py
+++++++-@@ -1,3 +1,5 @@
+++++++-+import sys
+++++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
+++++++- import gym
+++++++- 
+++++++- ENVIRONMENT_SPECS = (
+++++++-@@ -31,4 +33,4 @@ def register_environments():
+++++++-         return gym_ids
+++++++-     except:
+++++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
+++++++--        return tuple()
+++++++-\ No newline at end of file
+++++++-+        return tuple()
++++++++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
++++++++index db2afeb..ec28ee5 100644
++++++++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
++++++++diff --git a/config/maze2d.py b/config/maze2d.py
++++++++index e7698af..e5ef81a 100644
++++++++--- a/config/maze2d.py
+++++++++++ b/config/maze2d.py
++++++++@@ -70,7 +70,6 @@ base = {
++++++++         'n_saves': 50,
++++++++         'save_parallel': False,
++++++++         'n_reference': 50,
++++++++-        'n_samples': 10,
++++++++         'bucket': None,
++++++++         'device': 'cuda',
++++++++     },
++++++++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
++++++++index 5923eb6..e1aa7b2 100644
++++++++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
+++++++ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
+++++++-index 8659ff1..d01c272 100644
++++++++index d01c272..24f7f9b 100644
+++++++ --- a/diffuser/utils/rendering.py
+++++++ +++ b/diffuser/utils/rendering.py
+++++++-@@ -36,15 +36,44 @@ def env_map(env_name):
+++++++- #------------------------------ helper functions -----------------------------#
+++++++- #-----------------------------------------------------------------------------#
+++++++- 
+++++++-+def atmost_2d(x):
+++++++-+    while x.ndim > 2:
+++++++-+        x = x.squeeze(0)
+++++++-+    return x
+++++++-+
+++++++-+def zipsafe(*args):
+++++++-+    length = len(args[0])
+++++++-+    assert all([len(a) == length for a in args])
+++++++-+    return zip(*args)
+++++++-+
+++++++-+def zipkw(*args, **kwargs):
+++++++-+    nargs = len(args)
+++++++-+    keys = kwargs.keys()
+++++++-+    vals = [kwargs[k] for k in keys]
+++++++-+    zipped = zipsafe(*args, *vals)
+++++++-+    for items in zipped:
+++++++-+        zipped_args = items[:nargs]
+++++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
+++++++-+        yield zipped_args, zipped_kwargs
+++++++-+
+++++++- def get_image_mask(img):
+++++++-     background = (img == 255).all(axis=-1, keepdims=True)
+++++++-     mask = ~background.repeat(3, axis=-1)
+++++++-     return mask
+++++++- 
+++++++--def atmost_2d(x):
+++++++--    while x.ndim > 2:
+++++++--        x = x.squeeze(0)
+++++++--    return x
+++++++-+def plot2img(fig, remove_margins=True):
+++++++-+    # https://stackoverflow.com/a/35362787/2912349
+++++++-+    # https://stackoverflow.com/a/54334430/2912349
+++++++-+
+++++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
+++++++-+
+++++++-+    if remove_margins:
+++++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
+++++++-+
+++++++-+    canvas = FigureCanvasAgg(fig)
+++++++-+    canvas.draw()
+++++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
+++++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
+++++++- 
+++++++- #-----------------------------------------------------------------------------#
+++++++- #---------------------------------- renderers --------------------------------#
+++++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
+++++++-         else:
+++++++-             self.env = env
+++++++-         ## - 1 because the envs in renderer are fully-observed
+++++++-+        ## @TODO : clean up
+++++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
+++++++-         self.action_dim = np.prod(self.env.action_space.shape)
+++++++-         try:
+++++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
+++++++-     def __call__(self, *args, **kwargs):
+++++++-         return self.renders(*args, **kwargs)
++++++++@@ -306,6 +306,9 @@ class MazeRenderer:
++++++++             savepath : str
++++++++             observations : [ n_paths x horizon x 2 ]
++++++++         '''
+++++++++        ncol = max(1, min(len(paths), 4))
+++++++++        print("Number of paths:", len(paths))
+++++++++        print("ncol:", ncol)
++++++++         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++++++  
+++++++-+#-----------------------------------------------------------------------------#
+++++++-+#----------------------------------- maze2d ----------------------------------#
+++++++-+#-----------------------------------------------------------------------------#
+++++++-+
+++++++-+MAZE_BOUNDS = {
+++++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
+++++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
+++++++-+    'maze2d-large-v1': (0, 9, 0, 12)
+++++++-+}
+++++++-+
+++++++-+class MazeRenderer:
+++++++-+
+++++++-+    def __init__(self, env):
+++++++-+        if type(env) is str: env = load_environment(env)
+++++++-+        self._config = env._config
+++++++-+        self._background = self._config != ' '
+++++++-+        self._remove_margins = False
+++++++-+        self._extent = (0, 1, 1, 0)
+++++++-+
+++++++-+    def renders(self, observations, conditions=None, title=None):
+++++++-+        plt.clf()
+++++++-+        fig = plt.gcf()
+++++++-+        fig.set_size_inches(5, 5)
+++++++-+        plt.imshow(self._background * .5,
+++++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
+++++++-+
+++++++-+        path_length = len(observations)
+++++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
+++++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
+++++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
+++++++-+        plt.axis('off')
+++++++-+        plt.title(title)
+++++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
+++++++-+        return img
+++++++-+
+++++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
+++++++-+        '''
+++++++-+            savepath : str
+++++++-+            observations : [ n_paths x horizon x 2 ]
+++++++-+        '''
+++++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++++++-+
+++++++-+        images = []
+++++++-+        for path, kw in zipkw(paths, **kwargs):
+++++++-+            img = self.renders(*path, **kw)
+++++++-+            images.append(img)
+++++++-+        images = np.stack(images, axis=0)
+++++++-+
+++++++-+        nrow = len(images) // ncol
+++++++-+        images = einops.rearrange(images,
+++++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
+++++++-+        imageio.imsave(savepath, images)
+++++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
+++++++-+
+++++++-+class Maze2dRenderer(MazeRenderer):
+++++++-+
+++++++-+    def __init__(self, env, observation_dim=None):
+++++++-+        self.env_name = env
+++++++-+        self.env = load_environment(env)
+++++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
+++++++-+        self.action_dim = np.prod(self.env.action_space.shape)
+++++++-+        self.goal = None
+++++++-+        self._background = self.env.maze_arr == 10
+++++++-+        self._remove_margins = False
+++++++-+        self._extent = (0, 1, 1, 0)
+++++++-+
+++++++-+    def renders(self, observations, conditions=None, **kwargs):
+++++++-+        bounds = MAZE_BOUNDS[self.env_name]
+++++++-+
+++++++-+        observations = observations + .5
+++++++-+        if len(bounds) == 2:
+++++++-+            _, scale = bounds
+++++++-+            observations /= scale
+++++++-+        elif len(bounds) == 4:
+++++++-+            _, iscale, _, jscale = bounds
+++++++-+            observations[:, 0] /= iscale
+++++++-+            observations[:, 1] /= jscale
+++++++-+        else:
+++++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
+++++++-+
+++++++-+        if conditions is not None:
+++++++-+            conditions /= scale
+++++++-+        return super().renders(observations, conditions, **kwargs)
+++++++-+
+++++++- #-----------------------------------------------------------------------------#
+++++++- #---------------------------------- rollouts ---------------------------------#
+++++++- #-----------------------------------------------------------------------------#
+++++++-diff --git a/environment.yml b/environment.yml
+++++++-index c14a0cf..e56b6a9 100644
+++++++---- a/environment.yml
+++++++-+++ b/environment.yml
+++++++-@@ -1,4 +1,4 @@
+++++++--name: diffuser
+++++++-+name: diffuser_2
+++++++- channels:
+++++++- - defaults
+++++++- - conda-forge
+++++++-@@ -12,9 +12,7 @@ dependencies:
+++++++-     - gym==0.18.0
+++++++-     - mujoco-py==2.0.2.13
+++++++-     - matplotlib==3.3.4
+++++++--    - torch==1.9.1+cu111
+++++++-     - typed-argument-parser
+++++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
+++++++-     - scikit-image==0.17.2
+++++++-     - scikit-video==1.1.11
+++++++-     - gitpython
+++++++-@@ -31,5 +29,4 @@ dependencies:
+++++++-     - crcmod # for fast gsutil rsync on large files
+++++++-     - google-api-python-client
+++++++-     - cryptography
+++++++--    - git+https://github.com/JannerM/doodad.git@janner
+++++++-     - gdown>=4.6.0
++++++++         images = []
++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
++++++++index 83efa3b..e1f501f 100644
++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++index 9ad1dbc..74da825 100644
++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++@@ -3,13 +3,13 @@
++++++++     "add_extras": {
++++++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++         "_type": "python_object (type = method)",
++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
+++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwIc2V0X3NlZWSUaAJoBmgKhpRSlIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MD21heF9wYXRoX2xlbmd0aJRNQJyMB25fc2F2ZXOUSzKMCmdldF9jb21taXSUaAJoBmgQhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAllbWFfZGVjYXmURz/v1wo9cKPXjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAlsb3NzX3R5cGWUjAJsMpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMC3VzZV9wYWRkaW5nlImMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAtzYW1wbGVfZnJlcZRN6AOMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoJoaUUpSMC3JlYWRfY29uZmlnlGgCaAZoKYaUUpSMDWFjdGlvbl93ZWlnaHSUSwGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAphZGRfZXh0cmFzlGgCaAZoL4aUUpSMCXNhdmVfZGlmZpRoAmgGaDKGlFKUjAxsb3NzX3dlaWdodHOUTowHbG9nYmFzZZSMBGxvZ3OUjAVta2RpcpRoAmgGaDiGlFKUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJYXR0ZW50aW9ulImMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlzYXZlX2ZyZXGUTegDjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmRldmljZZSMBGN1ZGGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlkaWZmdXNpb26UjBhtb2RlbHMuR2F1c3NpYW5EaWZmdXNpb26UjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNc2F2ZV9wYXJhbGxlbJSJjAtuX3JlZmVyZW5jZZRLMowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNZXZhbF9mc3RyaW5nc5RoAmgGaE2GlFKUjApiYXRjaF9zaXpllEsgjAlkaW1fbXVsdHOUSwFLBEsIh5SMBmJ1Y2tldJROjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaC+GlFKULg=="
++++++++     },
++++++++     "attention": false,
++++++++     "batch_size": 32,
++++++++     "bucket": null,
++++++++     "clip_denoised": true,
++++++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
+++++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
++++++++     "config": "config.maze2d",
++++++++     "dataset": "maze2d-large-v1",
++++++++     "device": "cuda",
++++++++@@ -26,18 +26,18 @@
++++++++     "eval_fstrings": {
++++++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++         "_type": "python_object (type = method)",
++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
+++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwIc2V0X3NlZWSUaAJoBmgKhpRSlIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MD21heF9wYXRoX2xlbmd0aJRNQJyMB25fc2F2ZXOUSzKMCmdldF9jb21taXSUaAJoBmgQhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAllbWFfZGVjYXmURz/v1wo9cKPXjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAlsb3NzX3R5cGWUjAJsMpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMC3VzZV9wYWRkaW5nlImMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAtzYW1wbGVfZnJlcZRN6AOMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoJoaUUpSMC3JlYWRfY29uZmlnlGgCaAZoKYaUUpSMDWFjdGlvbl93ZWlnaHSUSwGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAphZGRfZXh0cmFzlGgCaAZoL4aUUpSMCXNhdmVfZGlmZpRoAmgGaDKGlFKUjAxsb3NzX3dlaWdodHOUTowHbG9nYmFzZZSMBGxvZ3OUjAVta2RpcpRoAmgGaDiGlFKUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJYXR0ZW50aW9ulImMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlzYXZlX2ZyZXGUTegDjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmRldmljZZSMBGN1ZGGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlkaWZmdXNpb26UjBhtb2RlbHMuR2F1c3NpYW5EaWZmdXNpb26UjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNc2F2ZV9wYXJhbGxlbJSJjAtuX3JlZmVyZW5jZZRLMowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNZXZhbF9mc3RyaW5nc5RoAmgGaE2GlFKUjApiYXRjaF9zaXpllEsgjAlkaW1fbXVsdHOUSwFLBEsIh5SMBmJ1Y2tldJROjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaE2GlFKULg=="
++++++++     },
++++++++     "exp_name": "diffusion/H384_T256",
++++++++     "generate_exp_name": {
++++++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++         "_type": "python_object (type = method)",
++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
+++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwIc2V0X3NlZWSUaAJoBmgKhpRSlIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MD21heF9wYXRoX2xlbmd0aJRNQJyMB25fc2F2ZXOUSzKMCmdldF9jb21taXSUaAJoBmgQhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAllbWFfZGVjYXmURz/v1wo9cKPXjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAlsb3NzX3R5cGWUjAJsMpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMC3VzZV9wYWRkaW5nlImMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAtzYW1wbGVfZnJlcZRN6AOMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoJoaUUpSMC3JlYWRfY29uZmlnlGgCaAZoKYaUUpSMDWFjdGlvbl93ZWlnaHSUSwGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAphZGRfZXh0cmFzlGgCaAZoL4aUUpSMCXNhdmVfZGlmZpRoAmgGaDKGlFKUjAxsb3NzX3dlaWdodHOUTowHbG9nYmFzZZSMBGxvZ3OUjAVta2RpcpRoAmgGaDiGlFKUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJYXR0ZW50aW9ulImMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlzYXZlX2ZyZXGUTegDjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmRldmljZZSMBGN1ZGGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlkaWZmdXNpb26UjBhtb2RlbHMuR2F1c3NpYW5EaWZmdXNpb26UjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNc2F2ZV9wYXJhbGxlbJSJjAtuX3JlZmVyZW5jZZRLMowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNZXZhbF9mc3RyaW5nc5RoAmgGaE2GlFKUjApiYXRjaF9zaXpllEsgjAlkaW1fbXVsdHOUSwFLBEsIh5SMBmJ1Y2tldJROjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaCaGlFKULg=="
++++++++     },
++++++++     "get_commit": {
++++++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++         "_type": "python_object (type = method)",
++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
+++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwIc2V0X3NlZWSUaAJoBmgKhpRSlIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MD21heF9wYXRoX2xlbmd0aJRNQJyMB25fc2F2ZXOUSzKMCmdldF9jb21taXSUaAJoBmgQhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAllbWFfZGVjYXmURz/v1wo9cKPXjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAlsb3NzX3R5cGWUjAJsMpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMC3VzZV9wYWRkaW5nlImMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAtzYW1wbGVfZnJlcZRN6AOMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoJoaUUpSMC3JlYWRfY29uZmlnlGgCaAZoKYaUUpSMDWFjdGlvbl93ZWlnaHSUSwGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAphZGRfZXh0cmFzlGgCaAZoL4aUUpSMCXNhdmVfZGlmZpRoAmgGaDKGlFKUjAxsb3NzX3dlaWdodHOUTowHbG9nYmFzZZSMBGxvZ3OUjAVta2RpcpRoAmgGaDiGlFKUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJYXR0ZW50aW9ulImMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlzYXZlX2ZyZXGUTegDjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmRldmljZZSMBGN1ZGGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlkaWZmdXNpb26UjBhtb2RlbHMuR2F1c3NpYW5EaWZmdXNpb26UjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNc2F2ZV9wYXJhbGxlbJSJjAtuX3JlZmVyZW5jZZRLMowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNZXZhbF9mc3RyaW5nc5RoAmgGaE2GlFKUjApiYXRjaF9zaXpllEsgjAlkaW1fbXVsdHOUSwFLBEsIh5SMBmJ1Y2tldJROjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaBCGlFKULg=="
++++++++     },
++++++++     "gradient_accumulate_every": 2,
++++++++     "horizon": 384,
++++++++@@ -51,12 +51,11 @@
++++++++     "mkdir": {
++++++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++         "_type": "python_object (type = method)",
++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
+++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwIc2V0X3NlZWSUaAJoBmgKhpRSlIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MD21heF9wYXRoX2xlbmd0aJRNQJyMB25fc2F2ZXOUSzKMCmdldF9jb21taXSUaAJoBmgQhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAllbWFfZGVjYXmURz/v1wo9cKPXjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAlsb3NzX3R5cGWUjAJsMpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMC3VzZV9wYWRkaW5nlImMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAtzYW1wbGVfZnJlcZRN6AOMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoJoaUUpSMC3JlYWRfY29uZmlnlGgCaAZoKYaUUpSMDWFjdGlvbl93ZWlnaHSUSwGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAphZGRfZXh0cmFzlGgCaAZoL4aUUpSMCXNhdmVfZGlmZpRoAmgGaDKGlFKUjAxsb3NzX3dlaWdodHOUTowHbG9nYmFzZZSMBGxvZ3OUjAVta2RpcpRoAmgGaDiGlFKUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJYXR0ZW50aW9ulImMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlzYXZlX2ZyZXGUTegDjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmRldmljZZSMBGN1ZGGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlkaWZmdXNpb26UjBhtb2RlbHMuR2F1c3NpYW5EaWZmdXNpb26UjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNc2F2ZV9wYXJhbGxlbJSJjAtuX3JlZmVyZW5jZZRLMowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNZXZhbF9mc3RyaW5nc5RoAmgGaE2GlFKUjApiYXRjaF9zaXpllEsgjAlkaW1fbXVsdHOUSwFLBEsIh5SMBmJ1Y2tldJROjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaDiGlFKULg=="
++++++++     },
++++++++     "model": "models.TemporalUnet",
++++++++     "n_diffusion_steps": 256,
++++++++     "n_reference": 50,
++++++++-    "n_samples": 10,
++++++++     "n_saves": 50,
++++++++     "n_steps_per_epoch": 10000,
++++++++     "n_train_steps": 2000000.0,
++++++++@@ -69,21 +68,21 @@
++++++++     "read_config": {
++++++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++         "_type": "python_object (type = method)",
++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
+++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwIc2V0X3NlZWSUaAJoBmgKhpRSlIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MD21heF9wYXRoX2xlbmd0aJRNQJyMB25fc2F2ZXOUSzKMCmdldF9jb21taXSUaAJoBmgQhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAllbWFfZGVjYXmURz/v1wo9cKPXjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAlsb3NzX3R5cGWUjAJsMpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMC3VzZV9wYWRkaW5nlImMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAtzYW1wbGVfZnJlcZRN6AOMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoJoaUUpSMC3JlYWRfY29uZmlnlGgCaAZoKYaUUpSMDWFjdGlvbl93ZWlnaHSUSwGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAphZGRfZXh0cmFzlGgCaAZoL4aUUpSMCXNhdmVfZGlmZpRoAmgGaDKGlFKUjAxsb3NzX3dlaWdodHOUTowHbG9nYmFzZZSMBGxvZ3OUjAVta2RpcpRoAmgGaDiGlFKUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJYXR0ZW50aW9ulImMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlzYXZlX2ZyZXGUTegDjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmRldmljZZSMBGN1ZGGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlkaWZmdXNpb26UjBhtb2RlbHMuR2F1c3NpYW5EaWZmdXNpb26UjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNc2F2ZV9wYXJhbGxlbJSJjAtuX3JlZmVyZW5jZZRLMowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNZXZhbF9mc3RyaW5nc5RoAmgGaE2GlFKUjApiYXRjaF9zaXpllEsgjAlkaW1fbXVsdHOUSwFLBEsIh5SMBmJ1Y2tldJROjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaCmGlFKULg=="
++++++++     },
++++++++     "renderer": "utils.Maze2dRenderer",
++++++++     "reproducibility": {
++++++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
++++++++         "git_has_uncommitted_changes": true,
++++++++         "git_root": "/home/wslabtop/project/diffuser",
++++++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
++++++++-        "time": "Fri Nov  8 09:50:02 2024"
+++++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
+++++++++        "time": "Fri Nov  8 11:48:15 2024"
++++++++     },
++++++++     "sample_freq": 1000,
++++++++     "save_diff": {
++++++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++         "_type": "python_object (type = method)",
++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
+++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwIc2V0X3NlZWSUaAJoBmgKhpRSlIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MD21heF9wYXRoX2xlbmd0aJRNQJyMB25fc2F2ZXOUSzKMCmdldF9jb21taXSUaAJoBmgQhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAllbWFfZGVjYXmURz/v1wo9cKPXjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAlsb3NzX3R5cGWUjAJsMpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMC3VzZV9wYWRkaW5nlImMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAtzYW1wbGVfZnJlcZRN6AOMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoJoaUUpSMC3JlYWRfY29uZmlnlGgCaAZoKYaUUpSMDWFjdGlvbl93ZWlnaHSUSwGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAphZGRfZXh0cmFzlGgCaAZoL4aUUpSMCXNhdmVfZGlmZpRoAmgGaDKGlFKUjAxsb3NzX3dlaWdodHOUTowHbG9nYmFzZZSMBGxvZ3OUjAVta2RpcpRoAmgGaDiGlFKUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJYXR0ZW50aW9ulImMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlzYXZlX2ZyZXGUTegDjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmRldmljZZSMBGN1ZGGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlkaWZmdXNpb26UjBhtb2RlbHMuR2F1c3NpYW5EaWZmdXNpb26UjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNc2F2ZV9wYXJhbGxlbJSJjAtuX3JlZmVyZW5jZZRLMowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNZXZhbF9mc3RyaW5nc5RoAmgGaE2GlFKUjApiYXRjaF9zaXpllEsgjAlkaW1fbXVsdHOUSwFLBEsIh5SMBmJ1Y2tldJROjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaDKGlFKULg=="
++++++++     },
++++++++     "save_freq": 1000,
++++++++     "save_parallel": false,
++++++++@@ -91,12 +90,12 @@
++++++++     "set_loadbase": {
++++++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++         "_type": "python_object (type = method)",
++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
+++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwIc2V0X3NlZWSUaAJoBmgKhpRSlIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MD21heF9wYXRoX2xlbmd0aJRNQJyMB25fc2F2ZXOUSzKMCmdldF9jb21taXSUaAJoBmgQhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAllbWFfZGVjYXmURz/v1wo9cKPXjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAlsb3NzX3R5cGWUjAJsMpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMC3VzZV9wYWRkaW5nlImMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAtzYW1wbGVfZnJlcZRN6AOMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoJoaUUpSMC3JlYWRfY29uZmlnlGgCaAZoKYaUUpSMDWFjdGlvbl93ZWlnaHSUSwGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAphZGRfZXh0cmFzlGgCaAZoL4aUUpSMCXNhdmVfZGlmZpRoAmgGaDKGlFKUjAxsb3NzX3dlaWdodHOUTowHbG9nYmFzZZSMBGxvZ3OUjAVta2RpcpRoAmgGaDiGlFKUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJYXR0ZW50aW9ulImMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlzYXZlX2ZyZXGUTegDjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmRldmljZZSMBGN1ZGGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlkaWZmdXNpb26UjBhtb2RlbHMuR2F1c3NpYW5EaWZmdXNpb26UjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNc2F2ZV9wYXJhbGxlbJSJjAtuX3JlZmVyZW5jZZRLMowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNZXZhbF9mc3RyaW5nc5RoAmgGaE2GlFKUjApiYXRjaF9zaXpllEsgjAlkaW1fbXVsdHOUSwFLBEsIh5SMBmJ1Y2tldJROjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaFiGlFKULg=="
++++++++     },
++++++++     "set_seed": {
++++++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++         "_type": "python_object (type = method)",
++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
+++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwIc2V0X3NlZWSUaAJoBmgKhpRSlIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MD21heF9wYXRoX2xlbmd0aJRNQJyMB25fc2F2ZXOUSzKMCmdldF9jb21taXSUaAJoBmgQhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAllbWFfZGVjYXmURz/v1wo9cKPXjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAlsb3NzX3R5cGWUjAJsMpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMC3VzZV9wYWRkaW5nlImMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAtzYW1wbGVfZnJlcZRN6AOMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjBFuX3N0ZXBzX3Blcl9lcG9jaJRNECeMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoJoaUUpSMC3JlYWRfY29uZmlnlGgCaAZoKYaUUpSMDWFjdGlvbl93ZWlnaHSUSwGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAphZGRfZXh0cmFzlGgCaAZoL4aUUpSMCXNhdmVfZGlmZpRoAmgGaDKGlFKUjAxsb3NzX3dlaWdodHOUTowHbG9nYmFzZZSMBGxvZ3OUjAVta2RpcpRoAmgGaDiGlFKUjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwJYXR0ZW50aW9ulImMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAlzYXZlX2ZyZXGUTegDjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmRldmljZZSMBGN1ZGGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlkaWZmdXNpb26UjBhtb2RlbHMuR2F1c3NpYW5EaWZmdXNpb26UjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNc2F2ZV9wYXJhbGxlbJSJjAtuX3JlZmVyZW5jZZRLMowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwNZXZhbF9mc3RyaW5nc5RoAmgGaE2GlFKUjApiYXRjaF9zaXpllEsgjAlkaW1fbXVsdHOUSwFLBEsIh5SMBmJ1Y2tldJROjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMD3ByZWRpY3RfZXBzaWxvbpSJjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaAqGlFKULg=="
++++++++     },
++++++++     "termination_penalty": null,
++++++++     "use_padding": false
++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++index ed9549e..4fd5e40 100644
++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++@@ -1,231 +1,2877 @@
++++++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
++++++++-index 1ad2106..5991f01 100644
++++++++---- a/diffuser/datasets/buffer.py
++++++++-+++ b/diffuser/datasets/buffer.py
++++++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
++++++++- 
++++++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
++++++++-         self._dict = {
++++++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
++++++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
++++++++-         }
++++++++-         self._count = 0
++++++++-         self.max_n_episodes = max_n_episodes
++++++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
++++++++-index 655a6f0..d5dd111 100644
++++++++---- a/diffuser/environments/registration.py
++++++++-+++ b/diffuser/environments/registration.py
++++++++-@@ -1,3 +1,5 @@
++++++++-+import sys
++++++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
++++++++- import gym
++++++++- 
++++++++- ENVIRONMENT_SPECS = (
++++++++-@@ -31,4 +33,4 @@ def register_environments():
++++++++-         return gym_ids
++++++++-     except:
++++++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
++++++++--        return tuple()
++++++++-\ No newline at end of file
++++++++-+        return tuple()
+++++++++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
+++++++++index db2afeb..ec28ee5 100644
+++++++++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
+++++++++diff --git a/config/maze2d.py b/config/maze2d.py
+++++++++index e7698af..e5ef81a 100644
+++++++++--- a/config/maze2d.py
++++++++++++ b/config/maze2d.py
+++++++++@@ -70,7 +70,6 @@ base = {
+++++++++         'n_saves': 50,
+++++++++         'save_parallel': False,
+++++++++         'n_reference': 50,
+++++++++-        'n_samples': 10,
+++++++++         'bucket': None,
+++++++++         'device': 'cuda',
+++++++++     },
+++++++++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
+++++++++index 5923eb6..276cc9d 100644
+++++++++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
++++++++ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
++++++++-index 8659ff1..d01c272 100644
+++++++++index d01c272..059fd19 100644
++++++++ --- a/diffuser/utils/rendering.py
++++++++ +++ b/diffuser/utils/rendering.py
++++++++-@@ -36,15 +36,44 @@ def env_map(env_name):
++++++++- #------------------------------ helper functions -----------------------------#
++++++++- #-----------------------------------------------------------------------------#
++++++++- 
++++++++-+def atmost_2d(x):
++++++++-+    while x.ndim > 2:
++++++++-+        x = x.squeeze(0)
++++++++-+    return x
++++++++-+
++++++++-+def zipsafe(*args):
++++++++-+    length = len(args[0])
++++++++-+    assert all([len(a) == length for a in args])
++++++++-+    return zip(*args)
++++++++-+
++++++++-+def zipkw(*args, **kwargs):
++++++++-+    nargs = len(args)
++++++++-+    keys = kwargs.keys()
++++++++-+    vals = [kwargs[k] for k in keys]
++++++++-+    zipped = zipsafe(*args, *vals)
++++++++-+    for items in zipped:
++++++++-+        zipped_args = items[:nargs]
++++++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
++++++++-+        yield zipped_args, zipped_kwargs
++++++++-+
++++++++- def get_image_mask(img):
++++++++-     background = (img == 255).all(axis=-1, keepdims=True)
++++++++-     mask = ~background.repeat(3, axis=-1)
++++++++-     return mask
++++++++- 
++++++++--def atmost_2d(x):
++++++++--    while x.ndim > 2:
++++++++--        x = x.squeeze(0)
++++++++--    return x
++++++++-+def plot2img(fig, remove_margins=True):
++++++++-+    # https://stackoverflow.com/a/35362787/2912349
++++++++-+    # https://stackoverflow.com/a/54334430/2912349
++++++++-+
++++++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
++++++++-+
++++++++-+    if remove_margins:
++++++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
++++++++-+
++++++++-+    canvas = FigureCanvasAgg(fig)
++++++++-+    canvas.draw()
++++++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
++++++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
++++++++- 
++++++++- #-----------------------------------------------------------------------------#
++++++++- #---------------------------------- renderers --------------------------------#
++++++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
++++++++-         else:
++++++++-             self.env = env
++++++++-         ## - 1 because the envs in renderer are fully-observed
++++++++-+        ## @TODO : clean up
++++++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
++++++++-         self.action_dim = np.prod(self.env.action_space.shape)
++++++++-         try:
++++++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
++++++++-     def __call__(self, *args, **kwargs):
++++++++-         return self.renders(*args, **kwargs)
+++++++++@@ -306,6 +306,7 @@ class MazeRenderer:
+++++++++             savepath : str
+++++++++             observations : [ n_paths x horizon x 2 ]
+++++++++         '''
++++++++++        ncol = max(1, min(len(paths), 4))
+++++++++         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++++++++  
++++++++-+#-----------------------------------------------------------------------------#
++++++++-+#----------------------------------- maze2d ----------------------------------#
++++++++-+#-----------------------------------------------------------------------------#
++++++++-+
++++++++-+MAZE_BOUNDS = {
++++++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
++++++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
++++++++-+    'maze2d-large-v1': (0, 9, 0, 12)
++++++++-+}
++++++++-+
++++++++-+class MazeRenderer:
++++++++-+
++++++++-+    def __init__(self, env):
++++++++-+        if type(env) is str: env = load_environment(env)
++++++++-+        self._config = env._config
++++++++-+        self._background = self._config != ' '
++++++++-+        self._remove_margins = False
++++++++-+        self._extent = (0, 1, 1, 0)
++++++++-+
++++++++-+    def renders(self, observations, conditions=None, title=None):
++++++++-+        plt.clf()
++++++++-+        fig = plt.gcf()
++++++++-+        fig.set_size_inches(5, 5)
++++++++-+        plt.imshow(self._background * .5,
++++++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
++++++++-+
++++++++-+        path_length = len(observations)
++++++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
++++++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
++++++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
++++++++-+        plt.axis('off')
++++++++-+        plt.title(title)
++++++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
++++++++-+        return img
++++++++-+
++++++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
++++++++-+        '''
++++++++-+            savepath : str
++++++++-+            observations : [ n_paths x horizon x 2 ]
++++++++-+        '''
++++++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++++++++-+
++++++++-+        images = []
++++++++-+        for path, kw in zipkw(paths, **kwargs):
++++++++-+            img = self.renders(*path, **kw)
++++++++-+            images.append(img)
++++++++-+        images = np.stack(images, axis=0)
++++++++-+
++++++++-+        nrow = len(images) // ncol
++++++++-+        images = einops.rearrange(images,
++++++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
++++++++-+        imageio.imsave(savepath, images)
++++++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
++++++++-+
++++++++-+class Maze2dRenderer(MazeRenderer):
++++++++-+
++++++++-+    def __init__(self, env, observation_dim=None):
++++++++-+        self.env_name = env
++++++++-+        self.env = load_environment(env)
++++++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
++++++++-+        self.action_dim = np.prod(self.env.action_space.shape)
++++++++-+        self.goal = None
++++++++-+        self._background = self.env.maze_arr == 10
++++++++-+        self._remove_margins = False
++++++++-+        self._extent = (0, 1, 1, 0)
++++++++-+
++++++++-+    def renders(self, observations, conditions=None, **kwargs):
++++++++-+        bounds = MAZE_BOUNDS[self.env_name]
++++++++-+
++++++++-+        observations = observations + .5
++++++++-+        if len(bounds) == 2:
++++++++-+            _, scale = bounds
++++++++-+            observations /= scale
++++++++-+        elif len(bounds) == 4:
++++++++-+            _, iscale, _, jscale = bounds
++++++++-+            observations[:, 0] /= iscale
++++++++-+            observations[:, 1] /= jscale
++++++++-+        else:
++++++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
++++++++-+
++++++++-+        if conditions is not None:
++++++++-+            conditions /= scale
++++++++-+        return super().renders(observations, conditions, **kwargs)
++++++++-+
++++++++- #-----------------------------------------------------------------------------#
++++++++- #---------------------------------- rollouts ---------------------------------#
++++++++- #-----------------------------------------------------------------------------#
++++++++-diff --git a/environment.yml b/environment.yml
++++++++-index c14a0cf..e56b6a9 100644
++++++++---- a/environment.yml
++++++++-+++ b/environment.yml
++++++++-@@ -1,4 +1,4 @@
++++++++--name: diffuser
++++++++-+name: diffuser_2
++++++++- channels:
++++++++- - defaults
++++++++- - conda-forge
++++++++-@@ -12,9 +12,7 @@ dependencies:
++++++++-     - gym==0.18.0
++++++++-     - mujoco-py==2.0.2.13
++++++++-     - matplotlib==3.3.4
++++++++--    - torch==1.9.1+cu111
++++++++-     - typed-argument-parser
++++++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
++++++++-     - scikit-image==0.17.2
++++++++-     - scikit-video==1.1.11
++++++++-     - gitpython
++++++++-@@ -31,5 +29,4 @@ dependencies:
++++++++-     - crcmod # for fast gsutil rsync on large files
++++++++-     - google-api-python-client
++++++++-     - cryptography
++++++++--    - git+https://github.com/JannerM/doodad.git@janner
++++++++-     - gdown>=4.6.0
+++++++++         images = []
+++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
+++++++++index 83efa3b..e1f501f 100644
+++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
+++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++index 9ad1dbc..f2c9ced 100644
+++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++@@ -3,13 +3,13 @@
+++++++++     "add_extras": {
+++++++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++         "_type": "python_object (type = method)",
+++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpbV9tdWx0c5RLAUsESwiHlIwNY2xpcF9kZW5vaXNlZJSIjAphZGRfZXh0cmFzlGgCaAZoC4aUUpSMB25fc2F2ZXOUSzKMCXNhdmVfZnJlcZRN6AOMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMD21heF9wYXRoX2xlbmd0aJRNQJyMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBW1rZGlylGgCaAZoFYaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMBmJ1Y2tldJROjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoHoaUUpSMB2hvcml6b26UTYABjApnZXRfY29tbWl0lGgCaAZoIoaUUpSMCXNhdmVfZGlmZpRoAmgGaCWGlFKUjAt1c2VfcGFkZGluZ5SJjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAlhdHRlbnRpb26UiYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWxvc3NfZGlzY291bnSUSwGMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjAtyZWFkX2NvbmZpZ5RoAmgGaDmGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmg+hpRSlIwKYmF0Y2hfc2l6ZZRLIIwNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhDhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBmRldmljZZSMBGN1ZGGUjAlsb3NzX3R5cGWUjAJsMpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHNldF9zZWVklGgCaAZoVoaUUpSMD3ByZWRpY3RfZXBzaWxvbpSJjAxsb3NzX3dlaWdodHOUTnViaAuGlFKULg=="
+++++++++     },
+++++++++     "attention": false,
+++++++++     "batch_size": 32,
+++++++++     "bucket": null,
+++++++++     "clip_denoised": true,
+++++++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
++++++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
+++++++++     "config": "config.maze2d",
+++++++++     "dataset": "maze2d-large-v1",
+++++++++     "device": "cuda",
+++++++++@@ -26,18 +26,18 @@
+++++++++     "eval_fstrings": {
+++++++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++         "_type": "python_object (type = method)",
+++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpbV9tdWx0c5RLAUsESwiHlIwNY2xpcF9kZW5vaXNlZJSIjAphZGRfZXh0cmFzlGgCaAZoC4aUUpSMB25fc2F2ZXOUSzKMCXNhdmVfZnJlcZRN6AOMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMD21heF9wYXRoX2xlbmd0aJRNQJyMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBW1rZGlylGgCaAZoFYaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMBmJ1Y2tldJROjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoHoaUUpSMB2hvcml6b26UTYABjApnZXRfY29tbWl0lGgCaAZoIoaUUpSMCXNhdmVfZGlmZpRoAmgGaCWGlFKUjAt1c2VfcGFkZGluZ5SJjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAlhdHRlbnRpb26UiYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWxvc3NfZGlzY291bnSUSwGMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjAtyZWFkX2NvbmZpZ5RoAmgGaDmGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmg+hpRSlIwKYmF0Y2hfc2l6ZZRLIIwNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhDhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBmRldmljZZSMBGN1ZGGUjAlsb3NzX3R5cGWUjAJsMpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHNldF9zZWVklGgCaAZoVoaUUpSMD3ByZWRpY3RfZXBzaWxvbpSJjAxsb3NzX3dlaWdodHOUTnViaB6GlFKULg=="
+++++++++     },
+++++++++     "exp_name": "diffusion/H384_T256",
+++++++++     "generate_exp_name": {
+++++++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++         "_type": "python_object (type = method)",
+++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpbV9tdWx0c5RLAUsESwiHlIwNY2xpcF9kZW5vaXNlZJSIjAphZGRfZXh0cmFzlGgCaAZoC4aUUpSMB25fc2F2ZXOUSzKMCXNhdmVfZnJlcZRN6AOMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMD21heF9wYXRoX2xlbmd0aJRNQJyMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBW1rZGlylGgCaAZoFYaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMBmJ1Y2tldJROjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoHoaUUpSMB2hvcml6b26UTYABjApnZXRfY29tbWl0lGgCaAZoIoaUUpSMCXNhdmVfZGlmZpRoAmgGaCWGlFKUjAt1c2VfcGFkZGluZ5SJjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAlhdHRlbnRpb26UiYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWxvc3NfZGlzY291bnSUSwGMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjAtyZWFkX2NvbmZpZ5RoAmgGaDmGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmg+hpRSlIwKYmF0Y2hfc2l6ZZRLIIwNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhDhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBmRldmljZZSMBGN1ZGGUjAlsb3NzX3R5cGWUjAJsMpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHNldF9zZWVklGgCaAZoVoaUUpSMD3ByZWRpY3RfZXBzaWxvbpSJjAxsb3NzX3dlaWdodHOUTnViaEOGlFKULg=="
+++++++++     },
+++++++++     "get_commit": {
+++++++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++         "_type": "python_object (type = method)",
+++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpbV9tdWx0c5RLAUsESwiHlIwNY2xpcF9kZW5vaXNlZJSIjAphZGRfZXh0cmFzlGgCaAZoC4aUUpSMB25fc2F2ZXOUSzKMCXNhdmVfZnJlcZRN6AOMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMD21heF9wYXRoX2xlbmd0aJRNQJyMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBW1rZGlylGgCaAZoFYaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMBmJ1Y2tldJROjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoHoaUUpSMB2hvcml6b26UTYABjApnZXRfY29tbWl0lGgCaAZoIoaUUpSMCXNhdmVfZGlmZpRoAmgGaCWGlFKUjAt1c2VfcGFkZGluZ5SJjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAlhdHRlbnRpb26UiYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWxvc3NfZGlzY291bnSUSwGMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjAtyZWFkX2NvbmZpZ5RoAmgGaDmGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmg+hpRSlIwKYmF0Y2hfc2l6ZZRLIIwNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhDhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBmRldmljZZSMBGN1ZGGUjAlsb3NzX3R5cGWUjAJsMpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHNldF9zZWVklGgCaAZoVoaUUpSMD3ByZWRpY3RfZXBzaWxvbpSJjAxsb3NzX3dlaWdodHOUTnViaCKGlFKULg=="
+++++++++     },
+++++++++     "gradient_accumulate_every": 2,
+++++++++     "horizon": 384,
+++++++++@@ -51,12 +51,11 @@
+++++++++     "mkdir": {
+++++++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++         "_type": "python_object (type = method)",
+++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpbV9tdWx0c5RLAUsESwiHlIwNY2xpcF9kZW5vaXNlZJSIjAphZGRfZXh0cmFzlGgCaAZoC4aUUpSMB25fc2F2ZXOUSzKMCXNhdmVfZnJlcZRN6AOMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMD21heF9wYXRoX2xlbmd0aJRNQJyMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBW1rZGlylGgCaAZoFYaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMBmJ1Y2tldJROjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoHoaUUpSMB2hvcml6b26UTYABjApnZXRfY29tbWl0lGgCaAZoIoaUUpSMCXNhdmVfZGlmZpRoAmgGaCWGlFKUjAt1c2VfcGFkZGluZ5SJjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAlhdHRlbnRpb26UiYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWxvc3NfZGlzY291bnSUSwGMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjAtyZWFkX2NvbmZpZ5RoAmgGaDmGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmg+hpRSlIwKYmF0Y2hfc2l6ZZRLIIwNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhDhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBmRldmljZZSMBGN1ZGGUjAlsb3NzX3R5cGWUjAJsMpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHNldF9zZWVklGgCaAZoVoaUUpSMD3ByZWRpY3RfZXBzaWxvbpSJjAxsb3NzX3dlaWdodHOUTnViaBWGlFKULg=="
+++++++++     },
+++++++++     "model": "models.TemporalUnet",
+++++++++     "n_diffusion_steps": 256,
+++++++++     "n_reference": 50,
+++++++++-    "n_samples": 10,
+++++++++     "n_saves": 50,
+++++++++     "n_steps_per_epoch": 10000,
+++++++++     "n_train_steps": 2000000.0,
+++++++++@@ -69,21 +68,21 @@
+++++++++     "read_config": {
+++++++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++         "_type": "python_object (type = method)",
+++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpbV9tdWx0c5RLAUsESwiHlIwNY2xpcF9kZW5vaXNlZJSIjAphZGRfZXh0cmFzlGgCaAZoC4aUUpSMB25fc2F2ZXOUSzKMCXNhdmVfZnJlcZRN6AOMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMD21heF9wYXRoX2xlbmd0aJRNQJyMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBW1rZGlylGgCaAZoFYaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMBmJ1Y2tldJROjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoHoaUUpSMB2hvcml6b26UTYABjApnZXRfY29tbWl0lGgCaAZoIoaUUpSMCXNhdmVfZGlmZpRoAmgGaCWGlFKUjAt1c2VfcGFkZGluZ5SJjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAlhdHRlbnRpb26UiYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWxvc3NfZGlzY291bnSUSwGMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjAtyZWFkX2NvbmZpZ5RoAmgGaDmGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmg+hpRSlIwKYmF0Y2hfc2l6ZZRLIIwNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhDhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBmRldmljZZSMBGN1ZGGUjAlsb3NzX3R5cGWUjAJsMpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHNldF9zZWVklGgCaAZoVoaUUpSMD3ByZWRpY3RfZXBzaWxvbpSJjAxsb3NzX3dlaWdodHOUTnViaDmGlFKULg=="
+++++++++     },
+++++++++     "renderer": "utils.Maze2dRenderer",
+++++++++     "reproducibility": {
+++++++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
+++++++++         "git_has_uncommitted_changes": true,
+++++++++         "git_root": "/home/wslabtop/project/diffuser",
+++++++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
+++++++++-        "time": "Fri Nov  8 09:50:02 2024"
++++++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
++++++++++        "time": "Fri Nov  8 11:47:04 2024"
+++++++++     },
+++++++++     "sample_freq": 1000,
+++++++++     "save_diff": {
+++++++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++         "_type": "python_object (type = method)",
+++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpbV9tdWx0c5RLAUsESwiHlIwNY2xpcF9kZW5vaXNlZJSIjAphZGRfZXh0cmFzlGgCaAZoC4aUUpSMB25fc2F2ZXOUSzKMCXNhdmVfZnJlcZRN6AOMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMD21heF9wYXRoX2xlbmd0aJRNQJyMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBW1rZGlylGgCaAZoFYaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMBmJ1Y2tldJROjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoHoaUUpSMB2hvcml6b26UTYABjApnZXRfY29tbWl0lGgCaAZoIoaUUpSMCXNhdmVfZGlmZpRoAmgGaCWGlFKUjAt1c2VfcGFkZGluZ5SJjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAlhdHRlbnRpb26UiYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWxvc3NfZGlzY291bnSUSwGMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjAtyZWFkX2NvbmZpZ5RoAmgGaDmGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmg+hpRSlIwKYmF0Y2hfc2l6ZZRLIIwNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhDhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBmRldmljZZSMBGN1ZGGUjAlsb3NzX3R5cGWUjAJsMpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHNldF9zZWVklGgCaAZoVoaUUpSMD3ByZWRpY3RfZXBzaWxvbpSJjAxsb3NzX3dlaWdodHOUTnViaCWGlFKULg=="
+++++++++     },
+++++++++     "save_freq": 1000,
+++++++++     "save_parallel": false,
+++++++++@@ -91,12 +90,12 @@
+++++++++     "set_loadbase": {
+++++++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++         "_type": "python_object (type = method)",
+++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpbV9tdWx0c5RLAUsESwiHlIwNY2xpcF9kZW5vaXNlZJSIjAphZGRfZXh0cmFzlGgCaAZoC4aUUpSMB25fc2F2ZXOUSzKMCXNhdmVfZnJlcZRN6AOMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMD21heF9wYXRoX2xlbmd0aJRNQJyMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBW1rZGlylGgCaAZoFYaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMBmJ1Y2tldJROjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoHoaUUpSMB2hvcml6b26UTYABjApnZXRfY29tbWl0lGgCaAZoIoaUUpSMCXNhdmVfZGlmZpRoAmgGaCWGlFKUjAt1c2VfcGFkZGluZ5SJjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAlhdHRlbnRpb26UiYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWxvc3NfZGlzY291bnSUSwGMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjAtyZWFkX2NvbmZpZ5RoAmgGaDmGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmg+hpRSlIwKYmF0Y2hfc2l6ZZRLIIwNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhDhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBmRldmljZZSMBGN1ZGGUjAlsb3NzX3R5cGWUjAJsMpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHNldF9zZWVklGgCaAZoVoaUUpSMD3ByZWRpY3RfZXBzaWxvbpSJjAxsb3NzX3dlaWdodHOUTnViaD6GlFKULg=="
+++++++++     },
+++++++++     "set_seed": {
+++++++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++         "_type": "python_object (type = method)",
+++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCWRpbV9tdWx0c5RLAUsESwiHlIwNY2xpcF9kZW5vaXNlZJSIjAphZGRfZXh0cmFzlGgCaAZoC4aUUpSMB25fc2F2ZXOUSzKMCXNhdmVfZnJlcZRN6AOMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMD21heF9wYXRoX2xlbmd0aJRNQJyMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMBW1rZGlylGgCaAZoFYaUUpSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMBmJ1Y2tldJROjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoHoaUUpSMB2hvcml6b26UTYABjApnZXRfY29tbWl0lGgCaAZoIoaUUpSMCXNhdmVfZGlmZpRoAmgGaCWGlFKUjAt1c2VfcGFkZGluZ5SJjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAlhdHRlbnRpb26UiYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMDWxvc3NfZGlzY291bnSUSwGMEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wTdGVybWluYXRpb25fcGVuYWx0eZROjAtyZWFkX2NvbmZpZ5RoAmgGaDmGlFKUjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAxzZXRfbG9hZGJhc2WUaAJoBmg+hpRSlIwKYmF0Y2hfc2l6ZZRLIIwNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhDhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAdsb2diYXNllIwEbG9nc5SMBmRldmljZZSMBGN1ZGGUjAlsb3NzX3R5cGWUjAJsMpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwOcHJlcHJvY2Vzc19mbnOUXZSMFG1hemUyZF9zZXRfdGVybWluYWxzlGGMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjA1zYXZlX3BhcmFsbGVslImMCHNldF9zZWVklGgCaAZoVoaUUpSMD3ByZWRpY3RfZXBzaWxvbpSJjAxsb3NzX3dlaWdodHOUTnViaFaGlFKULg=="
+++++++++     },
+++++++++     "termination_penalty": null,
+++++++++     "use_padding": false
+++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++index ed9549e..b41df3e 100644
+++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++@@ -1,231 +1,2312 @@
+++++++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
+++++++++-index 1ad2106..5991f01 100644
+++++++++---- a/diffuser/datasets/buffer.py
+++++++++-+++ b/diffuser/datasets/buffer.py
+++++++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
+++++++++- 
+++++++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
+++++++++-         self._dict = {
+++++++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
+++++++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
+++++++++-         }
+++++++++-         self._count = 0
+++++++++-         self.max_n_episodes = max_n_episodes
+++++++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
+++++++++-index 655a6f0..d5dd111 100644
+++++++++---- a/diffuser/environments/registration.py
+++++++++-+++ b/diffuser/environments/registration.py
+++++++++-@@ -1,3 +1,5 @@
+++++++++-+import sys
+++++++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
+++++++++- import gym
+++++++++- 
+++++++++- ENVIRONMENT_SPECS = (
+++++++++-@@ -31,4 +33,4 @@ def register_environments():
+++++++++-         return gym_ids
+++++++++-     except:
+++++++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
+++++++++--        return tuple()
+++++++++-\ No newline at end of file
+++++++++-+        return tuple()
++++++++++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
++++++++++index db2afeb..ec28ee5 100644
++++++++++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
++++++++++diff --git a/config/maze2d.py b/config/maze2d.py
++++++++++index e7698af..e5ef81a 100644
++++++++++--- a/config/maze2d.py
+++++++++++++ b/config/maze2d.py
++++++++++@@ -70,7 +70,6 @@ base = {
++++++++++         'n_saves': 50,
++++++++++         'save_parallel': False,
++++++++++         'n_reference': 50,
++++++++++-        'n_samples': 10,
++++++++++         'bucket': None,
++++++++++         'device': 'cuda',
++++++++++     },
++++++++++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
++++++++++index 5923eb6..8364a38 100644
++++++++++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
+++++++++ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
+++++++++-index 8659ff1..d01c272 100644
++++++++++index d01c272..f875c16 100644
+++++++++ --- a/diffuser/utils/rendering.py
+++++++++ +++ b/diffuser/utils/rendering.py
+++++++++-@@ -36,15 +36,44 @@ def env_map(env_name):
+++++++++- #------------------------------ helper functions -----------------------------#
+++++++++- #-----------------------------------------------------------------------------#
+++++++++- 
+++++++++-+def atmost_2d(x):
+++++++++-+    while x.ndim > 2:
+++++++++-+        x = x.squeeze(0)
+++++++++-+    return x
+++++++++-+
+++++++++-+def zipsafe(*args):
+++++++++-+    length = len(args[0])
+++++++++-+    assert all([len(a) == length for a in args])
+++++++++-+    return zip(*args)
+++++++++-+
+++++++++-+def zipkw(*args, **kwargs):
+++++++++-+    nargs = len(args)
+++++++++-+    keys = kwargs.keys()
+++++++++-+    vals = [kwargs[k] for k in keys]
+++++++++-+    zipped = zipsafe(*args, *vals)
+++++++++-+    for items in zipped:
+++++++++-+        zipped_args = items[:nargs]
+++++++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
+++++++++-+        yield zipped_args, zipped_kwargs
+++++++++-+
+++++++++- def get_image_mask(img):
+++++++++-     background = (img == 255).all(axis=-1, keepdims=True)
+++++++++-     mask = ~background.repeat(3, axis=-1)
+++++++++-     return mask
+++++++++- 
+++++++++--def atmost_2d(x):
+++++++++--    while x.ndim > 2:
+++++++++--        x = x.squeeze(0)
+++++++++--    return x
+++++++++-+def plot2img(fig, remove_margins=True):
+++++++++-+    # https://stackoverflow.com/a/35362787/2912349
+++++++++-+    # https://stackoverflow.com/a/54334430/2912349
+++++++++-+
+++++++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
+++++++++-+
+++++++++-+    if remove_margins:
+++++++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
+++++++++-+
+++++++++-+    canvas = FigureCanvasAgg(fig)
+++++++++-+    canvas.draw()
+++++++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
+++++++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
+++++++++- 
+++++++++- #-----------------------------------------------------------------------------#
+++++++++- #---------------------------------- renderers --------------------------------#
+++++++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
+++++++++-         else:
+++++++++-             self.env = env
+++++++++-         ## - 1 because the envs in renderer are fully-observed
+++++++++-+        ## @TODO : clean up
+++++++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
+++++++++-         self.action_dim = np.prod(self.env.action_space.shape)
+++++++++-         try:
+++++++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
+++++++++-     def __call__(self, *args, **kwargs):
+++++++++-         return self.renders(*args, **kwargs)
++++++++++@@ -306,6 +306,7 @@ class MazeRenderer:
++++++++++             savepath : str
++++++++++             observations : [ n_paths x horizon x 2 ]
++++++++++         '''
+++++++++++        ncol = max(1, min(len(paths), 3))
++++++++++         assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++++++++  
+++++++++-+#-----------------------------------------------------------------------------#
+++++++++-+#----------------------------------- maze2d ----------------------------------#
+++++++++-+#-----------------------------------------------------------------------------#
+++++++++-+
+++++++++-+MAZE_BOUNDS = {
+++++++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
+++++++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
+++++++++-+    'maze2d-large-v1': (0, 9, 0, 12)
+++++++++-+}
+++++++++-+
+++++++++-+class MazeRenderer:
+++++++++-+
+++++++++-+    def __init__(self, env):
+++++++++-+        if type(env) is str: env = load_environment(env)
+++++++++-+        self._config = env._config
+++++++++-+        self._background = self._config != ' '
+++++++++-+        self._remove_margins = False
+++++++++-+        self._extent = (0, 1, 1, 0)
+++++++++-+
+++++++++-+    def renders(self, observations, conditions=None, title=None):
+++++++++-+        plt.clf()
+++++++++-+        fig = plt.gcf()
+++++++++-+        fig.set_size_inches(5, 5)
+++++++++-+        plt.imshow(self._background * .5,
+++++++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
+++++++++-+
+++++++++-+        path_length = len(observations)
+++++++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
+++++++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
+++++++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
+++++++++-+        plt.axis('off')
+++++++++-+        plt.title(title)
+++++++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
+++++++++-+        return img
+++++++++-+
+++++++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
+++++++++-+        '''
+++++++++-+            savepath : str
+++++++++-+            observations : [ n_paths x horizon x 2 ]
+++++++++-+        '''
+++++++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++++++++-+
+++++++++-+        images = []
+++++++++-+        for path, kw in zipkw(paths, **kwargs):
+++++++++-+            img = self.renders(*path, **kw)
+++++++++-+            images.append(img)
+++++++++-+        images = np.stack(images, axis=0)
+++++++++-+
+++++++++-+        nrow = len(images) // ncol
+++++++++-+        images = einops.rearrange(images,
+++++++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
+++++++++-+        imageio.imsave(savepath, images)
+++++++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
+++++++++-+
+++++++++-+class Maze2dRenderer(MazeRenderer):
+++++++++-+
+++++++++-+    def __init__(self, env, observation_dim=None):
+++++++++-+        self.env_name = env
+++++++++-+        self.env = load_environment(env)
+++++++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
+++++++++-+        self.action_dim = np.prod(self.env.action_space.shape)
+++++++++-+        self.goal = None
+++++++++-+        self._background = self.env.maze_arr == 10
+++++++++-+        self._remove_margins = False
+++++++++-+        self._extent = (0, 1, 1, 0)
+++++++++-+
+++++++++-+    def renders(self, observations, conditions=None, **kwargs):
+++++++++-+        bounds = MAZE_BOUNDS[self.env_name]
+++++++++-+
+++++++++-+        observations = observations + .5
+++++++++-+        if len(bounds) == 2:
+++++++++-+            _, scale = bounds
+++++++++-+            observations /= scale
+++++++++-+        elif len(bounds) == 4:
+++++++++-+            _, iscale, _, jscale = bounds
+++++++++-+            observations[:, 0] /= iscale
+++++++++-+            observations[:, 1] /= jscale
+++++++++-+        else:
+++++++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
+++++++++-+
+++++++++-+        if conditions is not None:
+++++++++-+            conditions /= scale
+++++++++-+        return super().renders(observations, conditions, **kwargs)
+++++++++-+
+++++++++- #-----------------------------------------------------------------------------#
+++++++++- #---------------------------------- rollouts ---------------------------------#
+++++++++- #-----------------------------------------------------------------------------#
+++++++++-diff --git a/environment.yml b/environment.yml
+++++++++-index c14a0cf..e56b6a9 100644
+++++++++---- a/environment.yml
+++++++++-+++ b/environment.yml
+++++++++-@@ -1,4 +1,4 @@
+++++++++--name: diffuser
+++++++++-+name: diffuser_2
+++++++++- channels:
+++++++++- - defaults
+++++++++- - conda-forge
+++++++++-@@ -12,9 +12,7 @@ dependencies:
+++++++++-     - gym==0.18.0
+++++++++-     - mujoco-py==2.0.2.13
+++++++++-     - matplotlib==3.3.4
+++++++++--    - torch==1.9.1+cu111
+++++++++-     - typed-argument-parser
+++++++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
+++++++++-     - scikit-image==0.17.2
+++++++++-     - scikit-video==1.1.11
+++++++++-     - gitpython
+++++++++-@@ -31,5 +29,4 @@ dependencies:
+++++++++-     - crcmod # for fast gsutil rsync on large files
+++++++++-     - google-api-python-client
+++++++++-     - cryptography
+++++++++--    - git+https://github.com/JannerM/doodad.git@janner
+++++++++-     - gdown>=4.6.0
++++++++++         images = []
++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
++++++++++index 83efa3b..e1f501f 100644
++++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++index 9ad1dbc..da0705f 100644
++++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++@@ -3,13 +3,13 @@
++++++++++     "add_extras": {
++++++++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++         "_type": "python_object (type = method)",
++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
+++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWFjdGlvbl93ZWlnaHSUSwGMDXNhdmVfcGFyYWxsZWyUiYwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJc2F2ZV9kaWZmlGgCaAZoDYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMC3NhbXBsZV9mcmVxlE3oA4wHbG9nYmFzZZSMBGxvZ3OUjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZkZXZpY2WUjARjdWRhlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAxsb3NzX3dlaWdodHOUTowPcHJlZGljdF9lcHNpbG9ulImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwNY2xpcF9kZW5vaXNlZJSIjAVta2RpcpRoAmgGaCWGlFKUjAhzZXRfc2VlZJRoAmgGaCiGlFKUjAduX3NhdmVzlEsyjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwLdXNlX3BhZGRpbmeUiYwGYnVja2V0lE6MEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wJYXR0ZW50aW9ulImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAtuX3JlZmVyZW5jZZRLMowJc2F2ZV9mcmVxlE3oA4wJbG9zc190eXBllIwCbDKUjAphZGRfZXh0cmFzlGgCaAZoP4aUUpSMCWRpbV9tdWx0c5RLAUsESwiHlIwNbG9zc19kaXNjb3VudJRLAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEWGlFKUjAdob3Jpem9ulE2AAYwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLcmVhZF9jb25maWeUaAJoBmhLhpRSlIwGcHJlZml4lIwKZGlmZnVzaW9uL5SMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoUIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjApnZXRfY29tbWl0lGgCaAZoVYaUUpSMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulHViaD+GlFKULg=="
++++++++++     },
++++++++++     "attention": false,
++++++++++     "batch_size": 32,
++++++++++     "bucket": null,
++++++++++     "clip_denoised": true,
++++++++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
+++++++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
++++++++++     "config": "config.maze2d",
++++++++++     "dataset": "maze2d-large-v1",
++++++++++     "device": "cuda",
++++++++++@@ -26,18 +26,18 @@
++++++++++     "eval_fstrings": {
++++++++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++         "_type": "python_object (type = method)",
++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
+++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWFjdGlvbl93ZWlnaHSUSwGMDXNhdmVfcGFyYWxsZWyUiYwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJc2F2ZV9kaWZmlGgCaAZoDYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMC3NhbXBsZV9mcmVxlE3oA4wHbG9nYmFzZZSMBGxvZ3OUjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZkZXZpY2WUjARjdWRhlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAxsb3NzX3dlaWdodHOUTowPcHJlZGljdF9lcHNpbG9ulImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwNY2xpcF9kZW5vaXNlZJSIjAVta2RpcpRoAmgGaCWGlFKUjAhzZXRfc2VlZJRoAmgGaCiGlFKUjAduX3NhdmVzlEsyjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwLdXNlX3BhZGRpbmeUiYwGYnVja2V0lE6MEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wJYXR0ZW50aW9ulImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAtuX3JlZmVyZW5jZZRLMowJc2F2ZV9mcmVxlE3oA4wJbG9zc190eXBllIwCbDKUjAphZGRfZXh0cmFzlGgCaAZoP4aUUpSMCWRpbV9tdWx0c5RLAUsESwiHlIwNbG9zc19kaXNjb3VudJRLAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEWGlFKUjAdob3Jpem9ulE2AAYwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLcmVhZF9jb25maWeUaAJoBmhLhpRSlIwGcHJlZml4lIwKZGlmZnVzaW9uL5SMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoUIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjApnZXRfY29tbWl0lGgCaAZoVYaUUpSMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulHViaEWGlFKULg=="
++++++++++     },
++++++++++     "exp_name": "diffusion/H384_T256",
++++++++++     "generate_exp_name": {
++++++++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++         "_type": "python_object (type = method)",
++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
+++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWFjdGlvbl93ZWlnaHSUSwGMDXNhdmVfcGFyYWxsZWyUiYwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJc2F2ZV9kaWZmlGgCaAZoDYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMC3NhbXBsZV9mcmVxlE3oA4wHbG9nYmFzZZSMBGxvZ3OUjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZkZXZpY2WUjARjdWRhlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAxsb3NzX3dlaWdodHOUTowPcHJlZGljdF9lcHNpbG9ulImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwNY2xpcF9kZW5vaXNlZJSIjAVta2RpcpRoAmgGaCWGlFKUjAhzZXRfc2VlZJRoAmgGaCiGlFKUjAduX3NhdmVzlEsyjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwLdXNlX3BhZGRpbmeUiYwGYnVja2V0lE6MEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wJYXR0ZW50aW9ulImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAtuX3JlZmVyZW5jZZRLMowJc2F2ZV9mcmVxlE3oA4wJbG9zc190eXBllIwCbDKUjAphZGRfZXh0cmFzlGgCaAZoP4aUUpSMCWRpbV9tdWx0c5RLAUsESwiHlIwNbG9zc19kaXNjb3VudJRLAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEWGlFKUjAdob3Jpem9ulE2AAYwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLcmVhZF9jb25maWeUaAJoBmhLhpRSlIwGcHJlZml4lIwKZGlmZnVzaW9uL5SMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoUIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjApnZXRfY29tbWl0lGgCaAZoVYaUUpSMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulHViaFCGlFKULg=="
++++++++++     },
++++++++++     "get_commit": {
++++++++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++         "_type": "python_object (type = method)",
++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
+++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWFjdGlvbl93ZWlnaHSUSwGMDXNhdmVfcGFyYWxsZWyUiYwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJc2F2ZV9kaWZmlGgCaAZoDYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMC3NhbXBsZV9mcmVxlE3oA4wHbG9nYmFzZZSMBGxvZ3OUjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZkZXZpY2WUjARjdWRhlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAxsb3NzX3dlaWdodHOUTowPcHJlZGljdF9lcHNpbG9ulImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwNY2xpcF9kZW5vaXNlZJSIjAVta2RpcpRoAmgGaCWGlFKUjAhzZXRfc2VlZJRoAmgGaCiGlFKUjAduX3NhdmVzlEsyjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwLdXNlX3BhZGRpbmeUiYwGYnVja2V0lE6MEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wJYXR0ZW50aW9ulImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAtuX3JlZmVyZW5jZZRLMowJc2F2ZV9mcmVxlE3oA4wJbG9zc190eXBllIwCbDKUjAphZGRfZXh0cmFzlGgCaAZoP4aUUpSMCWRpbV9tdWx0c5RLAUsESwiHlIwNbG9zc19kaXNjb3VudJRLAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEWGlFKUjAdob3Jpem9ulE2AAYwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLcmVhZF9jb25maWeUaAJoBmhLhpRSlIwGcHJlZml4lIwKZGlmZnVzaW9uL5SMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoUIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjApnZXRfY29tbWl0lGgCaAZoVYaUUpSMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulHViaFWGlFKULg=="
++++++++++     },
++++++++++     "gradient_accumulate_every": 2,
++++++++++     "horizon": 384,
++++++++++@@ -51,12 +51,11 @@
++++++++++     "mkdir": {
++++++++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++         "_type": "python_object (type = method)",
++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
+++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWFjdGlvbl93ZWlnaHSUSwGMDXNhdmVfcGFyYWxsZWyUiYwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJc2F2ZV9kaWZmlGgCaAZoDYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMC3NhbXBsZV9mcmVxlE3oA4wHbG9nYmFzZZSMBGxvZ3OUjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZkZXZpY2WUjARjdWRhlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAxsb3NzX3dlaWdodHOUTowPcHJlZGljdF9lcHNpbG9ulImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwNY2xpcF9kZW5vaXNlZJSIjAVta2RpcpRoAmgGaCWGlFKUjAhzZXRfc2VlZJRoAmgGaCiGlFKUjAduX3NhdmVzlEsyjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwLdXNlX3BhZGRpbmeUiYwGYnVja2V0lE6MEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wJYXR0ZW50aW9ulImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAtuX3JlZmVyZW5jZZRLMowJc2F2ZV9mcmVxlE3oA4wJbG9zc190eXBllIwCbDKUjAphZGRfZXh0cmFzlGgCaAZoP4aUUpSMCWRpbV9tdWx0c5RLAUsESwiHlIwNbG9zc19kaXNjb3VudJRLAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEWGlFKUjAdob3Jpem9ulE2AAYwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLcmVhZF9jb25maWeUaAJoBmhLhpRSlIwGcHJlZml4lIwKZGlmZnVzaW9uL5SMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoUIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjApnZXRfY29tbWl0lGgCaAZoVYaUUpSMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulHViaCWGlFKULg=="
++++++++++     },
++++++++++     "model": "models.TemporalUnet",
++++++++++     "n_diffusion_steps": 256,
++++++++++     "n_reference": 50,
++++++++++-    "n_samples": 10,
++++++++++     "n_saves": 50,
++++++++++     "n_steps_per_epoch": 10000,
++++++++++     "n_train_steps": 2000000.0,
++++++++++@@ -69,21 +68,21 @@
++++++++++     "read_config": {
++++++++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++         "_type": "python_object (type = method)",
++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
+++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWFjdGlvbl93ZWlnaHSUSwGMDXNhdmVfcGFyYWxsZWyUiYwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJc2F2ZV9kaWZmlGgCaAZoDYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMC3NhbXBsZV9mcmVxlE3oA4wHbG9nYmFzZZSMBGxvZ3OUjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZkZXZpY2WUjARjdWRhlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAxsb3NzX3dlaWdodHOUTowPcHJlZGljdF9lcHNpbG9ulImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwNY2xpcF9kZW5vaXNlZJSIjAVta2RpcpRoAmgGaCWGlFKUjAhzZXRfc2VlZJRoAmgGaCiGlFKUjAduX3NhdmVzlEsyjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwLdXNlX3BhZGRpbmeUiYwGYnVja2V0lE6MEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wJYXR0ZW50aW9ulImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAtuX3JlZmVyZW5jZZRLMowJc2F2ZV9mcmVxlE3oA4wJbG9zc190eXBllIwCbDKUjAphZGRfZXh0cmFzlGgCaAZoP4aUUpSMCWRpbV9tdWx0c5RLAUsESwiHlIwNbG9zc19kaXNjb3VudJRLAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEWGlFKUjAdob3Jpem9ulE2AAYwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLcmVhZF9jb25maWeUaAJoBmhLhpRSlIwGcHJlZml4lIwKZGlmZnVzaW9uL5SMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoUIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjApnZXRfY29tbWl0lGgCaAZoVYaUUpSMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulHViaEuGlFKULg=="
++++++++++     },
++++++++++     "renderer": "utils.Maze2dRenderer",
++++++++++     "reproducibility": {
++++++++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
++++++++++         "git_has_uncommitted_changes": true,
++++++++++         "git_root": "/home/wslabtop/project/diffuser",
++++++++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
++++++++++-        "time": "Fri Nov  8 09:50:02 2024"
+++++++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
+++++++++++        "time": "Fri Nov  8 11:46:45 2024"
++++++++++     },
++++++++++     "sample_freq": 1000,
++++++++++     "save_diff": {
++++++++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++         "_type": "python_object (type = method)",
++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
+++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWFjdGlvbl93ZWlnaHSUSwGMDXNhdmVfcGFyYWxsZWyUiYwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJc2F2ZV9kaWZmlGgCaAZoDYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMC3NhbXBsZV9mcmVxlE3oA4wHbG9nYmFzZZSMBGxvZ3OUjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZkZXZpY2WUjARjdWRhlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAxsb3NzX3dlaWdodHOUTowPcHJlZGljdF9lcHNpbG9ulImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwNY2xpcF9kZW5vaXNlZJSIjAVta2RpcpRoAmgGaCWGlFKUjAhzZXRfc2VlZJRoAmgGaCiGlFKUjAduX3NhdmVzlEsyjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwLdXNlX3BhZGRpbmeUiYwGYnVja2V0lE6MEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wJYXR0ZW50aW9ulImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAtuX3JlZmVyZW5jZZRLMowJc2F2ZV9mcmVxlE3oA4wJbG9zc190eXBllIwCbDKUjAphZGRfZXh0cmFzlGgCaAZoP4aUUpSMCWRpbV9tdWx0c5RLAUsESwiHlIwNbG9zc19kaXNjb3VudJRLAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEWGlFKUjAdob3Jpem9ulE2AAYwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLcmVhZF9jb25maWeUaAJoBmhLhpRSlIwGcHJlZml4lIwKZGlmZnVzaW9uL5SMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoUIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjApnZXRfY29tbWl0lGgCaAZoVYaUUpSMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulHViaA2GlFKULg=="
++++++++++     },
++++++++++     "save_freq": 1000,
++++++++++     "save_parallel": false,
++++++++++@@ -91,12 +90,12 @@
++++++++++     "set_loadbase": {
++++++++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++         "_type": "python_object (type = method)",
++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
+++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWFjdGlvbl93ZWlnaHSUSwGMDXNhdmVfcGFyYWxsZWyUiYwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJc2F2ZV9kaWZmlGgCaAZoDYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMC3NhbXBsZV9mcmVxlE3oA4wHbG9nYmFzZZSMBGxvZ3OUjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZkZXZpY2WUjARjdWRhlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAxsb3NzX3dlaWdodHOUTowPcHJlZGljdF9lcHNpbG9ulImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwNY2xpcF9kZW5vaXNlZJSIjAVta2RpcpRoAmgGaCWGlFKUjAhzZXRfc2VlZJRoAmgGaCiGlFKUjAduX3NhdmVzlEsyjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwLdXNlX3BhZGRpbmeUiYwGYnVja2V0lE6MEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wJYXR0ZW50aW9ulImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAtuX3JlZmVyZW5jZZRLMowJc2F2ZV9mcmVxlE3oA4wJbG9zc190eXBllIwCbDKUjAphZGRfZXh0cmFzlGgCaAZoP4aUUpSMCWRpbV9tdWx0c5RLAUsESwiHlIwNbG9zc19kaXNjb3VudJRLAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEWGlFKUjAdob3Jpem9ulE2AAYwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLcmVhZF9jb25maWeUaAJoBmhLhpRSlIwGcHJlZml4lIwKZGlmZnVzaW9uL5SMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoUIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjApnZXRfY29tbWl0lGgCaAZoVYaUUpSMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulHViaCyGlFKULg=="
++++++++++     },
++++++++++     "set_seed": {
++++++++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++         "_type": "python_object (type = method)",
++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
+++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWFjdGlvbl93ZWlnaHSUSwGMDXNhdmVfcGFyYWxsZWyUiYwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwPbWF4X3BhdGhfbGVuZ3RolE1AnIwJc2F2ZV9kaWZmlGgCaAZoDYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMC3NhbXBsZV9mcmVxlE3oA4wHbG9nYmFzZZSMBGxvZ3OUjAdkYXRhc2V0lIwPbWF6ZTJkLWxhcmdlLXYxlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAZkZXZpY2WUjARjdWRhlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwJZW1hX2RlY2F5lEc/79cKPXCj14wFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwKbm9ybWFsaXplcpSMEExpbWl0c05vcm1hbGl6ZXKUjAxsb3NzX3dlaWdodHOUTowPcHJlZGljdF9lcHNpbG9ulImMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwNY2xpcF9kZW5vaXNlZJSIjAVta2RpcpRoAmgGaCWGlFKUjAhzZXRfc2VlZJRoAmgGaCiGlFKUjAduX3NhdmVzlEsyjAxzZXRfbG9hZGJhc2WUaAJoBmgshpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwKYmF0Y2hfc2l6ZZRLIIwLdXNlX3BhZGRpbmeUiYwGYnVja2V0lE6MEW5fc3RlcHNfcGVyX2Vwb2NolE0QJ4wJYXR0ZW50aW9ulImMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAtuX3JlZmVyZW5jZZRLMowJc2F2ZV9mcmVxlE3oA4wJbG9zc190eXBllIwCbDKUjAphZGRfZXh0cmFzlGgCaAZoP4aUUpSMCWRpbV9tdWx0c5RLAUsESwiHlIwNbG9zc19kaXNjb3VudJRLAYwNZXZhbF9mc3RyaW5nc5RoAmgGaEWGlFKUjAdob3Jpem9ulE2AAYwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLcmVhZF9jb25maWeUaAJoBmhLhpRSlIwGcHJlZml4lIwKZGlmZnVzaW9uL5SMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoUIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjApnZXRfY29tbWl0lGgCaAZoVYaUUpSMEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulHViaCiGlFKULg=="
++++++++++     },
++++++++++     "termination_penalty": null,
++++++++++     "use_padding": false
++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++++index ed9549e..ae1f482 100644
++++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++++@@ -1,231 +1,1747 @@
++++++++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
++++++++++-index 1ad2106..5991f01 100644
++++++++++---- a/diffuser/datasets/buffer.py
++++++++++-+++ b/diffuser/datasets/buffer.py
++++++++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
++++++++++- 
++++++++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
++++++++++-         self._dict = {
++++++++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
++++++++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
++++++++++-         }
++++++++++-         self._count = 0
++++++++++-         self.max_n_episodes = max_n_episodes
++++++++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
++++++++++-index 655a6f0..d5dd111 100644
++++++++++---- a/diffuser/environments/registration.py
++++++++++-+++ b/diffuser/environments/registration.py
++++++++++-@@ -1,3 +1,5 @@
++++++++++-+import sys
++++++++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
++++++++++- import gym
++++++++++- 
++++++++++- ENVIRONMENT_SPECS = (
++++++++++-@@ -31,4 +33,4 @@ def register_environments():
++++++++++-         return gym_ids
++++++++++-     except:
++++++++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
++++++++++--        return tuple()
++++++++++-\ No newline at end of file
++++++++++-+        return tuple()
+++++++++++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
+++++++++++index db2afeb..ec28ee5 100644
+++++++++++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
+++++++++++diff --git a/config/maze2d.py b/config/maze2d.py
+++++++++++index e7698af..e5ef81a 100644
+++++++++++--- a/config/maze2d.py
++++++++++++++ b/config/maze2d.py
+++++++++++@@ -70,7 +70,6 @@ base = {
+++++++++++         'n_saves': 50,
+++++++++++         'save_parallel': False,
+++++++++++         'n_reference': 50,
+++++++++++-        'n_samples': 10,
+++++++++++         'bucket': None,
+++++++++++         'device': 'cuda',
+++++++++++     },
+++++++++++diff --git a/diffuser/utils/__pycache__/rendering.cpython-38.pyc b/diffuser/utils/__pycache__/rendering.cpython-38.pyc
+++++++++++index 5923eb6..3c0ebab 100644
+++++++++++Binary files a/diffuser/utils/__pycache__/rendering.cpython-38.pyc and b/diffuser/utils/__pycache__/rendering.cpython-38.pyc differ
++++++++++ diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
++++++++++-index 8659ff1..d01c272 100644
+++++++++++index d01c272..ce2a5dc 100644
++++++++++ --- a/diffuser/utils/rendering.py
++++++++++ +++ b/diffuser/utils/rendering.py
++++++++++-@@ -36,15 +36,44 @@ def env_map(env_name):
++++++++++- #------------------------------ helper functions -----------------------------#
++++++++++- #-----------------------------------------------------------------------------#
++++++++++- 
++++++++++-+def atmost_2d(x):
++++++++++-+    while x.ndim > 2:
++++++++++-+        x = x.squeeze(0)
++++++++++-+    return x
++++++++++-+
++++++++++-+def zipsafe(*args):
++++++++++-+    length = len(args[0])
++++++++++-+    assert all([len(a) == length for a in args])
++++++++++-+    return zip(*args)
++++++++++-+
++++++++++-+def zipkw(*args, **kwargs):
++++++++++-+    nargs = len(args)
++++++++++-+    keys = kwargs.keys()
++++++++++-+    vals = [kwargs[k] for k in keys]
++++++++++-+    zipped = zipsafe(*args, *vals)
++++++++++-+    for items in zipped:
++++++++++-+        zipped_args = items[:nargs]
++++++++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
++++++++++-+        yield zipped_args, zipped_kwargs
++++++++++-+
++++++++++- def get_image_mask(img):
++++++++++-     background = (img == 255).all(axis=-1, keepdims=True)
++++++++++-     mask = ~background.repeat(3, axis=-1)
++++++++++-     return mask
++++++++++- 
++++++++++--def atmost_2d(x):
++++++++++--    while x.ndim > 2:
++++++++++--        x = x.squeeze(0)
++++++++++--    return x
++++++++++-+def plot2img(fig, remove_margins=True):
++++++++++-+    # https://stackoverflow.com/a/35362787/2912349
++++++++++-+    # https://stackoverflow.com/a/54334430/2912349
++++++++++-+
++++++++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
++++++++++-+
++++++++++-+    if remove_margins:
++++++++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
++++++++++-+
++++++++++-+    canvas = FigureCanvasAgg(fig)
++++++++++-+    canvas.draw()
++++++++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
++++++++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
++++++++++- 
++++++++++- #-----------------------------------------------------------------------------#
++++++++++- #---------------------------------- renderers --------------------------------#
++++++++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
++++++++++-         else:
++++++++++-             self.env = env
++++++++++-         ## - 1 because the envs in renderer are fully-observed
++++++++++-+        ## @TODO : clean up
++++++++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
++++++++++-         self.action_dim = np.prod(self.env.action_space.shape)
++++++++++-         try:
++++++++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
++++++++++-     def __call__(self, *args, **kwargs):
++++++++++-         return self.renders(*args, **kwargs)
+++++++++++@@ -301,7 +301,7 @@ class MazeRenderer:
+++++++++++         img = plot2img(fig, remove_margins=self._remove_margins)
+++++++++++         return img
++++++++++  
++++++++++-+#-----------------------------------------------------------------------------#
++++++++++-+#----------------------------------- maze2d ----------------------------------#
++++++++++-+#-----------------------------------------------------------------------------#
++++++++++-+
++++++++++-+MAZE_BOUNDS = {
++++++++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
++++++++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
++++++++++-+    'maze2d-large-v1': (0, 9, 0, 12)
++++++++++-+}
++++++++++-+
++++++++++-+class MazeRenderer:
++++++++++-+
++++++++++-+    def __init__(self, env):
++++++++++-+        if type(env) is str: env = load_environment(env)
++++++++++-+        self._config = env._config
++++++++++-+        self._background = self._config != ' '
++++++++++-+        self._remove_margins = False
++++++++++-+        self._extent = (0, 1, 1, 0)
++++++++++-+
++++++++++-+    def renders(self, observations, conditions=None, title=None):
++++++++++-+        plt.clf()
++++++++++-+        fig = plt.gcf()
++++++++++-+        fig.set_size_inches(5, 5)
++++++++++-+        plt.imshow(self._background * .5,
++++++++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
++++++++++-+
++++++++++-+        path_length = len(observations)
++++++++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
++++++++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
++++++++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
++++++++++-+        plt.axis('off')
++++++++++-+        plt.title(title)
++++++++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
++++++++++-+        return img
++++++++++-+
++++++++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
++++++++++-+        '''
++++++++++-+            savepath : str
++++++++++-+            observations : [ n_paths x horizon x 2 ]
++++++++++-+        '''
++++++++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++++++++++-+
++++++++++-+        images = []
++++++++++-+        for path, kw in zipkw(paths, **kwargs):
++++++++++-+            img = self.renders(*path, **kw)
++++++++++-+            images.append(img)
++++++++++-+        images = np.stack(images, axis=0)
++++++++++-+
++++++++++-+        nrow = len(images) // ncol
++++++++++-+        images = einops.rearrange(images,
++++++++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
++++++++++-+        imageio.imsave(savepath, images)
++++++++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
++++++++++-+
++++++++++-+class Maze2dRenderer(MazeRenderer):
++++++++++-+
++++++++++-+    def __init__(self, env, observation_dim=None):
++++++++++-+        self.env_name = env
++++++++++-+        self.env = load_environment(env)
++++++++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
++++++++++-+        self.action_dim = np.prod(self.env.action_space.shape)
++++++++++-+        self.goal = None
++++++++++-+        self._background = self.env.maze_arr == 10
++++++++++-+        self._remove_margins = False
++++++++++-+        self._extent = (0, 1, 1, 0)
++++++++++-+
++++++++++-+    def renders(self, observations, conditions=None, **kwargs):
++++++++++-+        bounds = MAZE_BOUNDS[self.env_name]
++++++++++-+
++++++++++-+        observations = observations + .5
++++++++++-+        if len(bounds) == 2:
++++++++++-+            _, scale = bounds
++++++++++-+            observations /= scale
++++++++++-+        elif len(bounds) == 4:
++++++++++-+            _, iscale, _, jscale = bounds
++++++++++-+            observations[:, 0] /= iscale
++++++++++-+            observations[:, 1] /= jscale
++++++++++-+        else:
++++++++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
++++++++++-+
++++++++++-+        if conditions is not None:
++++++++++-+            conditions /= scale
++++++++++-+        return super().renders(observations, conditions, **kwargs)
++++++++++-+
++++++++++- #-----------------------------------------------------------------------------#
++++++++++- #---------------------------------- rollouts ---------------------------------#
++++++++++- #-----------------------------------------------------------------------------#
++++++++++-diff --git a/environment.yml b/environment.yml
++++++++++-index c14a0cf..e56b6a9 100644
++++++++++---- a/environment.yml
++++++++++-+++ b/environment.yml
++++++++++-@@ -1,4 +1,4 @@
++++++++++--name: diffuser
++++++++++-+name: diffuser_2
++++++++++- channels:
++++++++++- - defaults
++++++++++- - conda-forge
++++++++++-@@ -12,9 +12,7 @@ dependencies:
++++++++++-     - gym==0.18.0
++++++++++-     - mujoco-py==2.0.2.13
++++++++++-     - matplotlib==3.3.4
++++++++++--    - torch==1.9.1+cu111
++++++++++-     - typed-argument-parser
++++++++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
++++++++++-     - scikit-image==0.17.2
++++++++++-     - scikit-video==1.1.11
++++++++++-     - gitpython
++++++++++-@@ -31,5 +29,4 @@ dependencies:
++++++++++-     - crcmod # for fast gsutil rsync on large files
++++++++++-     - google-api-python-client
++++++++++-     - cryptography
++++++++++--    - git+https://github.com/JannerM/doodad.git@janner
++++++++++-     - gdown>=4.6.0
+++++++++++-    def composite(self, savepath, paths, ncol=5, **kwargs):
++++++++++++    def composite(self, savepath, paths, ncol=9, **kwargs):
+++++++++++         '''
+++++++++++             savepath : str
+++++++++++             observations : [ n_paths x horizon x 2 ]
+++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
+++++++++++index 83efa3b..e1f501f 100644
+++++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
+++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++++index 9ad1dbc..4bbd993 100644
+++++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++++@@ -3,13 +3,13 @@
+++++++++++     "add_extras": {
+++++++++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++         "_type": "python_object (type = method)",
+++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAllbWFfZGVjYXmURz/v1wo9cKPXjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHbl9zYXZlc5RLMowPbWF4X3BhdGhfbGVuZ3RolE1AnIwHbG9nYmFzZZSMBGxvZ3OUjAlsb3NzX3R5cGWUjAJsMpSMDWxvc3NfZGlzY291bnSUSwGMCHNldF9zZWVklGgCaAZoFIaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1jbGlwX2Rlbm9pc2VklIiMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbWtkaXKUaAJoBmghhpRSlIwHaG9yaXpvbpRNgAGME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowGZGV2aWNllIwEY3VkYZSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlzYXZlX2ZyZXGUTegDjA9wcmVkaWN0X2Vwc2lsb26UiYwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLc2FtcGxlX2ZyZXGUTegDjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWV2YWxfZnN0cmluZ3OUaAJoBmg3hpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAlzYXZlX2RpZmaUaAJoBmhBhpRSlIwJYXR0ZW50aW9ulImMDGxvc3Nfd2VpZ2h0c5ROjA1hY3Rpb25fd2VpZ2h0lEsBjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoSoaUUpSMCmdldF9jb21taXSUaAJoBmhNhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaD6GlFKULg=="
+++++++++++     },
+++++++++++     "attention": false,
+++++++++++     "batch_size": 32,
+++++++++++     "bucket": null,
+++++++++++     "clip_denoised": true,
+++++++++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
++++++++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
+++++++++++     "config": "config.maze2d",
+++++++++++     "dataset": "maze2d-large-v1",
+++++++++++     "device": "cuda",
+++++++++++@@ -26,18 +26,18 @@
+++++++++++     "eval_fstrings": {
+++++++++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++         "_type": "python_object (type = method)",
+++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAllbWFfZGVjYXmURz/v1wo9cKPXjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHbl9zYXZlc5RLMowPbWF4X3BhdGhfbGVuZ3RolE1AnIwHbG9nYmFzZZSMBGxvZ3OUjAlsb3NzX3R5cGWUjAJsMpSMDWxvc3NfZGlzY291bnSUSwGMCHNldF9zZWVklGgCaAZoFIaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1jbGlwX2Rlbm9pc2VklIiMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbWtkaXKUaAJoBmghhpRSlIwHaG9yaXpvbpRNgAGME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowGZGV2aWNllIwEY3VkYZSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlzYXZlX2ZyZXGUTegDjA9wcmVkaWN0X2Vwc2lsb26UiYwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLc2FtcGxlX2ZyZXGUTegDjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWV2YWxfZnN0cmluZ3OUaAJoBmg3hpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAlzYXZlX2RpZmaUaAJoBmhBhpRSlIwJYXR0ZW50aW9ulImMDGxvc3Nfd2VpZ2h0c5ROjA1hY3Rpb25fd2VpZ2h0lEsBjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoSoaUUpSMCmdldF9jb21taXSUaAJoBmhNhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaDeGlFKULg=="
+++++++++++     },
+++++++++++     "exp_name": "diffusion/H384_T256",
+++++++++++     "generate_exp_name": {
+++++++++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++         "_type": "python_object (type = method)",
+++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAllbWFfZGVjYXmURz/v1wo9cKPXjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHbl9zYXZlc5RLMowPbWF4X3BhdGhfbGVuZ3RolE1AnIwHbG9nYmFzZZSMBGxvZ3OUjAlsb3NzX3R5cGWUjAJsMpSMDWxvc3NfZGlzY291bnSUSwGMCHNldF9zZWVklGgCaAZoFIaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1jbGlwX2Rlbm9pc2VklIiMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbWtkaXKUaAJoBmghhpRSlIwHaG9yaXpvbpRNgAGME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowGZGV2aWNllIwEY3VkYZSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlzYXZlX2ZyZXGUTegDjA9wcmVkaWN0X2Vwc2lsb26UiYwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLc2FtcGxlX2ZyZXGUTegDjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWV2YWxfZnN0cmluZ3OUaAJoBmg3hpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAlzYXZlX2RpZmaUaAJoBmhBhpRSlIwJYXR0ZW50aW9ulImMDGxvc3Nfd2VpZ2h0c5ROjA1hY3Rpb25fd2VpZ2h0lEsBjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoSoaUUpSMCmdldF9jb21taXSUaAJoBmhNhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaEqGlFKULg=="
+++++++++++     },
+++++++++++     "get_commit": {
+++++++++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++         "_type": "python_object (type = method)",
+++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAllbWFfZGVjYXmURz/v1wo9cKPXjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHbl9zYXZlc5RLMowPbWF4X3BhdGhfbGVuZ3RolE1AnIwHbG9nYmFzZZSMBGxvZ3OUjAlsb3NzX3R5cGWUjAJsMpSMDWxvc3NfZGlzY291bnSUSwGMCHNldF9zZWVklGgCaAZoFIaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1jbGlwX2Rlbm9pc2VklIiMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbWtkaXKUaAJoBmghhpRSlIwHaG9yaXpvbpRNgAGME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowGZGV2aWNllIwEY3VkYZSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlzYXZlX2ZyZXGUTegDjA9wcmVkaWN0X2Vwc2lsb26UiYwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLc2FtcGxlX2ZyZXGUTegDjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWV2YWxfZnN0cmluZ3OUaAJoBmg3hpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAlzYXZlX2RpZmaUaAJoBmhBhpRSlIwJYXR0ZW50aW9ulImMDGxvc3Nfd2VpZ2h0c5ROjA1hY3Rpb25fd2VpZ2h0lEsBjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoSoaUUpSMCmdldF9jb21taXSUaAJoBmhNhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaE2GlFKULg=="
+++++++++++     },
+++++++++++     "gradient_accumulate_every": 2,
+++++++++++     "horizon": 384,
+++++++++++@@ -51,12 +51,11 @@
+++++++++++     "mkdir": {
+++++++++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++         "_type": "python_object (type = method)",
+++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAllbWFfZGVjYXmURz/v1wo9cKPXjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHbl9zYXZlc5RLMowPbWF4X3BhdGhfbGVuZ3RolE1AnIwHbG9nYmFzZZSMBGxvZ3OUjAlsb3NzX3R5cGWUjAJsMpSMDWxvc3NfZGlzY291bnSUSwGMCHNldF9zZWVklGgCaAZoFIaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1jbGlwX2Rlbm9pc2VklIiMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbWtkaXKUaAJoBmghhpRSlIwHaG9yaXpvbpRNgAGME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowGZGV2aWNllIwEY3VkYZSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlzYXZlX2ZyZXGUTegDjA9wcmVkaWN0X2Vwc2lsb26UiYwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLc2FtcGxlX2ZyZXGUTegDjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWV2YWxfZnN0cmluZ3OUaAJoBmg3hpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAlzYXZlX2RpZmaUaAJoBmhBhpRSlIwJYXR0ZW50aW9ulImMDGxvc3Nfd2VpZ2h0c5ROjA1hY3Rpb25fd2VpZ2h0lEsBjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoSoaUUpSMCmdldF9jb21taXSUaAJoBmhNhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaCGGlFKULg=="
+++++++++++     },
+++++++++++     "model": "models.TemporalUnet",
+++++++++++     "n_diffusion_steps": 256,
+++++++++++     "n_reference": 50,
+++++++++++-    "n_samples": 10,
+++++++++++     "n_saves": 50,
+++++++++++     "n_steps_per_epoch": 10000,
+++++++++++     "n_train_steps": 2000000.0,
+++++++++++@@ -69,21 +68,21 @@
+++++++++++     "read_config": {
+++++++++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++         "_type": "python_object (type = method)",
+++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAllbWFfZGVjYXmURz/v1wo9cKPXjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHbl9zYXZlc5RLMowPbWF4X3BhdGhfbGVuZ3RolE1AnIwHbG9nYmFzZZSMBGxvZ3OUjAlsb3NzX3R5cGWUjAJsMpSMDWxvc3NfZGlzY291bnSUSwGMCHNldF9zZWVklGgCaAZoFIaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1jbGlwX2Rlbm9pc2VklIiMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbWtkaXKUaAJoBmghhpRSlIwHaG9yaXpvbpRNgAGME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowGZGV2aWNllIwEY3VkYZSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlzYXZlX2ZyZXGUTegDjA9wcmVkaWN0X2Vwc2lsb26UiYwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLc2FtcGxlX2ZyZXGUTegDjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWV2YWxfZnN0cmluZ3OUaAJoBmg3hpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAlzYXZlX2RpZmaUaAJoBmhBhpRSlIwJYXR0ZW50aW9ulImMDGxvc3Nfd2VpZ2h0c5ROjA1hY3Rpb25fd2VpZ2h0lEsBjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoSoaUUpSMCmdldF9jb21taXSUaAJoBmhNhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaDKGlFKULg=="
+++++++++++     },
+++++++++++     "renderer": "utils.Maze2dRenderer",
+++++++++++     "reproducibility": {
+++++++++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
+++++++++++         "git_has_uncommitted_changes": true,
+++++++++++         "git_root": "/home/wslabtop/project/diffuser",
+++++++++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
+++++++++++-        "time": "Fri Nov  8 09:50:02 2024"
++++++++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
++++++++++++        "time": "Fri Nov  8 11:45:49 2024"
+++++++++++     },
+++++++++++     "sample_freq": 1000,
+++++++++++     "save_diff": {
+++++++++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++         "_type": "python_object (type = method)",
+++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAllbWFfZGVjYXmURz/v1wo9cKPXjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHbl9zYXZlc5RLMowPbWF4X3BhdGhfbGVuZ3RolE1AnIwHbG9nYmFzZZSMBGxvZ3OUjAlsb3NzX3R5cGWUjAJsMpSMDWxvc3NfZGlzY291bnSUSwGMCHNldF9zZWVklGgCaAZoFIaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1jbGlwX2Rlbm9pc2VklIiMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbWtkaXKUaAJoBmghhpRSlIwHaG9yaXpvbpRNgAGME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowGZGV2aWNllIwEY3VkYZSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlzYXZlX2ZyZXGUTegDjA9wcmVkaWN0X2Vwc2lsb26UiYwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLc2FtcGxlX2ZyZXGUTegDjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWV2YWxfZnN0cmluZ3OUaAJoBmg3hpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAlzYXZlX2RpZmaUaAJoBmhBhpRSlIwJYXR0ZW50aW9ulImMDGxvc3Nfd2VpZ2h0c5ROjA1hY3Rpb25fd2VpZ2h0lEsBjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoSoaUUpSMCmdldF9jb21taXSUaAJoBmhNhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaEGGlFKULg=="
+++++++++++     },
+++++++++++     "save_freq": 1000,
+++++++++++     "save_parallel": false,
+++++++++++@@ -91,12 +90,12 @@
+++++++++++     "set_loadbase": {
+++++++++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++         "_type": "python_object (type = method)",
+++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAllbWFfZGVjYXmURz/v1wo9cKPXjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHbl9zYXZlc5RLMowPbWF4X3BhdGhfbGVuZ3RolE1AnIwHbG9nYmFzZZSMBGxvZ3OUjAlsb3NzX3R5cGWUjAJsMpSMDWxvc3NfZGlzY291bnSUSwGMCHNldF9zZWVklGgCaAZoFIaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1jbGlwX2Rlbm9pc2VklIiMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbWtkaXKUaAJoBmghhpRSlIwHaG9yaXpvbpRNgAGME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowGZGV2aWNllIwEY3VkYZSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlzYXZlX2ZyZXGUTegDjA9wcmVkaWN0X2Vwc2lsb26UiYwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLc2FtcGxlX2ZyZXGUTegDjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWV2YWxfZnN0cmluZ3OUaAJoBmg3hpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAlzYXZlX2RpZmaUaAJoBmhBhpRSlIwJYXR0ZW50aW9ulImMDGxvc3Nfd2VpZ2h0c5ROjA1hY3Rpb25fd2VpZ2h0lEsBjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoSoaUUpSMCmdldF9jb21taXSUaAJoBmhNhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaFiGlFKULg=="
+++++++++++     },
+++++++++++     "set_seed": {
+++++++++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++         "_type": "python_object (type = method)",
+++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAllbWFfZGVjYXmURz/v1wo9cKPXjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwHbl9zYXZlc5RLMowPbWF4X3BhdGhfbGVuZ3RolE1AnIwHbG9nYmFzZZSMBGxvZ3OUjAlsb3NzX3R5cGWUjAJsMpSMDWxvc3NfZGlzY291bnSUSwGMCHNldF9zZWVklGgCaAZoFIaUUpSMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjA1jbGlwX2Rlbm9pc2VklIiMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjA1uX3RyYWluX3N0ZXBzlEdBPoSAAAAAAIwFbWtkaXKUaAJoBmghhpRSlIwHaG9yaXpvbpRNgAGME3Rlcm1pbmF0aW9uX3BlbmFsdHmUTowGZGV2aWNllIwEY3VkYZSMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBlncmFkaWVudF9hY2N1bXVsYXRlX2V2ZXJ5lEsCjAlzYXZlX2ZyZXGUTegDjA9wcmVkaWN0X2Vwc2lsb26UiYwLdXNlX3BhZGRpbmeUiYwKYmF0Y2hfc2l6ZZRLIIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwLc2FtcGxlX2ZyZXGUTegDjAtyZWFkX2NvbmZpZ5RoAmgGaDKGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMDWV2YWxfZnN0cmluZ3OUaAJoBmg3hpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwKYWRkX2V4dHJhc5RoAmgGaD6GlFKUjAlzYXZlX2RpZmaUaAJoBmhBhpRSlIwJYXR0ZW50aW9ulImMDGxvc3Nfd2VpZ2h0c5ROjA1hY3Rpb25fd2VpZ2h0lEsBjAhleHBfbmFtZZSME2RpZmZ1c2lvbi9IMzg0X1QyNTaUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoSoaUUpSMCmdldF9jb21taXSUaAJoBmhNhpRSlIwNc2F2ZV9wYXJhbGxlbJSJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMC25fcmVmZXJlbmNllEsyjAxzZXRfbG9hZGJhc2WUaAJoBmhYhpRSlHViaBSGlFKULg=="
+++++++++++     },
+++++++++++     "termination_penalty": null,
+++++++++++     "use_padding": false
+++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++++index ed9549e..392bb7f 100644
+++++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++++@@ -1,231 +1,1178 @@
+++++++++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
+++++++++++-index 1ad2106..5991f01 100644
+++++++++++---- a/diffuser/datasets/buffer.py
+++++++++++-+++ b/diffuser/datasets/buffer.py
+++++++++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
+++++++++++- 
+++++++++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
+++++++++++-         self._dict = {
+++++++++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
+++++++++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
+++++++++++-         }
+++++++++++-         self._count = 0
+++++++++++-         self.max_n_episodes = max_n_episodes
+++++++++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
+++++++++++-index 655a6f0..d5dd111 100644
+++++++++++---- a/diffuser/environments/registration.py
+++++++++++-+++ b/diffuser/environments/registration.py
+++++++++++-@@ -1,3 +1,5 @@
+++++++++++-+import sys
+++++++++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
+++++++++++- import gym
+++++++++++- 
+++++++++++- ENVIRONMENT_SPECS = (
+++++++++++-@@ -31,4 +33,4 @@ def register_environments():
+++++++++++-         return gym_ids
+++++++++++-     except:
+++++++++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
+++++++++++--        return tuple()
++++++++++++diff --git a/config/__pycache__/maze2d.cpython-38.pyc b/config/__pycache__/maze2d.cpython-38.pyc
++++++++++++index db2afeb..ec28ee5 100644
++++++++++++Binary files a/config/__pycache__/maze2d.cpython-38.pyc and b/config/__pycache__/maze2d.cpython-38.pyc differ
++++++++++++diff --git a/config/maze2d.py b/config/maze2d.py
++++++++++++index e7698af..e5ef81a 100644
++++++++++++--- a/config/maze2d.py
+++++++++++++++ b/config/maze2d.py
++++++++++++@@ -70,7 +70,6 @@ base = {
++++++++++++         'n_saves': 50,
++++++++++++         'save_parallel': False,
++++++++++++         'n_reference': 50,
++++++++++++-        'n_samples': 10,
++++++++++++         'bucket': None,
++++++++++++         'device': 'cuda',
++++++++++++     },
++++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png
++++++++++++index 83efa3b..03d68df 100644
++++++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png and b/logs/maze2d-large-v1/diffusion/H384_T256/_sample-reference.png differ
++++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++++index 9ad1dbc..05cc0c0 100644
++++++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++++@@ -3,13 +3,13 @@
++++++++++++     "add_extras": {
++++++++++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++         "_type": "python_object (type = method)",
++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
+++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDHNldF9sb2FkYmFzZZRoAmgGaAuGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCHNldF9zZWVklGgCaAZoFIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwLdXNlX3BhZGRpbmeUiYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlsb3NzX3R5cGWUjAJsMpSMB25fc2F2ZXOUSzKMDXNhdmVfcGFyYWxsZWyUiYwGYnVja2V0lE6MD3ByZWRpY3RfZXBzaWxvbpSJjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxsb3NzX3dlaWdodHOUTowGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAlzYXZlX2RpZmaUaAJoBmguhpRSlIwJYXR0ZW50aW9ulImMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAphZGRfZXh0cmFzlGgCaAZoOIaUUpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwNZXZhbF9mc3RyaW5nc5RoAmgGaD6GlFKUjAVta2RpcpRoAmgGaEGGlFKUjAZkZXZpY2WUjARjdWRhlIwLcmVhZF9jb25maWeUaAJoBmhGhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdsb2diYXNllIwEbG9nc5SMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCmJhdGNoX3NpemWUSyCMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAtuX3JlZmVyZW5jZZRLMowNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhShpRSlIwKZ2V0X2NvbW1pdJRoAmgGaFWGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj13ViaDiGlFKULg=="
++++++++++++     },
++++++++++++     "attention": false,
++++++++++++     "batch_size": 32,
++++++++++++     "bucket": null,
++++++++++++     "clip_denoised": true,
++++++++++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
+++++++++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
++++++++++++     "config": "config.maze2d",
++++++++++++     "dataset": "maze2d-large-v1",
++++++++++++     "device": "cuda",
++++++++++++@@ -26,18 +26,18 @@
++++++++++++     "eval_fstrings": {
++++++++++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++         "_type": "python_object (type = method)",
++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
+++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDHNldF9sb2FkYmFzZZRoAmgGaAuGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCHNldF9zZWVklGgCaAZoFIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwLdXNlX3BhZGRpbmeUiYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlsb3NzX3R5cGWUjAJsMpSMB25fc2F2ZXOUSzKMDXNhdmVfcGFyYWxsZWyUiYwGYnVja2V0lE6MD3ByZWRpY3RfZXBzaWxvbpSJjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxsb3NzX3dlaWdodHOUTowGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAlzYXZlX2RpZmaUaAJoBmguhpRSlIwJYXR0ZW50aW9ulImMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAphZGRfZXh0cmFzlGgCaAZoOIaUUpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwNZXZhbF9mc3RyaW5nc5RoAmgGaD6GlFKUjAVta2RpcpRoAmgGaEGGlFKUjAZkZXZpY2WUjARjdWRhlIwLcmVhZF9jb25maWeUaAJoBmhGhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdsb2diYXNllIwEbG9nc5SMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCmJhdGNoX3NpemWUSyCMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAtuX3JlZmVyZW5jZZRLMowNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhShpRSlIwKZ2V0X2NvbW1pdJRoAmgGaFWGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj13ViaD6GlFKULg=="
++++++++++++     },
++++++++++++     "exp_name": "diffusion/H384_T256",
++++++++++++     "generate_exp_name": {
++++++++++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++         "_type": "python_object (type = method)",
++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
+++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDHNldF9sb2FkYmFzZZRoAmgGaAuGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCHNldF9zZWVklGgCaAZoFIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwLdXNlX3BhZGRpbmeUiYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlsb3NzX3R5cGWUjAJsMpSMB25fc2F2ZXOUSzKMDXNhdmVfcGFyYWxsZWyUiYwGYnVja2V0lE6MD3ByZWRpY3RfZXBzaWxvbpSJjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxsb3NzX3dlaWdodHOUTowGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAlzYXZlX2RpZmaUaAJoBmguhpRSlIwJYXR0ZW50aW9ulImMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAphZGRfZXh0cmFzlGgCaAZoOIaUUpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwNZXZhbF9mc3RyaW5nc5RoAmgGaD6GlFKUjAVta2RpcpRoAmgGaEGGlFKUjAZkZXZpY2WUjARjdWRhlIwLcmVhZF9jb25maWeUaAJoBmhGhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdsb2diYXNllIwEbG9nc5SMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCmJhdGNoX3NpemWUSyCMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAtuX3JlZmVyZW5jZZRLMowNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhShpRSlIwKZ2V0X2NvbW1pdJRoAmgGaFWGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj13ViaFKGlFKULg=="
++++++++++++     },
++++++++++++     "get_commit": {
++++++++++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++         "_type": "python_object (type = method)",
++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
+++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDHNldF9sb2FkYmFzZZRoAmgGaAuGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCHNldF9zZWVklGgCaAZoFIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwLdXNlX3BhZGRpbmeUiYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlsb3NzX3R5cGWUjAJsMpSMB25fc2F2ZXOUSzKMDXNhdmVfcGFyYWxsZWyUiYwGYnVja2V0lE6MD3ByZWRpY3RfZXBzaWxvbpSJjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxsb3NzX3dlaWdodHOUTowGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAlzYXZlX2RpZmaUaAJoBmguhpRSlIwJYXR0ZW50aW9ulImMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAphZGRfZXh0cmFzlGgCaAZoOIaUUpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwNZXZhbF9mc3RyaW5nc5RoAmgGaD6GlFKUjAVta2RpcpRoAmgGaEGGlFKUjAZkZXZpY2WUjARjdWRhlIwLcmVhZF9jb25maWeUaAJoBmhGhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdsb2diYXNllIwEbG9nc5SMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCmJhdGNoX3NpemWUSyCMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAtuX3JlZmVyZW5jZZRLMowNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhShpRSlIwKZ2V0X2NvbW1pdJRoAmgGaFWGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj13ViaFWGlFKULg=="
++++++++++++     },
++++++++++++     "gradient_accumulate_every": 2,
++++++++++++     "horizon": 384,
++++++++++++@@ -51,12 +51,11 @@
++++++++++++     "mkdir": {
++++++++++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++         "_type": "python_object (type = method)",
++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
+++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDHNldF9sb2FkYmFzZZRoAmgGaAuGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCHNldF9zZWVklGgCaAZoFIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwLdXNlX3BhZGRpbmeUiYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlsb3NzX3R5cGWUjAJsMpSMB25fc2F2ZXOUSzKMDXNhdmVfcGFyYWxsZWyUiYwGYnVja2V0lE6MD3ByZWRpY3RfZXBzaWxvbpSJjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxsb3NzX3dlaWdodHOUTowGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAlzYXZlX2RpZmaUaAJoBmguhpRSlIwJYXR0ZW50aW9ulImMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAphZGRfZXh0cmFzlGgCaAZoOIaUUpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwNZXZhbF9mc3RyaW5nc5RoAmgGaD6GlFKUjAVta2RpcpRoAmgGaEGGlFKUjAZkZXZpY2WUjARjdWRhlIwLcmVhZF9jb25maWeUaAJoBmhGhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdsb2diYXNllIwEbG9nc5SMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCmJhdGNoX3NpemWUSyCMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAtuX3JlZmVyZW5jZZRLMowNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhShpRSlIwKZ2V0X2NvbW1pdJRoAmgGaFWGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj13ViaEGGlFKULg=="
++++++++++++     },
++++++++++++     "model": "models.TemporalUnet",
++++++++++++     "n_diffusion_steps": 256,
++++++++++++     "n_reference": 50,
++++++++++++-    "n_samples": 10,
++++++++++++     "n_saves": 50,
++++++++++++     "n_steps_per_epoch": 10000,
++++++++++++     "n_train_steps": 2000000.0,
++++++++++++@@ -69,21 +68,21 @@
++++++++++++     "read_config": {
++++++++++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++         "_type": "python_object (type = method)",
++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
+++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDHNldF9sb2FkYmFzZZRoAmgGaAuGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCHNldF9zZWVklGgCaAZoFIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwLdXNlX3BhZGRpbmeUiYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlsb3NzX3R5cGWUjAJsMpSMB25fc2F2ZXOUSzKMDXNhdmVfcGFyYWxsZWyUiYwGYnVja2V0lE6MD3ByZWRpY3RfZXBzaWxvbpSJjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxsb3NzX3dlaWdodHOUTowGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAlzYXZlX2RpZmaUaAJoBmguhpRSlIwJYXR0ZW50aW9ulImMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAphZGRfZXh0cmFzlGgCaAZoOIaUUpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwNZXZhbF9mc3RyaW5nc5RoAmgGaD6GlFKUjAVta2RpcpRoAmgGaEGGlFKUjAZkZXZpY2WUjARjdWRhlIwLcmVhZF9jb25maWeUaAJoBmhGhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdsb2diYXNllIwEbG9nc5SMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCmJhdGNoX3NpemWUSyCMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAtuX3JlZmVyZW5jZZRLMowNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhShpRSlIwKZ2V0X2NvbW1pdJRoAmgGaFWGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj13ViaEaGlFKULg=="
++++++++++++     },
++++++++++++     "renderer": "utils.Maze2dRenderer",
++++++++++++     "reproducibility": {
++++++++++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
++++++++++++         "git_has_uncommitted_changes": true,
++++++++++++         "git_root": "/home/wslabtop/project/diffuser",
++++++++++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
++++++++++++-        "time": "Fri Nov  8 09:50:02 2024"
+++++++++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
+++++++++++++        "time": "Fri Nov  8 11:43:10 2024"
++++++++++++     },
++++++++++++     "sample_freq": 1000,
++++++++++++     "save_diff": {
++++++++++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++         "_type": "python_object (type = method)",
++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
+++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDHNldF9sb2FkYmFzZZRoAmgGaAuGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCHNldF9zZWVklGgCaAZoFIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwLdXNlX3BhZGRpbmeUiYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlsb3NzX3R5cGWUjAJsMpSMB25fc2F2ZXOUSzKMDXNhdmVfcGFyYWxsZWyUiYwGYnVja2V0lE6MD3ByZWRpY3RfZXBzaWxvbpSJjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxsb3NzX3dlaWdodHOUTowGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAlzYXZlX2RpZmaUaAJoBmguhpRSlIwJYXR0ZW50aW9ulImMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAphZGRfZXh0cmFzlGgCaAZoOIaUUpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwNZXZhbF9mc3RyaW5nc5RoAmgGaD6GlFKUjAVta2RpcpRoAmgGaEGGlFKUjAZkZXZpY2WUjARjdWRhlIwLcmVhZF9jb25maWeUaAJoBmhGhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdsb2diYXNllIwEbG9nc5SMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCmJhdGNoX3NpemWUSyCMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAtuX3JlZmVyZW5jZZRLMowNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhShpRSlIwKZ2V0X2NvbW1pdJRoAmgGaFWGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj13ViaC6GlFKULg=="
++++++++++++     },
++++++++++++     "save_freq": 1000,
++++++++++++     "save_parallel": false,
++++++++++++@@ -91,12 +90,12 @@
++++++++++++     "set_loadbase": {
++++++++++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++         "_type": "python_object (type = method)",
++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
+++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDHNldF9sb2FkYmFzZZRoAmgGaAuGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCHNldF9zZWVklGgCaAZoFIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwLdXNlX3BhZGRpbmeUiYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlsb3NzX3R5cGWUjAJsMpSMB25fc2F2ZXOUSzKMDXNhdmVfcGFyYWxsZWyUiYwGYnVja2V0lE6MD3ByZWRpY3RfZXBzaWxvbpSJjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxsb3NzX3dlaWdodHOUTowGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAlzYXZlX2RpZmaUaAJoBmguhpRSlIwJYXR0ZW50aW9ulImMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAphZGRfZXh0cmFzlGgCaAZoOIaUUpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwNZXZhbF9mc3RyaW5nc5RoAmgGaD6GlFKUjAVta2RpcpRoAmgGaEGGlFKUjAZkZXZpY2WUjARjdWRhlIwLcmVhZF9jb25maWeUaAJoBmhGhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdsb2diYXNllIwEbG9nc5SMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCmJhdGNoX3NpemWUSyCMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAtuX3JlZmVyZW5jZZRLMowNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhShpRSlIwKZ2V0X2NvbW1pdJRoAmgGaFWGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj13ViaAuGlFKULg=="
++++++++++++     },
++++++++++++     "set_seed": {
++++++++++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++         "_type": "python_object (type = method)",
++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
+++++++++++++        "_value": "gASVqQQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMDHNldF9sb2FkYmFzZZRoAmgGaAuGlFKUjAlkaW1fbXVsdHOUSwFLBEsIh5SMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCHNldF9zZWVklGgCaAZoFIaUUpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwFbW9kZWyUjBNtb2RlbHMuVGVtcG9yYWxVbmV0lIwLdXNlX3BhZGRpbmeUiYwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAlsb3NzX3R5cGWUjAJsMpSMB25fc2F2ZXOUSzKMDXNhdmVfcGFyYWxsZWyUiYwGYnVja2V0lE6MD3ByZWRpY3RfZXBzaWxvbpSJjAlzYXZlX2ZyZXGUTegDjAtzYW1wbGVfZnJlcZRN6AOMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxsb3NzX3dlaWdodHOUTowGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjAlzYXZlX2RpZmaUaAJoBmguhpRSlIwJYXR0ZW50aW9ulImMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMB2hvcml6b26UTYABjA1sb3NzX2Rpc2NvdW50lEsBjAphZGRfZXh0cmFzlGgCaAZoOIaUUpSMDWNsaXBfZGVub2lzZWSUiIwIc2F2ZXBhdGiUjChsb2dzL21hemUyZC1sYXJnZS12MS9kaWZmdXNpb24vSDM4NF9UMjU2lIwNZXZhbF9mc3RyaW5nc5RoAmgGaD6GlFKUjAVta2RpcpRoAmgGaEGGlFKUjAZkZXZpY2WUjARjdWRhlIwLcmVhZF9jb25maWeUaAJoBmhGhpRSlIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAdsb2diYXNllIwEbG9nc5SMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCmJhdGNoX3NpemWUSyCMDW5fdHJhaW5fc3RlcHOUR0E+hIAAAAAAjAtuX3JlZmVyZW5jZZRLMowNYWN0aW9uX3dlaWdodJRLAYwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmhShpRSlIwKZ2V0X2NvbW1pdJRoAmgGaFWGlFKUjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwJZW1hX2RlY2F5lEc/79cKPXCj13ViaBSGlFKULg=="
++++++++++++     },
++++++++++++     "termination_penalty": null,
++++++++++++     "use_padding": false
++++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++++++index ed9549e..ff1dfb4 100644
++++++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++++++@@ -1,231 +1,625 @@
++++++++++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
++++++++++++-index 1ad2106..5991f01 100644
++++++++++++---- a/diffuser/datasets/buffer.py
++++++++++++-+++ b/diffuser/datasets/buffer.py
++++++++++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
++++++++++++- 
++++++++++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
++++++++++++-         self._dict = {
++++++++++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
++++++++++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
++++++++++++-         }
++++++++++++-         self._count = 0
++++++++++++-         self.max_n_episodes = max_n_episodes
++++++++++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
++++++++++++-index 655a6f0..d5dd111 100644
++++++++++++---- a/diffuser/environments/registration.py
++++++++++++-+++ b/diffuser/environments/registration.py
++++++++++++-@@ -1,3 +1,5 @@
++++++++++++-+import sys
++++++++++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
++++++++++++- import gym
++++++++++++- 
++++++++++++- ENVIRONMENT_SPECS = (
++++++++++++-@@ -31,4 +33,4 @@ def register_environments():
++++++++++++-         return gym_ids
++++++++++++-     except:
++++++++++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
++++++++++++--        return tuple()
+++++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++++++index 9ad1dbc..e997668 100644
+++++++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++++++@@ -3,13 +3,13 @@
+++++++++++++     "add_extras": {
+++++++++++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++++         "_type": "python_object (type = method)",
+++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAtyZWFkX2NvbmZpZ5RoAmgGaAqGlFKUjAlzYXZlX2ZyZXGUTegDjAlzYXZlX2RpZmaUaAJoBmgOhpRSlIwLbl9yZWZlcmVuY2WUSzKMCmFkZF9leHRyYXOUaAJoBmgShpRSlIwNYWN0aW9uX3dlaWdodJRLAYwHbl9zYXZlc5RLMowFbWtkaXKUaAJoBmgXhpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMC3VzZV9wYWRkaW5nlImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAhzZXRfc2VlZJRoAmgGaCKGlFKUjApnZXRfY29tbWl0lGgCaAZoJYaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoKoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCWF0dGVudGlvbpSJjAtzYW1wbGVfZnJlcZRN6AOMDWxvc3NfZGlzY291bnSUSwGMD21heF9wYXRoX2xlbmd0aJRNQJyMDWNsaXBfZGVub2lzZWSUiIwHbG9nYmFzZZSMBGxvZ3OUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMBmRldmljZZSMBGN1ZGGUjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwPcHJlZGljdF9lcHNpbG9ulImMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAxzZXRfbG9hZGJhc2WUaAJoBmhJhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDXNhdmVfcGFyYWxsZWyUiYwKYmF0Y2hfc2l6ZZRLIIwMbG9zc193ZWlnaHRzlE6MDWV2YWxfZnN0cmluZ3OUaAJoBmhShpRSlIwJbG9zc190eXBllIwCbDKUjAllbWFfZGVjYXmURz/v1wo9cKPXjAZidWNrZXSUTowRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUdWJoEoaUUpQu"
+++++++++++++     },
+++++++++++++     "attention": false,
+++++++++++++     "batch_size": 32,
+++++++++++++     "bucket": null,
+++++++++++++     "clip_denoised": true,
+++++++++++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
++++++++++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
+++++++++++++     "config": "config.maze2d",
+++++++++++++     "dataset": "maze2d-large-v1",
+++++++++++++     "device": "cuda",
+++++++++++++@@ -26,18 +26,18 @@
+++++++++++++     "eval_fstrings": {
+++++++++++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++++         "_type": "python_object (type = method)",
+++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAtyZWFkX2NvbmZpZ5RoAmgGaAqGlFKUjAlzYXZlX2ZyZXGUTegDjAlzYXZlX2RpZmaUaAJoBmgOhpRSlIwLbl9yZWZlcmVuY2WUSzKMCmFkZF9leHRyYXOUaAJoBmgShpRSlIwNYWN0aW9uX3dlaWdodJRLAYwHbl9zYXZlc5RLMowFbWtkaXKUaAJoBmgXhpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMC3VzZV9wYWRkaW5nlImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAhzZXRfc2VlZJRoAmgGaCKGlFKUjApnZXRfY29tbWl0lGgCaAZoJYaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoKoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCWF0dGVudGlvbpSJjAtzYW1wbGVfZnJlcZRN6AOMDWxvc3NfZGlzY291bnSUSwGMD21heF9wYXRoX2xlbmd0aJRNQJyMDWNsaXBfZGVub2lzZWSUiIwHbG9nYmFzZZSMBGxvZ3OUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMBmRldmljZZSMBGN1ZGGUjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwPcHJlZGljdF9lcHNpbG9ulImMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAxzZXRfbG9hZGJhc2WUaAJoBmhJhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDXNhdmVfcGFyYWxsZWyUiYwKYmF0Y2hfc2l6ZZRLIIwMbG9zc193ZWlnaHRzlE6MDWV2YWxfZnN0cmluZ3OUaAJoBmhShpRSlIwJbG9zc190eXBllIwCbDKUjAllbWFfZGVjYXmURz/v1wo9cKPXjAZidWNrZXSUTowRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUdWJoUoaUUpQu"
+++++++++++++     },
+++++++++++++     "exp_name": "diffusion/H384_T256",
+++++++++++++     "generate_exp_name": {
+++++++++++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++++         "_type": "python_object (type = method)",
+++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAtyZWFkX2NvbmZpZ5RoAmgGaAqGlFKUjAlzYXZlX2ZyZXGUTegDjAlzYXZlX2RpZmaUaAJoBmgOhpRSlIwLbl9yZWZlcmVuY2WUSzKMCmFkZF9leHRyYXOUaAJoBmgShpRSlIwNYWN0aW9uX3dlaWdodJRLAYwHbl9zYXZlc5RLMowFbWtkaXKUaAJoBmgXhpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMC3VzZV9wYWRkaW5nlImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAhzZXRfc2VlZJRoAmgGaCKGlFKUjApnZXRfY29tbWl0lGgCaAZoJYaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoKoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCWF0dGVudGlvbpSJjAtzYW1wbGVfZnJlcZRN6AOMDWxvc3NfZGlzY291bnSUSwGMD21heF9wYXRoX2xlbmd0aJRNQJyMDWNsaXBfZGVub2lzZWSUiIwHbG9nYmFzZZSMBGxvZ3OUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMBmRldmljZZSMBGN1ZGGUjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwPcHJlZGljdF9lcHNpbG9ulImMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAxzZXRfbG9hZGJhc2WUaAJoBmhJhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDXNhdmVfcGFyYWxsZWyUiYwKYmF0Y2hfc2l6ZZRLIIwMbG9zc193ZWlnaHRzlE6MDWV2YWxfZnN0cmluZ3OUaAJoBmhShpRSlIwJbG9zc190eXBllIwCbDKUjAllbWFfZGVjYXmURz/v1wo9cKPXjAZidWNrZXSUTowRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUdWJoKoaUUpQu"
+++++++++++++     },
+++++++++++++     "get_commit": {
+++++++++++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++++         "_type": "python_object (type = method)",
+++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAtyZWFkX2NvbmZpZ5RoAmgGaAqGlFKUjAlzYXZlX2ZyZXGUTegDjAlzYXZlX2RpZmaUaAJoBmgOhpRSlIwLbl9yZWZlcmVuY2WUSzKMCmFkZF9leHRyYXOUaAJoBmgShpRSlIwNYWN0aW9uX3dlaWdodJRLAYwHbl9zYXZlc5RLMowFbWtkaXKUaAJoBmgXhpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMC3VzZV9wYWRkaW5nlImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAhzZXRfc2VlZJRoAmgGaCKGlFKUjApnZXRfY29tbWl0lGgCaAZoJYaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoKoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCWF0dGVudGlvbpSJjAtzYW1wbGVfZnJlcZRN6AOMDWxvc3NfZGlzY291bnSUSwGMD21heF9wYXRoX2xlbmd0aJRNQJyMDWNsaXBfZGVub2lzZWSUiIwHbG9nYmFzZZSMBGxvZ3OUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMBmRldmljZZSMBGN1ZGGUjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwPcHJlZGljdF9lcHNpbG9ulImMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAxzZXRfbG9hZGJhc2WUaAJoBmhJhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDXNhdmVfcGFyYWxsZWyUiYwKYmF0Y2hfc2l6ZZRLIIwMbG9zc193ZWlnaHRzlE6MDWV2YWxfZnN0cmluZ3OUaAJoBmhShpRSlIwJbG9zc190eXBllIwCbDKUjAllbWFfZGVjYXmURz/v1wo9cKPXjAZidWNrZXSUTowRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUdWJoJYaUUpQu"
+++++++++++++     },
+++++++++++++     "gradient_accumulate_every": 2,
+++++++++++++     "horizon": 384,
+++++++++++++@@ -51,7 +51,7 @@
+++++++++++++     "mkdir": {
+++++++++++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++++         "_type": "python_object (type = method)",
+++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAtyZWFkX2NvbmZpZ5RoAmgGaAqGlFKUjAlzYXZlX2ZyZXGUTegDjAlzYXZlX2RpZmaUaAJoBmgOhpRSlIwLbl9yZWZlcmVuY2WUSzKMCmFkZF9leHRyYXOUaAJoBmgShpRSlIwNYWN0aW9uX3dlaWdodJRLAYwHbl9zYXZlc5RLMowFbWtkaXKUaAJoBmgXhpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMC3VzZV9wYWRkaW5nlImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAhzZXRfc2VlZJRoAmgGaCKGlFKUjApnZXRfY29tbWl0lGgCaAZoJYaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoKoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCWF0dGVudGlvbpSJjAtzYW1wbGVfZnJlcZRN6AOMDWxvc3NfZGlzY291bnSUSwGMD21heF9wYXRoX2xlbmd0aJRNQJyMDWNsaXBfZGVub2lzZWSUiIwHbG9nYmFzZZSMBGxvZ3OUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMBmRldmljZZSMBGN1ZGGUjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwPcHJlZGljdF9lcHNpbG9ulImMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAxzZXRfbG9hZGJhc2WUaAJoBmhJhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDXNhdmVfcGFyYWxsZWyUiYwKYmF0Y2hfc2l6ZZRLIIwMbG9zc193ZWlnaHRzlE6MDWV2YWxfZnN0cmluZ3OUaAJoBmhShpRSlIwJbG9zc190eXBllIwCbDKUjAllbWFfZGVjYXmURz/v1wo9cKPXjAZidWNrZXSUTowRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUdWJoF4aUUpQu"
+++++++++++++     },
+++++++++++++     "model": "models.TemporalUnet",
+++++++++++++     "n_diffusion_steps": 256,
+++++++++++++@@ -69,21 +69,21 @@
+++++++++++++     "read_config": {
+++++++++++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++++         "_type": "python_object (type = method)",
+++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAtyZWFkX2NvbmZpZ5RoAmgGaAqGlFKUjAlzYXZlX2ZyZXGUTegDjAlzYXZlX2RpZmaUaAJoBmgOhpRSlIwLbl9yZWZlcmVuY2WUSzKMCmFkZF9leHRyYXOUaAJoBmgShpRSlIwNYWN0aW9uX3dlaWdodJRLAYwHbl9zYXZlc5RLMowFbWtkaXKUaAJoBmgXhpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMC3VzZV9wYWRkaW5nlImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAhzZXRfc2VlZJRoAmgGaCKGlFKUjApnZXRfY29tbWl0lGgCaAZoJYaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoKoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCWF0dGVudGlvbpSJjAtzYW1wbGVfZnJlcZRN6AOMDWxvc3NfZGlzY291bnSUSwGMD21heF9wYXRoX2xlbmd0aJRNQJyMDWNsaXBfZGVub2lzZWSUiIwHbG9nYmFzZZSMBGxvZ3OUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMBmRldmljZZSMBGN1ZGGUjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwPcHJlZGljdF9lcHNpbG9ulImMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAxzZXRfbG9hZGJhc2WUaAJoBmhJhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDXNhdmVfcGFyYWxsZWyUiYwKYmF0Y2hfc2l6ZZRLIIwMbG9zc193ZWlnaHRzlE6MDWV2YWxfZnN0cmluZ3OUaAJoBmhShpRSlIwJbG9zc190eXBllIwCbDKUjAllbWFfZGVjYXmURz/v1wo9cKPXjAZidWNrZXSUTowRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUdWJoCoaUUpQu"
+++++++++++++     },
+++++++++++++     "renderer": "utils.Maze2dRenderer",
+++++++++++++     "reproducibility": {
+++++++++++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
+++++++++++++         "git_has_uncommitted_changes": true,
+++++++++++++         "git_root": "/home/wslabtop/project/diffuser",
+++++++++++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
+++++++++++++-        "time": "Fri Nov  8 09:50:02 2024"
++++++++++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
++++++++++++++        "time": "Fri Nov  8 11:42:34 2024"
+++++++++++++     },
+++++++++++++     "sample_freq": 1000,
+++++++++++++     "save_diff": {
+++++++++++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++++         "_type": "python_object (type = method)",
+++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAtyZWFkX2NvbmZpZ5RoAmgGaAqGlFKUjAlzYXZlX2ZyZXGUTegDjAlzYXZlX2RpZmaUaAJoBmgOhpRSlIwLbl9yZWZlcmVuY2WUSzKMCmFkZF9leHRyYXOUaAJoBmgShpRSlIwNYWN0aW9uX3dlaWdodJRLAYwHbl9zYXZlc5RLMowFbWtkaXKUaAJoBmgXhpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMC3VzZV9wYWRkaW5nlImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAhzZXRfc2VlZJRoAmgGaCKGlFKUjApnZXRfY29tbWl0lGgCaAZoJYaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoKoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCWF0dGVudGlvbpSJjAtzYW1wbGVfZnJlcZRN6AOMDWxvc3NfZGlzY291bnSUSwGMD21heF9wYXRoX2xlbmd0aJRNQJyMDWNsaXBfZGVub2lzZWSUiIwHbG9nYmFzZZSMBGxvZ3OUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMBmRldmljZZSMBGN1ZGGUjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwPcHJlZGljdF9lcHNpbG9ulImMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAxzZXRfbG9hZGJhc2WUaAJoBmhJhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDXNhdmVfcGFyYWxsZWyUiYwKYmF0Y2hfc2l6ZZRLIIwMbG9zc193ZWlnaHRzlE6MDWV2YWxfZnN0cmluZ3OUaAJoBmhShpRSlIwJbG9zc190eXBllIwCbDKUjAllbWFfZGVjYXmURz/v1wo9cKPXjAZidWNrZXSUTowRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUdWJoDoaUUpQu"
+++++++++++++     },
+++++++++++++     "save_freq": 1000,
+++++++++++++     "save_parallel": false,
+++++++++++++@@ -91,12 +91,12 @@
+++++++++++++     "set_loadbase": {
+++++++++++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++++         "_type": "python_object (type = method)",
+++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAtyZWFkX2NvbmZpZ5RoAmgGaAqGlFKUjAlzYXZlX2ZyZXGUTegDjAlzYXZlX2RpZmaUaAJoBmgOhpRSlIwLbl9yZWZlcmVuY2WUSzKMCmFkZF9leHRyYXOUaAJoBmgShpRSlIwNYWN0aW9uX3dlaWdodJRLAYwHbl9zYXZlc5RLMowFbWtkaXKUaAJoBmgXhpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMC3VzZV9wYWRkaW5nlImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAhzZXRfc2VlZJRoAmgGaCKGlFKUjApnZXRfY29tbWl0lGgCaAZoJYaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoKoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCWF0dGVudGlvbpSJjAtzYW1wbGVfZnJlcZRN6AOMDWxvc3NfZGlzY291bnSUSwGMD21heF9wYXRoX2xlbmd0aJRNQJyMDWNsaXBfZGVub2lzZWSUiIwHbG9nYmFzZZSMBGxvZ3OUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMBmRldmljZZSMBGN1ZGGUjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwPcHJlZGljdF9lcHNpbG9ulImMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAxzZXRfbG9hZGJhc2WUaAJoBmhJhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDXNhdmVfcGFyYWxsZWyUiYwKYmF0Y2hfc2l6ZZRLIIwMbG9zc193ZWlnaHRzlE6MDWV2YWxfZnN0cmluZ3OUaAJoBmhShpRSlIwJbG9zc190eXBllIwCbDKUjAllbWFfZGVjYXmURz/v1wo9cKPXjAZidWNrZXSUTowRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUdWJoSYaUUpQu"
+++++++++++++     },
+++++++++++++     "set_seed": {
+++++++++++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
+++++++++++++         "_type": "python_object (type = method)",
+++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMB2RhdGFzZXSUjA9tYXplMmQtbGFyZ2UtdjGUjAtyZWFkX2NvbmZpZ5RoAmgGaAqGlFKUjAlzYXZlX2ZyZXGUTegDjAlzYXZlX2RpZmaUaAJoBmgOhpRSlIwLbl9yZWZlcmVuY2WUSzKMCmFkZF9leHRyYXOUaAJoBmgShpRSlIwNYWN0aW9uX3dlaWdodJRLAYwHbl9zYXZlc5RLMowFbWtkaXKUaAJoBmgXhpRSlIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMC3VzZV9wYWRkaW5nlImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMBmNvbmZpZ5SMDWNvbmZpZy5tYXplMmSUjAhzZXRfc2VlZJRoAmgGaCKGlFKUjApnZXRfY29tbWl0lGgCaAZoJYaUUpSMCHNhdmVwYXRolIwobG9ncy9tYXplMmQtbGFyZ2UtdjEvZGlmZnVzaW9uL0gzODRfVDI1NpSMEWdlbmVyYXRlX2V4cF9uYW1llGgCaAZoKoaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMBmNvbW1pdJSMLTBiMWY1MzA4YWU2YWY2OTNmZDlkZTIxMTU0MGJiMGZjOTU5NWM1ZTcgbWFpbpSMCWF0dGVudGlvbpSJjAtzYW1wbGVfZnJlcZRN6AOMDWxvc3NfZGlzY291bnSUSwGMD21heF9wYXRoX2xlbmd0aJRNQJyMDWNsaXBfZGVub2lzZWSUiIwHbG9nYmFzZZSMBGxvZ3OUjBFuX2RpZmZ1c2lvbl9zdGVwc5RNAAGMBnByZWZpeJSMCmRpZmZ1c2lvbi+UjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAZsb2FkZXKUjBRkYXRhc2V0cy5Hb2FsRGF0YXNldJSMBmRldmljZZSMBGN1ZGGUjA1sZWFybmluZ19yYXRllEc/Kjbi6xxDLYwIcmVuZGVyZXKUjBR1dGlscy5NYXplMmRSZW5kZXJlcpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwPcHJlZGljdF9lcHNpbG9ulImMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjAxzZXRfbG9hZGJhc2WUaAJoBmhJhpRSlIwTdGVybWluYXRpb25fcGVuYWx0eZROjAlkaW1fbXVsdHOUSwFLBEsIh5SMDXNhdmVfcGFyYWxsZWyUiYwKYmF0Y2hfc2l6ZZRLIIwMbG9zc193ZWlnaHRzlE6MDWV2YWxfZnN0cmluZ3OUaAJoBmhShpRSlIwJbG9zc190eXBllIwCbDKUjAllbWFfZGVjYXmURz/v1wo9cKPXjAZidWNrZXSUTowRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUdWJoIoaUUpQu"
+++++++++++++     },
+++++++++++++     "termination_penalty": null,
+++++++++++++     "use_padding": false
+++++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++++++index ed9549e..9791a41 100644
+++++++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
++++++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/diff.txt
+++++++++++++@@ -1,231 +1,92 @@
+++++++++++++-diff --git a/diffuser/datasets/buffer.py b/diffuser/datasets/buffer.py
+++++++++++++-index 1ad2106..5991f01 100644
+++++++++++++---- a/diffuser/datasets/buffer.py
+++++++++++++-+++ b/diffuser/datasets/buffer.py
+++++++++++++-@@ -9,7 +9,7 @@ class ReplayBuffer:
+++++++++++++- 
+++++++++++++-     def __init__(self, max_n_episodes, max_path_length, termination_penalty):
+++++++++++++-         self._dict = {
+++++++++++++--            'path_lengths': np.zeros(max_n_episodes, dtype=np.int),
+++++++++++++-+            'path_lengths': np.zeros(max_n_episodes, dtype=np.int_),
+++++++++++++-         }
+++++++++++++-         self._count = 0
+++++++++++++-         self.max_n_episodes = max_n_episodes
+++++++++++++-diff --git a/diffuser/environments/registration.py b/diffuser/environments/registration.py
+++++++++++++-index 655a6f0..d5dd111 100644
+++++++++++++---- a/diffuser/environments/registration.py
+++++++++++++-+++ b/diffuser/environments/registration.py
+++++++++++++-@@ -1,3 +1,5 @@
+++++++++++++-+import sys
+++++++++++++-+sys.path.append('/home/wslabtop/.local/lib/python3.8/site-packages')
+++++++++++++- import gym
+++++++++++++- 
+++++++++++++- ENVIRONMENT_SPECS = (
+++++++++++++-@@ -31,4 +33,4 @@ def register_environments():
+++++++++++++-         return gym_ids
+++++++++++++-     except:
+++++++++++++-         print('[ diffuser/environments/registration ] WARNING: not registering diffuser environments')
+++++++++++++--        return tuple()
+++++++++++++-\ No newline at end of file
+++++++++++++-+        return tuple()
+++++++++++++-diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
+++++++++++++-index 8659ff1..d01c272 100644
+++++++++++++---- a/diffuser/utils/rendering.py
+++++++++++++-+++ b/diffuser/utils/rendering.py
+++++++++++++-@@ -36,15 +36,44 @@ def env_map(env_name):
+++++++++++++- #------------------------------ helper functions -----------------------------#
+++++++++++++- #-----------------------------------------------------------------------------#
+++++++++++++- 
+++++++++++++-+def atmost_2d(x):
+++++++++++++-+    while x.ndim > 2:
+++++++++++++-+        x = x.squeeze(0)
+++++++++++++-+    return x
+++++++++++++-+
+++++++++++++-+def zipsafe(*args):
+++++++++++++-+    length = len(args[0])
+++++++++++++-+    assert all([len(a) == length for a in args])
+++++++++++++-+    return zip(*args)
+++++++++++++-+
+++++++++++++-+def zipkw(*args, **kwargs):
+++++++++++++-+    nargs = len(args)
+++++++++++++-+    keys = kwargs.keys()
+++++++++++++-+    vals = [kwargs[k] for k in keys]
+++++++++++++-+    zipped = zipsafe(*args, *vals)
+++++++++++++-+    for items in zipped:
+++++++++++++-+        zipped_args = items[:nargs]
+++++++++++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
+++++++++++++-+        yield zipped_args, zipped_kwargs
+++++++++++++-+
+++++++++++++- def get_image_mask(img):
+++++++++++++-     background = (img == 255).all(axis=-1, keepdims=True)
+++++++++++++-     mask = ~background.repeat(3, axis=-1)
+++++++++++++-     return mask
+++++++++++++- 
+++++++++++++--def atmost_2d(x):
+++++++++++++--    while x.ndim > 2:
+++++++++++++--        x = x.squeeze(0)
+++++++++++++--    return x
+++++++++++++-+def plot2img(fig, remove_margins=True):
+++++++++++++-+    # https://stackoverflow.com/a/35362787/2912349
+++++++++++++-+    # https://stackoverflow.com/a/54334430/2912349
+++++++++++++-+
+++++++++++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
+++++++++++++-+
+++++++++++++-+    if remove_margins:
+++++++++++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
+++++++++++++-+
+++++++++++++-+    canvas = FigureCanvasAgg(fig)
+++++++++++++-+    canvas.draw()
+++++++++++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
+++++++++++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
+++++++++++++- 
+++++++++++++- #-----------------------------------------------------------------------------#
+++++++++++++- #---------------------------------- renderers --------------------------------#
+++++++++++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
+++++++++++++-         else:
+++++++++++++-             self.env = env
+++++++++++++-         ## - 1 because the envs in renderer are fully-observed
+++++++++++++-+        ## @TODO : clean up
+++++++++++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
+++++++++++++-         self.action_dim = np.prod(self.env.action_space.shape)
+++++++++++++-         try:
+++++++++++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
+++++++++++++-     def __call__(self, *args, **kwargs):
+++++++++++++-         return self.renders(*args, **kwargs)
+++++++++++++- 
+++++++++++++-+#-----------------------------------------------------------------------------#
+++++++++++++-+#----------------------------------- maze2d ----------------------------------#
+++++++++++++-+#-----------------------------------------------------------------------------#
+++++++++++++-+
+++++++++++++-+MAZE_BOUNDS = {
+++++++++++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
+++++++++++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
+++++++++++++-+    'maze2d-large-v1': (0, 9, 0, 12)
+++++++++++++-+}
+++++++++++++-+
+++++++++++++-+class MazeRenderer:
+++++++++++++-+
+++++++++++++-+    def __init__(self, env):
+++++++++++++-+        if type(env) is str: env = load_environment(env)
+++++++++++++-+        self._config = env._config
+++++++++++++-+        self._background = self._config != ' '
+++++++++++++-+        self._remove_margins = False
+++++++++++++-+        self._extent = (0, 1, 1, 0)
+++++++++++++-+
+++++++++++++-+    def renders(self, observations, conditions=None, title=None):
+++++++++++++-+        plt.clf()
+++++++++++++-+        fig = plt.gcf()
+++++++++++++-+        fig.set_size_inches(5, 5)
+++++++++++++-+        plt.imshow(self._background * .5,
+++++++++++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
+++++++++++++-+
+++++++++++++-+        path_length = len(observations)
+++++++++++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
+++++++++++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
+++++++++++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
+++++++++++++-+        plt.axis('off')
+++++++++++++-+        plt.title(title)
+++++++++++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
+++++++++++++-+        return img
+++++++++++++-+
+++++++++++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
+++++++++++++-+        '''
+++++++++++++-+            savepath : str
+++++++++++++-+            observations : [ n_paths x horizon x 2 ]
+++++++++++++-+        '''
+++++++++++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++++++++++++-+
+++++++++++++-+        images = []
+++++++++++++-+        for path, kw in zipkw(paths, **kwargs):
+++++++++++++-+            img = self.renders(*path, **kw)
+++++++++++++-+            images.append(img)
+++++++++++++-+        images = np.stack(images, axis=0)
+++++++++++++-+
+++++++++++++-+        nrow = len(images) // ncol
+++++++++++++-+        images = einops.rearrange(images,
+++++++++++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
+++++++++++++-+        imageio.imsave(savepath, images)
+++++++++++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
+++++++++++++-+
+++++++++++++-+class Maze2dRenderer(MazeRenderer):
+++++++++++++-+
+++++++++++++-+    def __init__(self, env, observation_dim=None):
+++++++++++++-+        self.env_name = env
+++++++++++++-+        self.env = load_environment(env)
+++++++++++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
+++++++++++++-+        self.action_dim = np.prod(self.env.action_space.shape)
+++++++++++++-+        self.goal = None
+++++++++++++-+        self._background = self.env.maze_arr == 10
+++++++++++++-+        self._remove_margins = False
+++++++++++++-+        self._extent = (0, 1, 1, 0)
+++++++++++++-+
+++++++++++++-+    def renders(self, observations, conditions=None, **kwargs):
+++++++++++++-+        bounds = MAZE_BOUNDS[self.env_name]
+++++++++++++-+
+++++++++++++-+        observations = observations + .5
+++++++++++++-+        if len(bounds) == 2:
+++++++++++++-+            _, scale = bounds
+++++++++++++-+            observations /= scale
+++++++++++++-+        elif len(bounds) == 4:
+++++++++++++-+            _, iscale, _, jscale = bounds
+++++++++++++-+            observations[:, 0] /= iscale
+++++++++++++-+            observations[:, 1] /= jscale
+++++++++++++-+        else:
+++++++++++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
+++++++++++++-+
+++++++++++++-+        if conditions is not None:
+++++++++++++-+            conditions /= scale
+++++++++++++-+        return super().renders(observations, conditions, **kwargs)
+++++++++++++-+
+++++++++++++- #-----------------------------------------------------------------------------#
+++++++++++++- #---------------------------------- rollouts ---------------------------------#
+++++++++++++- #-----------------------------------------------------------------------------#
+++++++++++++-diff --git a/environment.yml b/environment.yml
+++++++++++++-index c14a0cf..e56b6a9 100644
+++++++++++++---- a/environment.yml
+++++++++++++-+++ b/environment.yml
+++++++++++++-@@ -1,4 +1,4 @@
+++++++++++++--name: diffuser
+++++++++++++-+name: diffuser_2
+++++++++++++- channels:
+++++++++++++- - defaults
+++++++++++++- - conda-forge
+++++++++++++-@@ -12,9 +12,7 @@ dependencies:
+++++++++++++-     - gym==0.18.0
+++++++++++++-     - mujoco-py==2.0.2.13
+++++++++++++-     - matplotlib==3.3.4
+++++++++++++--    - torch==1.9.1+cu111
+++++++++++++-     - typed-argument-parser
+++++++++++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
+++++++++++++-     - scikit-image==0.17.2
+++++++++++++-     - scikit-video==1.1.11
+++++++++++++-     - gitpython
+++++++++++++-@@ -31,5 +29,4 @@ dependencies:
+++++++++++++-     - crcmod # for fast gsutil rsync on large files
+++++++++++++-     - google-api-python-client
+++++++++++++-     - cryptography
+++++++++++++--    - git+https://github.com/JannerM/doodad.git@janner
+++++++++++++-     - gdown>=4.6.0
+++++++++++++-diff --git a/scripts/train.py b/scripts/train.py
+++++++++++++-index 502837e..f9646f7 100644
+++++++++++++---- a/scripts/train.py
+++++++++++++-+++ b/scripts/train.py
+++++++++++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
+++++++++++++- 
+++++++++++++- class Parser(utils.Parser):
+++++++++++++-     dataset: str = 'hopper-medium-expert-v2'
+++++++++++++--    config: str = 'config.locomotion'
+++++++++++++-+    #config: str = 'config.locomotion'
+++++++++++++-+    config: str = 'config.maze2d'
+++++++++++++- 
+++++++++++++- args = Parser().parse_args('diffusion')
+++++++++++++- 
+++++++++++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
+++++++++++++-     results_folder=args.savepath,
+++++++++++++-     bucket=args.bucket,
+++++++++++++-     n_reference=args.n_reference,
+++++++++++++-+    n_samples=args.n_samples,
+++++++++++++-+
+++++++++++++- )
+++++++++++++- 
+++++++++++++- #-----------------------------------------------------------------------------#
+++++++++++++\ No newline at end of file
++++++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/args.json b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++++++index 9ad1dbc..ab949e7 100644
++++++++++++++--- a/logs/maze2d-large-v1/diffusion/H384_T256/args.json
+++++++++++++++++ b/logs/maze2d-large-v1/diffusion/H384_T256/args.json
++++++++++++++@@ -3,13 +3,13 @@
++++++++++++++     "add_extras": {
++++++++++++++         "_string": "<bound method Parser.add_extras of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++++         "_type": "python_object (type = method)",
++++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoUYaUUpQu"
+++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCXNhdmVfZGlmZpRoAmgGaAiGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoC4aUUpSMCXNhdmVfZnJlcZRN6AOMC3NhbXBsZV9mcmVxlE3oA4wLbl9yZWZlcmVuY2WUSzKMCWF0dGVudGlvbpSJjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAhzZXRfc2VlZJRoAmgGaBSGlFKUjAt1c2VfcGFkZGluZ5SJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjA1zYXZlX3BhcmFsbGVslImMCmFkZF9leHRyYXOUaAJoBmgchpRSlIwMbG9zc193ZWlnaHRzlE6MEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwJZGltX211bHRzlEsBSwRLCIeUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCWxvc3NfdHlwZZSMAmwylIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjApnZXRfY29tbWl0lGgCaAZoKIaUUpSMDWNsaXBfZGVub2lzZWSUiIwZZ3JhZGllbnRfYWNjdW11bGF0ZV9ldmVyeZRLAowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwHaG9yaXpvbpRNgAGMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtyZWFkX2NvbmZpZ5RoAmgGaDGGlFKUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMBmJ1Y2tldJROjAZkZXZpY2WUjARjdWRhlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmg/hpRSlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoRIaUUpSMB2xvZ2Jhc2WUjARsb2dzlIwNbG9zc19kaXNjb3VudJRLAYwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNYWN0aW9uX3dlaWdodJRLAYwMc2V0X2xvYWRiYXNllGgCaAZoToaUUpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwJZW1hX2RlY2F5lEc/79cKPXCj14wHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMD3ByZWRpY3RfZXBzaWxvbpSJdWJoHIaUUpQu"
++++++++++++++     },
++++++++++++++     "attention": false,
++++++++++++++     "batch_size": 32,
++++++++++++++     "bucket": null,
++++++++++++++     "clip_denoised": true,
++++++++++++++-    "commit": "7ea422860cc0106e5ca5949d980f04b799d5462c main",
+++++++++++++++    "commit": "0b1f5308ae6af693fd9de211540bb0fc9595c5e7 main",
++++++++++++++     "config": "config.maze2d",
++++++++++++++     "dataset": "maze2d-large-v1",
++++++++++++++     "device": "cuda",
++++++++++++++@@ -26,18 +26,18 @@
++++++++++++++     "eval_fstrings": {
++++++++++++++         "_string": "<bound method Parser.eval_fstrings of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++++         "_type": "python_object (type = method)",
++++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFYaUUpQu"
+++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCXNhdmVfZGlmZpRoAmgGaAiGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoC4aUUpSMCXNhdmVfZnJlcZRN6AOMC3NhbXBsZV9mcmVxlE3oA4wLbl9yZWZlcmVuY2WUSzKMCWF0dGVudGlvbpSJjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAhzZXRfc2VlZJRoAmgGaBSGlFKUjAt1c2VfcGFkZGluZ5SJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjA1zYXZlX3BhcmFsbGVslImMCmFkZF9leHRyYXOUaAJoBmgchpRSlIwMbG9zc193ZWlnaHRzlE6MEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwJZGltX211bHRzlEsBSwRLCIeUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCWxvc3NfdHlwZZSMAmwylIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjApnZXRfY29tbWl0lGgCaAZoKIaUUpSMDWNsaXBfZGVub2lzZWSUiIwZZ3JhZGllbnRfYWNjdW11bGF0ZV9ldmVyeZRLAowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwHaG9yaXpvbpRNgAGMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtyZWFkX2NvbmZpZ5RoAmgGaDGGlFKUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMBmJ1Y2tldJROjAZkZXZpY2WUjARjdWRhlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmg/hpRSlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoRIaUUpSMB2xvZ2Jhc2WUjARsb2dzlIwNbG9zc19kaXNjb3VudJRLAYwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNYWN0aW9uX3dlaWdodJRLAYwMc2V0X2xvYWRiYXNllGgCaAZoToaUUpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwJZW1hX2RlY2F5lEc/79cKPXCj14wHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMD3ByZWRpY3RfZXBzaWxvbpSJdWJoC4aUUpQu"
++++++++++++++     },
++++++++++++++     "exp_name": "diffusion/H384_T256",
++++++++++++++     "generate_exp_name": {
++++++++++++++         "_string": "<bound method Parser.generate_exp_name of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++++         "_type": "python_object (type = method)",
++++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJ4aUUpQu"
+++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCXNhdmVfZGlmZpRoAmgGaAiGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoC4aUUpSMCXNhdmVfZnJlcZRN6AOMC3NhbXBsZV9mcmVxlE3oA4wLbl9yZWZlcmVuY2WUSzKMCWF0dGVudGlvbpSJjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAhzZXRfc2VlZJRoAmgGaBSGlFKUjAt1c2VfcGFkZGluZ5SJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjA1zYXZlX3BhcmFsbGVslImMCmFkZF9leHRyYXOUaAJoBmgchpRSlIwMbG9zc193ZWlnaHRzlE6MEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwJZGltX211bHRzlEsBSwRLCIeUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCWxvc3NfdHlwZZSMAmwylIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjApnZXRfY29tbWl0lGgCaAZoKIaUUpSMDWNsaXBfZGVub2lzZWSUiIwZZ3JhZGllbnRfYWNjdW11bGF0ZV9ldmVyeZRLAowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwHaG9yaXpvbpRNgAGMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtyZWFkX2NvbmZpZ5RoAmgGaDGGlFKUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMBmJ1Y2tldJROjAZkZXZpY2WUjARjdWRhlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmg/hpRSlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoRIaUUpSMB2xvZ2Jhc2WUjARsb2dzlIwNbG9zc19kaXNjb3VudJRLAYwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNYWN0aW9uX3dlaWdodJRLAYwMc2V0X2xvYWRiYXNllGgCaAZoToaUUpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwJZW1hX2RlY2F5lEc/79cKPXCj14wHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMD3ByZWRpY3RfZXBzaWxvbpSJdWJoP4aUUpQu"
++++++++++++++     },
++++++++++++++     "get_commit": {
++++++++++++++         "_string": "<bound method Parser.get_commit of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++++         "_type": "python_object (type = method)",
++++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoJIaUUpQu"
+++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCXNhdmVfZGlmZpRoAmgGaAiGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoC4aUUpSMCXNhdmVfZnJlcZRN6AOMC3NhbXBsZV9mcmVxlE3oA4wLbl9yZWZlcmVuY2WUSzKMCWF0dGVudGlvbpSJjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAhzZXRfc2VlZJRoAmgGaBSGlFKUjAt1c2VfcGFkZGluZ5SJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjA1zYXZlX3BhcmFsbGVslImMCmFkZF9leHRyYXOUaAJoBmgchpRSlIwMbG9zc193ZWlnaHRzlE6MEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwJZGltX211bHRzlEsBSwRLCIeUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCWxvc3NfdHlwZZSMAmwylIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjApnZXRfY29tbWl0lGgCaAZoKIaUUpSMDWNsaXBfZGVub2lzZWSUiIwZZ3JhZGllbnRfYWNjdW11bGF0ZV9ldmVyeZRLAowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwHaG9yaXpvbpRNgAGMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtyZWFkX2NvbmZpZ5RoAmgGaDGGlFKUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMBmJ1Y2tldJROjAZkZXZpY2WUjARjdWRhlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmg/hpRSlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoRIaUUpSMB2xvZ2Jhc2WUjARsb2dzlIwNbG9zc19kaXNjb3VudJRLAYwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNYWN0aW9uX3dlaWdodJRLAYwMc2V0X2xvYWRiYXNllGgCaAZoToaUUpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwJZW1hX2RlY2F5lEc/79cKPXCj14wHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMD3ByZWRpY3RfZXBzaWxvbpSJdWJoKIaUUpQu"
++++++++++++++     },
++++++++++++++     "gradient_accumulate_every": 2,
++++++++++++++     "horizon": 384,
++++++++++++++@@ -51,7 +51,7 @@
++++++++++++++     "mkdir": {
++++++++++++++         "_string": "<bound method Parser.mkdir of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++++         "_type": "python_object (type = method)",
++++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoN4aUUpQu"
+++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCXNhdmVfZGlmZpRoAmgGaAiGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoC4aUUpSMCXNhdmVfZnJlcZRN6AOMC3NhbXBsZV9mcmVxlE3oA4wLbl9yZWZlcmVuY2WUSzKMCWF0dGVudGlvbpSJjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAhzZXRfc2VlZJRoAmgGaBSGlFKUjAt1c2VfcGFkZGluZ5SJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjA1zYXZlX3BhcmFsbGVslImMCmFkZF9leHRyYXOUaAJoBmgchpRSlIwMbG9zc193ZWlnaHRzlE6MEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwJZGltX211bHRzlEsBSwRLCIeUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCWxvc3NfdHlwZZSMAmwylIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjApnZXRfY29tbWl0lGgCaAZoKIaUUpSMDWNsaXBfZGVub2lzZWSUiIwZZ3JhZGllbnRfYWNjdW11bGF0ZV9ldmVyeZRLAowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwHaG9yaXpvbpRNgAGMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtyZWFkX2NvbmZpZ5RoAmgGaDGGlFKUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMBmJ1Y2tldJROjAZkZXZpY2WUjARjdWRhlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmg/hpRSlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoRIaUUpSMB2xvZ2Jhc2WUjARsb2dzlIwNbG9zc19kaXNjb3VudJRLAYwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNYWN0aW9uX3dlaWdodJRLAYwMc2V0X2xvYWRiYXNllGgCaAZoToaUUpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwJZW1hX2RlY2F5lEc/79cKPXCj14wHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMD3ByZWRpY3RfZXBzaWxvbpSJdWJoRIaUUpQu"
++++++++++++++     },
++++++++++++++     "model": "models.TemporalUnet",
++++++++++++++     "n_diffusion_steps": 256,
++++++++++++++@@ -69,21 +69,21 @@
++++++++++++++     "read_config": {
++++++++++++++         "_string": "<bound method Parser.read_config of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++++         "_type": "python_object (type = method)",
++++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoQoaUUpQu"
+++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCXNhdmVfZGlmZpRoAmgGaAiGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoC4aUUpSMCXNhdmVfZnJlcZRN6AOMC3NhbXBsZV9mcmVxlE3oA4wLbl9yZWZlcmVuY2WUSzKMCWF0dGVudGlvbpSJjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAhzZXRfc2VlZJRoAmgGaBSGlFKUjAt1c2VfcGFkZGluZ5SJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjA1zYXZlX3BhcmFsbGVslImMCmFkZF9leHRyYXOUaAJoBmgchpRSlIwMbG9zc193ZWlnaHRzlE6MEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwJZGltX211bHRzlEsBSwRLCIeUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCWxvc3NfdHlwZZSMAmwylIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjApnZXRfY29tbWl0lGgCaAZoKIaUUpSMDWNsaXBfZGVub2lzZWSUiIwZZ3JhZGllbnRfYWNjdW11bGF0ZV9ldmVyeZRLAowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwHaG9yaXpvbpRNgAGMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtyZWFkX2NvbmZpZ5RoAmgGaDGGlFKUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMBmJ1Y2tldJROjAZkZXZpY2WUjARjdWRhlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmg/hpRSlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoRIaUUpSMB2xvZ2Jhc2WUjARsb2dzlIwNbG9zc19kaXNjb3VudJRLAYwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNYWN0aW9uX3dlaWdodJRLAYwMc2V0X2xvYWRiYXNllGgCaAZoToaUUpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwJZW1hX2RlY2F5lEc/79cKPXCj14wHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMD3ByZWRpY3RfZXBzaWxvbpSJdWJoMYaUUpQu"
++++++++++++++     },
++++++++++++++     "renderer": "utils.Maze2dRenderer",
++++++++++++++     "reproducibility": {
++++++++++++++         "command_line": "python scripts/train.py --config config.maze2d --dataset maze2d-large-v1",
++++++++++++++         "git_has_uncommitted_changes": true,
++++++++++++++         "git_root": "/home/wslabtop/project/diffuser",
++++++++++++++-        "git_url": "https://github.com/jannerm/diffuser/tree/7ea422860cc0106e5ca5949d980f04b799d5462c",
++++++++++++++-        "time": "Fri Nov  8 09:50:02 2024"
+++++++++++++++        "git_url": "https://github.com/kws1611/diffuser/tree/0b1f5308ae6af693fd9de211540bb0fc9595c5e7",
+++++++++++++++        "time": "Fri Nov  8 09:55:05 2024"
++++++++++++++     },
++++++++++++++     "sample_freq": 1000,
++++++++++++++     "save_diff": {
++++++++++++++         "_string": "<bound method Parser.save_diff of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++++         "_type": "python_object (type = method)",
++++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoR4aUUpQu"
+++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCXNhdmVfZGlmZpRoAmgGaAiGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoC4aUUpSMCXNhdmVfZnJlcZRN6AOMC3NhbXBsZV9mcmVxlE3oA4wLbl9yZWZlcmVuY2WUSzKMCWF0dGVudGlvbpSJjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAhzZXRfc2VlZJRoAmgGaBSGlFKUjAt1c2VfcGFkZGluZ5SJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjA1zYXZlX3BhcmFsbGVslImMCmFkZF9leHRyYXOUaAJoBmgchpRSlIwMbG9zc193ZWlnaHRzlE6MEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwJZGltX211bHRzlEsBSwRLCIeUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCWxvc3NfdHlwZZSMAmwylIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjApnZXRfY29tbWl0lGgCaAZoKIaUUpSMDWNsaXBfZGVub2lzZWSUiIwZZ3JhZGllbnRfYWNjdW11bGF0ZV9ldmVyeZRLAowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwHaG9yaXpvbpRNgAGMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtyZWFkX2NvbmZpZ5RoAmgGaDGGlFKUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMBmJ1Y2tldJROjAZkZXZpY2WUjARjdWRhlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmg/hpRSlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoRIaUUpSMB2xvZ2Jhc2WUjARsb2dzlIwNbG9zc19kaXNjb3VudJRLAYwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNYWN0aW9uX3dlaWdodJRLAYwMc2V0X2xvYWRiYXNllGgCaAZoToaUUpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwJZW1hX2RlY2F5lEc/79cKPXCj14wHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMD3ByZWRpY3RfZXBzaWxvbpSJdWJoCIaUUpQu"
++++++++++++++     },
++++++++++++++     "save_freq": 1000,
++++++++++++++     "save_parallel": false,
++++++++++++++@@ -91,12 +91,12 @@
++++++++++++++     "set_loadbase": {
++++++++++++++         "_string": "<bound method Parser.set_loadbase of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++++         "_type": "python_object (type = method)",
++++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoV4aUUpQu"
+++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCXNhdmVfZGlmZpRoAmgGaAiGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoC4aUUpSMCXNhdmVfZnJlcZRN6AOMC3NhbXBsZV9mcmVxlE3oA4wLbl9yZWZlcmVuY2WUSzKMCWF0dGVudGlvbpSJjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAhzZXRfc2VlZJRoAmgGaBSGlFKUjAt1c2VfcGFkZGluZ5SJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjA1zYXZlX3BhcmFsbGVslImMCmFkZF9leHRyYXOUaAJoBmgchpRSlIwMbG9zc193ZWlnaHRzlE6MEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwJZGltX211bHRzlEsBSwRLCIeUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCWxvc3NfdHlwZZSMAmwylIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjApnZXRfY29tbWl0lGgCaAZoKIaUUpSMDWNsaXBfZGVub2lzZWSUiIwZZ3JhZGllbnRfYWNjdW11bGF0ZV9ldmVyeZRLAowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwHaG9yaXpvbpRNgAGMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtyZWFkX2NvbmZpZ5RoAmgGaDGGlFKUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMBmJ1Y2tldJROjAZkZXZpY2WUjARjdWRhlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmg/hpRSlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoRIaUUpSMB2xvZ2Jhc2WUjARsb2dzlIwNbG9zc19kaXNjb3VudJRLAYwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNYWN0aW9uX3dlaWdodJRLAYwMc2V0X2xvYWRiYXNllGgCaAZoToaUUpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwJZW1hX2RlY2F5lEc/79cKPXCj14wHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMD3ByZWRpY3RfZXBzaWxvbpSJdWJoToaUUpQu"
++++++++++++++     },
++++++++++++++     "set_seed": {
++++++++++++++         "_string": "<bound method Parser.set_seed of Parser(prog='train.py', usage=None, description=None, formatter_class=<class 'argparse.HelpFormatter'>, conflict_handler='error', add_help=True)>",
++++++++++++++         "_type": "python_object (type = method)",
++++++++++++++-        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMBmJ1Y2tldJROjAdsb2diYXNllIwEbG9nc5SMCHJlbmRlcmVylIwUdXRpbHMuTWF6ZTJkUmVuZGVyZXKUjAluX3NhbXBsZXOUSwqMB2hvcml6b26UTYABjAtzYW1wbGVfZnJlcZRN6AOMCWVtYV9kZWNheZRHP+/XCj1wo9eMCHNldF9zZWVklGgCaAZoEYaUUpSMGWdyYWRpZW50X2FjY3VtdWxhdGVfZXZlcnmUSwKMDWV2YWxfZnN0cmluZ3OUaAJoBmgVhpRSlIwRbl9kaWZmdXNpb25fc3RlcHOUTQABjAZwcmVmaXiUjApkaWZmdXNpb24vlIwHbl9zYXZlc5RLMowMbG9zc193ZWlnaHRzlE6MCWRpbV9tdWx0c5RLAUsESwiHlIwJYXR0ZW50aW9ulImMCGV4cF9uYW1llIwTZGlmZnVzaW9uL0gzODRfVDI1NpSMCWRpZmZ1c2lvbpSMGG1vZGVscy5HYXVzc2lhbkRpZmZ1c2lvbpSMCmdldF9jb21taXSUaAJoBmgkhpRSlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmgnhpRSlIwGY29uZmlnlIwNY29uZmlnLm1hemUyZJSMCWxvc3NfdHlwZZSMAmwylIwNbGVhcm5pbmdfcmF0ZZRHPyo24uscQy2MC3VzZV9wYWRkaW5nlImMDWNsaXBfZGVub2lzZWSUiIwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjApiYXRjaF9zaXpllEsgjAZkZXZpY2WUjARjdWRhlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoN4aUUpSMBW1vZGVslIwTbW9kZWxzLlRlbXBvcmFsVW5ldJSMDXNhdmVfcGFyYWxsZWyUiYwLbl9yZWZlcmVuY2WUSzKMDnByZXByb2Nlc3NfZm5zlF2UjBRtYXplMmRfc2V0X3Rlcm1pbmFsc5RhjA1sb3NzX2Rpc2NvdW50lEsBjAtyZWFkX2NvbmZpZ5RoAmgGaEKGlFKUjAZjb21taXSUjC03ZWE0MjI4NjBjYzAxMDZlNWNhNTk0OWQ5ODBmMDRiNzk5ZDU0NjJjIG1haW6UjAlzYXZlX2RpZmaUaAJoBmhHhpRSlIwJc2F2ZV9mcmVxlE3oA4wNYWN0aW9uX3dlaWdodJRLAYwTdGVybWluYXRpb25fcGVuYWx0eZROjApub3JtYWxpemVylIwQTGltaXRzTm9ybWFsaXplcpSMBmxvYWRlcpSMFGRhdGFzZXRzLkdvYWxEYXRhc2V0lIwKYWRkX2V4dHJhc5RoAmgGaFGGlFKUjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjAxzZXRfbG9hZGJhc2WUaAJoBmhXhpRSlIwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMD3ByZWRpY3RfZXBzaWxvbpSJdWJoEYaUUpQu"
+++++++++++++++        "_value": "gASVtwQAAAAAAACMCGJ1aWx0aW5zlIwHZ2V0YXR0cpSTlIwIX19tYWluX1+UjAZQYXJzZXKUk5QpgZR9lCiMCXNhdmVfZGlmZpRoAmgGaAiGlFKUjA1ldmFsX2ZzdHJpbmdzlGgCaAZoC4aUUpSMCXNhdmVfZnJlcZRN6AOMC3NhbXBsZV9mcmVxlE3oA4wLbl9yZWZlcmVuY2WUSzKMCWF0dGVudGlvbpSJjAhzYXZlcGF0aJSMKGxvZ3MvbWF6ZTJkLWxhcmdlLXYxL2RpZmZ1c2lvbi9IMzg0X1QyNTaUjAhzZXRfc2VlZJRoAmgGaBSGlFKUjAt1c2VfcGFkZGluZ5SJjAVtb2RlbJSME21vZGVscy5UZW1wb3JhbFVuZXSUjA9tYXhfcGF0aF9sZW5ndGiUTUCcjA1zYXZlX3BhcmFsbGVslImMCmFkZF9leHRyYXOUaAJoBmgchpRSlIwMbG9zc193ZWlnaHRzlE6MEW5fZGlmZnVzaW9uX3N0ZXBzlE0AAYwJZGltX211bHRzlEsBSwRLCIeUjBN0ZXJtaW5hdGlvbl9wZW5hbHR5lE6MCWxvc3NfdHlwZZSMAmwylIwKYmF0Y2hfc2l6ZZRLIIwJbl9zYW1wbGVzlEsKjApnZXRfY29tbWl0lGgCaAZoKIaUUpSMDWNsaXBfZGVub2lzZWSUiIwZZ3JhZGllbnRfYWNjdW11bGF0ZV9ldmVyeZRLAowGY29tbWl0lIwtMGIxZjUzMDhhZTZhZjY5M2ZkOWRlMjExNTQwYmIwZmM5NTk1YzVlNyBtYWlulIwHaG9yaXpvbpRNgAGMDWxlYXJuaW5nX3JhdGWURz8qNuLrHEMtjAtyZWFkX2NvbmZpZ5RoAmgGaDGGlFKUjAZjb25maWeUjA1jb25maWcubWF6ZTJklIwGbG9hZGVylIwUZGF0YXNldHMuR29hbERhdGFzZXSUjA5wcmVwcm9jZXNzX2Zuc5RdlIwUbWF6ZTJkX3NldF90ZXJtaW5hbHOUYYwNbl90cmFpbl9zdGVwc5RHQT6EgAAAAACMBmJ1Y2tldJROjAZkZXZpY2WUjARjdWRhlIwRZ2VuZXJhdGVfZXhwX25hbWWUaAJoBmg/hpRSlIwHZGF0YXNldJSMD21hemUyZC1sYXJnZS12MZSMBW1rZGlylGgCaAZoRIaUUpSMB2xvZ2Jhc2WUjARsb2dzlIwNbG9zc19kaXNjb3VudJRLAYwRbl9zdGVwc19wZXJfZXBvY2iUTRAnjAhyZW5kZXJlcpSMFHV0aWxzLk1hemUyZFJlbmRlcmVylIwNYWN0aW9uX3dlaWdodJRLAYwMc2V0X2xvYWRiYXNllGgCaAZoToaUUpSMCm5vcm1hbGl6ZXKUjBBMaW1pdHNOb3JtYWxpemVylIwJZGlmZnVzaW9ulIwYbW9kZWxzLkdhdXNzaWFuRGlmZnVzaW9ulIwIZXhwX25hbWWUjBNkaWZmdXNpb24vSDM4NF9UMjU2lIwJZW1hX2RlY2F5lEc/79cKPXCj14wHbl9zYXZlc5RLMowGcHJlZml4lIwKZGlmZnVzaW9uL5SMD3ByZWRpY3RfZXBzaWxvbpSJdWJoFIaUUpQu"
++++++++++++++     },
++++++++++++++     "termination_penalty": null,
++++++++++++++     "use_padding": false
++++++++++++ \ No newline at end of file
++++++++++++-+        return tuple()
++++++++++++-diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
++++++++++++-index 8659ff1..d01c272 100644
++++++++++++---- a/diffuser/utils/rendering.py
++++++++++++-+++ b/diffuser/utils/rendering.py
++++++++++++-@@ -36,15 +36,44 @@ def env_map(env_name):
++++++++++++- #------------------------------ helper functions -----------------------------#
++++++++++++- #-----------------------------------------------------------------------------#
++++++++++++- 
++++++++++++-+def atmost_2d(x):
++++++++++++-+    while x.ndim > 2:
++++++++++++-+        x = x.squeeze(0)
++++++++++++-+    return x
++++++++++++-+
++++++++++++-+def zipsafe(*args):
++++++++++++-+    length = len(args[0])
++++++++++++-+    assert all([len(a) == length for a in args])
++++++++++++-+    return zip(*args)
++++++++++++-+
++++++++++++-+def zipkw(*args, **kwargs):
++++++++++++-+    nargs = len(args)
++++++++++++-+    keys = kwargs.keys()
++++++++++++-+    vals = [kwargs[k] for k in keys]
++++++++++++-+    zipped = zipsafe(*args, *vals)
++++++++++++-+    for items in zipped:
++++++++++++-+        zipped_args = items[:nargs]
++++++++++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
++++++++++++-+        yield zipped_args, zipped_kwargs
++++++++++++-+
++++++++++++- def get_image_mask(img):
++++++++++++-     background = (img == 255).all(axis=-1, keepdims=True)
++++++++++++-     mask = ~background.repeat(3, axis=-1)
++++++++++++-     return mask
++++++++++++- 
++++++++++++--def atmost_2d(x):
++++++++++++--    while x.ndim > 2:
++++++++++++--        x = x.squeeze(0)
++++++++++++--    return x
++++++++++++-+def plot2img(fig, remove_margins=True):
++++++++++++-+    # https://stackoverflow.com/a/35362787/2912349
++++++++++++-+    # https://stackoverflow.com/a/54334430/2912349
++++++++++++-+
++++++++++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
++++++++++++-+
++++++++++++-+    if remove_margins:
++++++++++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
++++++++++++-+
++++++++++++-+    canvas = FigureCanvasAgg(fig)
++++++++++++-+    canvas.draw()
++++++++++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
++++++++++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
++++++++++++- 
++++++++++++- #-----------------------------------------------------------------------------#
++++++++++++- #---------------------------------- renderers --------------------------------#
++++++++++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
++++++++++++-         else:
++++++++++++-             self.env = env
++++++++++++-         ## - 1 because the envs in renderer are fully-observed
++++++++++++-+        ## @TODO : clean up
++++++++++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
++++++++++++-         self.action_dim = np.prod(self.env.action_space.shape)
++++++++++++-         try:
++++++++++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
++++++++++++-     def __call__(self, *args, **kwargs):
++++++++++++-         return self.renders(*args, **kwargs)
++++++++++++- 
++++++++++++-+#-----------------------------------------------------------------------------#
++++++++++++-+#----------------------------------- maze2d ----------------------------------#
++++++++++++-+#-----------------------------------------------------------------------------#
++++++++++++-+
++++++++++++-+MAZE_BOUNDS = {
++++++++++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
++++++++++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
++++++++++++-+    'maze2d-large-v1': (0, 9, 0, 12)
++++++++++++-+}
++++++++++++-+
++++++++++++-+class MazeRenderer:
++++++++++++-+
++++++++++++-+    def __init__(self, env):
++++++++++++-+        if type(env) is str: env = load_environment(env)
++++++++++++-+        self._config = env._config
++++++++++++-+        self._background = self._config != ' '
++++++++++++-+        self._remove_margins = False
++++++++++++-+        self._extent = (0, 1, 1, 0)
++++++++++++-+
++++++++++++-+    def renders(self, observations, conditions=None, title=None):
++++++++++++-+        plt.clf()
++++++++++++-+        fig = plt.gcf()
++++++++++++-+        fig.set_size_inches(5, 5)
++++++++++++-+        plt.imshow(self._background * .5,
++++++++++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
++++++++++++-+
++++++++++++-+        path_length = len(observations)
++++++++++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
++++++++++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
++++++++++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
++++++++++++-+        plt.axis('off')
++++++++++++-+        plt.title(title)
++++++++++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
++++++++++++-+        return img
++++++++++++-+
++++++++++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
++++++++++++-+        '''
++++++++++++-+            savepath : str
++++++++++++-+            observations : [ n_paths x horizon x 2 ]
++++++++++++-+        '''
++++++++++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
++++++++++++-+
++++++++++++-+        images = []
++++++++++++-+        for path, kw in zipkw(paths, **kwargs):
++++++++++++-+            img = self.renders(*path, **kw)
++++++++++++-+            images.append(img)
++++++++++++-+        images = np.stack(images, axis=0)
++++++++++++-+
++++++++++++-+        nrow = len(images) // ncol
++++++++++++-+        images = einops.rearrange(images,
++++++++++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
++++++++++++-+        imageio.imsave(savepath, images)
++++++++++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
++++++++++++-+
++++++++++++-+class Maze2dRenderer(MazeRenderer):
++++++++++++-+
++++++++++++-+    def __init__(self, env, observation_dim=None):
++++++++++++-+        self.env_name = env
++++++++++++-+        self.env = load_environment(env)
++++++++++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
++++++++++++-+        self.action_dim = np.prod(self.env.action_space.shape)
++++++++++++-+        self.goal = None
++++++++++++-+        self._background = self.env.maze_arr == 10
++++++++++++-+        self._remove_margins = False
++++++++++++-+        self._extent = (0, 1, 1, 0)
++++++++++++-+
++++++++++++-+    def renders(self, observations, conditions=None, **kwargs):
++++++++++++-+        bounds = MAZE_BOUNDS[self.env_name]
++++++++++++-+
++++++++++++-+        observations = observations + .5
++++++++++++-+        if len(bounds) == 2:
++++++++++++-+            _, scale = bounds
++++++++++++-+            observations /= scale
++++++++++++-+        elif len(bounds) == 4:
++++++++++++-+            _, iscale, _, jscale = bounds
++++++++++++-+            observations[:, 0] /= iscale
++++++++++++-+            observations[:, 1] /= jscale
++++++++++++-+        else:
++++++++++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
++++++++++++-+
++++++++++++-+        if conditions is not None:
++++++++++++-+            conditions /= scale
++++++++++++-+        return super().renders(observations, conditions, **kwargs)
++++++++++++-+
++++++++++++- #-----------------------------------------------------------------------------#
++++++++++++- #---------------------------------- rollouts ---------------------------------#
++++++++++++- #-----------------------------------------------------------------------------#
++++++++++++-diff --git a/environment.yml b/environment.yml
++++++++++++-index c14a0cf..e56b6a9 100644
++++++++++++---- a/environment.yml
++++++++++++-+++ b/environment.yml
++++++++++++-@@ -1,4 +1,4 @@
++++++++++++--name: diffuser
++++++++++++-+name: diffuser_2
++++++++++++- channels:
++++++++++++- - defaults
++++++++++++- - conda-forge
++++++++++++-@@ -12,9 +12,7 @@ dependencies:
++++++++++++-     - gym==0.18.0
++++++++++++-     - mujoco-py==2.0.2.13
++++++++++++-     - matplotlib==3.3.4
++++++++++++--    - torch==1.9.1+cu111
++++++++++++-     - typed-argument-parser
++++++++++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
++++++++++++-     - scikit-image==0.17.2
++++++++++++-     - scikit-video==1.1.11
++++++++++++-     - gitpython
++++++++++++-@@ -31,5 +29,4 @@ dependencies:
++++++++++++-     - crcmod # for fast gsutil rsync on large files
++++++++++++-     - google-api-python-client
++++++++++++-     - cryptography
++++++++++++--    - git+https://github.com/JannerM/doodad.git@janner
++++++++++++-     - gdown>=4.6.0
++++++++++++ diff --git a/scripts/train.py b/scripts/train.py
++++++++++++-index 502837e..f9646f7 100644
+++++++++++++index f9646f7..d3ed429 100644
++++++++++++ --- a/scripts/train.py
++++++++++++ +++ b/scripts/train.py
++++++++++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
++++++++++++- 
++++++++++++- class Parser(utils.Parser):
++++++++++++-     dataset: str = 'hopper-medium-expert-v2'
++++++++++++--    config: str = 'config.locomotion'
++++++++++++-+    #config: str = 'config.locomotion'
++++++++++++-+    config: str = 'config.maze2d'
++++++++++++- 
++++++++++++- args = Parser().parse_args('diffusion')
++++++++++++- 
++++++++++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
+++++++++++++@@ -87,7 +87,6 @@ trainer_config = utils.Config(
++++++++++++      results_folder=args.savepath,
++++++++++++      bucket=args.bucket,
++++++++++++      n_reference=args.n_reference,
++++++++++++-+    n_samples=args.n_samples,
++++++++++++-+
+++++++++++++-    n_samples=args.n_samples,
+++++++++++++ 
++++++++++++  )
++++++++++++  
++++++++++++- #-----------------------------------------------------------------------------#
+++++++++++ \ No newline at end of file
+++++++++++-+        return tuple()
+++++++++++-diff --git a/diffuser/utils/rendering.py b/diffuser/utils/rendering.py
+++++++++++-index 8659ff1..d01c272 100644
+++++++++++---- a/diffuser/utils/rendering.py
+++++++++++-+++ b/diffuser/utils/rendering.py
+++++++++++-@@ -36,15 +36,44 @@ def env_map(env_name):
+++++++++++- #------------------------------ helper functions -----------------------------#
+++++++++++- #-----------------------------------------------------------------------------#
+++++++++++- 
+++++++++++-+def atmost_2d(x):
+++++++++++-+    while x.ndim > 2:
+++++++++++-+        x = x.squeeze(0)
+++++++++++-+    return x
+++++++++++-+
+++++++++++-+def zipsafe(*args):
+++++++++++-+    length = len(args[0])
+++++++++++-+    assert all([len(a) == length for a in args])
+++++++++++-+    return zip(*args)
+++++++++++-+
+++++++++++-+def zipkw(*args, **kwargs):
+++++++++++-+    nargs = len(args)
+++++++++++-+    keys = kwargs.keys()
+++++++++++-+    vals = [kwargs[k] for k in keys]
+++++++++++-+    zipped = zipsafe(*args, *vals)
+++++++++++-+    for items in zipped:
+++++++++++-+        zipped_args = items[:nargs]
+++++++++++-+        zipped_kwargs = {k: v for k, v in zipsafe(keys, items[nargs:])}
+++++++++++-+        yield zipped_args, zipped_kwargs
+++++++++++-+
+++++++++++- def get_image_mask(img):
+++++++++++-     background = (img == 255).all(axis=-1, keepdims=True)
+++++++++++-     mask = ~background.repeat(3, axis=-1)
+++++++++++-     return mask
+++++++++++- 
+++++++++++--def atmost_2d(x):
+++++++++++--    while x.ndim > 2:
+++++++++++--        x = x.squeeze(0)
+++++++++++--    return x
+++++++++++-+def plot2img(fig, remove_margins=True):
+++++++++++-+    # https://stackoverflow.com/a/35362787/2912349
+++++++++++-+    # https://stackoverflow.com/a/54334430/2912349
+++++++++++-+
+++++++++++-+    from matplotlib.backends.backend_agg import FigureCanvasAgg
+++++++++++-+
+++++++++++-+    if remove_margins:
+++++++++++-+        fig.subplots_adjust(left=0, bottom=0, right=1, top=1, wspace=0, hspace=0)
+++++++++++-+
+++++++++++-+    canvas = FigureCanvasAgg(fig)
+++++++++++-+    canvas.draw()
+++++++++++-+    img_as_string, (width, height) = canvas.print_to_buffer()
+++++++++++-+    return np.fromstring(img_as_string, dtype='uint8').reshape((height, width, 4))
+++++++++++- 
+++++++++++- #-----------------------------------------------------------------------------#
+++++++++++- #---------------------------------- renderers --------------------------------#
+++++++++++-@@ -62,6 +91,7 @@ class MuJoCoRenderer:
+++++++++++-         else:
+++++++++++-             self.env = env
+++++++++++-         ## - 1 because the envs in renderer are fully-observed
+++++++++++-+        ## @TODO : clean up
+++++++++++-         self.observation_dim = np.prod(self.env.observation_space.shape) - 1
+++++++++++-         self.action_dim = np.prod(self.env.action_space.shape)
+++++++++++-         try:
+++++++++++-@@ -236,6 +266,90 @@ class MuJoCoRenderer:
+++++++++++-     def __call__(self, *args, **kwargs):
+++++++++++-         return self.renders(*args, **kwargs)
+++++++++++- 
+++++++++++-+#-----------------------------------------------------------------------------#
+++++++++++-+#----------------------------------- maze2d ----------------------------------#
+++++++++++-+#-----------------------------------------------------------------------------#
+++++++++++-+
+++++++++++-+MAZE_BOUNDS = {
+++++++++++-+    'maze2d-umaze-v1': (0, 5, 0, 5),
+++++++++++-+    'maze2d-medium-v1': (0, 8, 0, 8),
+++++++++++-+    'maze2d-large-v1': (0, 9, 0, 12)
+++++++++++-+}
+++++++++++-+
+++++++++++-+class MazeRenderer:
+++++++++++-+
+++++++++++-+    def __init__(self, env):
+++++++++++-+        if type(env) is str: env = load_environment(env)
+++++++++++-+        self._config = env._config
+++++++++++-+        self._background = self._config != ' '
+++++++++++-+        self._remove_margins = False
+++++++++++-+        self._extent = (0, 1, 1, 0)
+++++++++++-+
+++++++++++-+    def renders(self, observations, conditions=None, title=None):
+++++++++++-+        plt.clf()
+++++++++++-+        fig = plt.gcf()
+++++++++++-+        fig.set_size_inches(5, 5)
+++++++++++-+        plt.imshow(self._background * .5,
+++++++++++-+            extent=self._extent, cmap=plt.cm.binary, vmin=0, vmax=1)
+++++++++++-+
+++++++++++-+        path_length = len(observations)
+++++++++++-+        colors = plt.cm.jet(np.linspace(0,1,path_length))
+++++++++++-+        plt.plot(observations[:,1], observations[:,0], c='black', zorder=10)
+++++++++++-+        plt.scatter(observations[:,1], observations[:,0], c=colors, zorder=20)
+++++++++++-+        plt.axis('off')
+++++++++++-+        plt.title(title)
+++++++++++-+        img = plot2img(fig, remove_margins=self._remove_margins)
+++++++++++-+        return img
+++++++++++-+
+++++++++++-+    def composite(self, savepath, paths, ncol=5, **kwargs):
+++++++++++-+        '''
+++++++++++-+            savepath : str
+++++++++++-+            observations : [ n_paths x horizon x 2 ]
+++++++++++-+        '''
+++++++++++-+        assert len(paths) % ncol == 0, 'Number of paths must be divisible by number of columns'
+++++++++++-+
+++++++++++-+        images = []
+++++++++++-+        for path, kw in zipkw(paths, **kwargs):
+++++++++++-+            img = self.renders(*path, **kw)
+++++++++++-+            images.append(img)
+++++++++++-+        images = np.stack(images, axis=0)
+++++++++++-+
+++++++++++-+        nrow = len(images) // ncol
+++++++++++-+        images = einops.rearrange(images,
+++++++++++-+            '(nrow ncol) H W C -> (nrow H) (ncol W) C', nrow=nrow, ncol=ncol)
+++++++++++-+        imageio.imsave(savepath, images)
+++++++++++-+        print(f'Saved {len(paths)} samples to: {savepath}')
+++++++++++-+
+++++++++++-+class Maze2dRenderer(MazeRenderer):
+++++++++++-+
+++++++++++-+    def __init__(self, env, observation_dim=None):
+++++++++++-+        self.env_name = env
+++++++++++-+        self.env = load_environment(env)
+++++++++++-+        self.observation_dim = np.prod(self.env.observation_space.shape)
+++++++++++-+        self.action_dim = np.prod(self.env.action_space.shape)
+++++++++++-+        self.goal = None
+++++++++++-+        self._background = self.env.maze_arr == 10
+++++++++++-+        self._remove_margins = False
+++++++++++-+        self._extent = (0, 1, 1, 0)
+++++++++++-+
+++++++++++-+    def renders(self, observations, conditions=None, **kwargs):
+++++++++++-+        bounds = MAZE_BOUNDS[self.env_name]
+++++++++++-+
+++++++++++-+        observations = observations + .5
+++++++++++-+        if len(bounds) == 2:
+++++++++++-+            _, scale = bounds
+++++++++++-+            observations /= scale
+++++++++++-+        elif len(bounds) == 4:
+++++++++++-+            _, iscale, _, jscale = bounds
+++++++++++-+            observations[:, 0] /= iscale
+++++++++++-+            observations[:, 1] /= jscale
+++++++++++-+        else:
+++++++++++-+            raise RuntimeError(f'Unrecognized bounds for {self.env_name}: {bounds}')
+++++++++++-+
+++++++++++-+        if conditions is not None:
+++++++++++-+            conditions /= scale
+++++++++++-+        return super().renders(observations, conditions, **kwargs)
+++++++++++-+
+++++++++++- #-----------------------------------------------------------------------------#
+++++++++++- #---------------------------------- rollouts ---------------------------------#
+++++++++++- #-----------------------------------------------------------------------------#
+++++++++++-diff --git a/environment.yml b/environment.yml
+++++++++++-index c14a0cf..e56b6a9 100644
+++++++++++---- a/environment.yml
+++++++++++-+++ b/environment.yml
+++++++++++-@@ -1,4 +1,4 @@
+++++++++++--name: diffuser
+++++++++++-+name: diffuser_2
+++++++++++- channels:
+++++++++++- - defaults
+++++++++++- - conda-forge
+++++++++++-@@ -12,9 +12,7 @@ dependencies:
+++++++++++-     - gym==0.18.0
+++++++++++-     - mujoco-py==2.0.2.13
+++++++++++-     - matplotlib==3.3.4
+++++++++++--    - torch==1.9.1+cu111
+++++++++++-     - typed-argument-parser
+++++++++++--    - git+https://github.com/Farama-Foundation/d4rl@f2a05c0d66722499bf8031b094d9af3aea7c372b#egg=d4rl
+++++++++++-     - scikit-image==0.17.2
+++++++++++-     - scikit-video==1.1.11
+++++++++++-     - gitpython
+++++++++++-@@ -31,5 +29,4 @@ dependencies:
+++++++++++-     - crcmod # for fast gsutil rsync on large files
+++++++++++-     - google-api-python-client
+++++++++++-     - cryptography
+++++++++++--    - git+https://github.com/JannerM/doodad.git@janner
+++++++++++-     - gdown>=4.6.0
+++++++++++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
+++++++++++++index f4bf52b..c1f0340 100644
+++++++++++++--- a/scripts/training.ipynb
++++++++++++++++ b/scripts/training.ipynb
+++++++++++++@@ -2,20 +2,20 @@
+++++++++++++  "cells": [
+++++++++++++   {
+++++++++++++    "cell_type": "code",
+++++++++++++-   "execution_count": 2,
++++++++++++++   "execution_count": 1,
+++++++++++++    "metadata": {},
+++++++++++++    "outputs": [
+++++++++++++     {
+++++++++++++      "name": "stdout",
+++++++++++++      "output_type": "stream",
+++++++++++++      "text": [
+++++++++++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
+++++++++++++-      "Loaded dataset with 894 samples.\n"
++++++++++++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
++++++++++++++      "Loaded dataset with 901 samples.\n"
+++++++++++++      ]
+++++++++++++     },
+++++++++++++     {
+++++++++++++      "data": {
+++++++++++++-      "image/png": "",
++++++++++++++      "image/png": "",
+++++++++++++       "text/plain": [
+++++++++++++        "<Figure size 2000x500 with 10 Axes>"
+++++++++++++       ]
+++++++++++++@@ -184,18 +184,45 @@
+++++++++++++   },
+++++++++++++   {
+++++++++++++    "cell_type": "code",
+++++++++++++-   "execution_count": 13,
++++++++++++++   "execution_count": 3,
+++++++++++++    "metadata": {},
+++++++++++++    "outputs": [
+++++++++++++     {
+++++++++++++-     "ename": "ModuleNotFoundError",
+++++++++++++-     "evalue": "No module named 'diffuser'",
++++++++++++++     "name": "stdout",
++++++++++++++     "output_type": "stream",
++++++++++++++     "text": [
++++++++++++++      "Loaded dataset with 901 samples.\n"
++++++++++++++     ]
++++++++++++++    },
++++++++++++++    {
++++++++++++++     "name": "stderr",
++++++++++++++     "output_type": "stream",
++++++++++++++     "text": [
++++++++++++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
++++++++++++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
++++++++++++++     ]
++++++++++++++    },
++++++++++++++    {
++++++++++++++     "ename": "EinopsError",
++++++++++++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++++++++++      "output_type": "error",
+++++++++++++      "traceback": [
+++++++++++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+++++++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+++++++++++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
+++++++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
++++++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
++++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
++++++++++++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++++++++++++      "\nDuring handling of the above exception, another exception occurred:\n",
++++++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++++++++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
++++++++++++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
++++++++++++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
++++++++++++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
++++++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
++++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
++++++++++++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
+++++++++++++      ]
+++++++++++++     }
+++++++++++++    ],
+++++++++++++@@ -212,7 +239,6 @@
+++++++++++++     "import einops\n",
+++++++++++++     "from collections import namedtuple\n",
+++++++++++++     "\n",
+++++++++++++-    "\n",
+++++++++++++     "# Define custom namedtuple for storing trajectories\n",
+++++++++++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
+++++++++++++     "\n",
+++++++++++++@@ -258,6 +284,34 @@
+++++++++++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
+++++++++++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
+++++++++++++     "\n",
++++++++++++++    "# Define the PolicyModel class\n",
++++++++++++++    "class PolicyModel(nn.Module):\n",
++++++++++++++    "    def __init__(self, grid_size):\n",
++++++++++++++    "        super(PolicyModel, self).__init__()\n",
++++++++++++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
++++++++++++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
++++++++++++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
++++++++++++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
++++++++++++++    "\n",
++++++++++++++    "    def forward(self, x):\n",
++++++++++++++    "        x = torch.relu(self.conv1(x))\n",
++++++++++++++    "        x = torch.relu(self.conv2(x))\n",
++++++++++++++    "        x = x.view(x.size(0), -1)\n",
++++++++++++++    "        x = torch.relu(self.fc1(x))\n",
++++++++++++++    "        x = self.fc2(x)\n",
++++++++++++++    "        return x\n",
++++++++++++++    "\n",
++++++++++++++    "# Define a dummy normalizer class for simplicity\n",
++++++++++++++    "class DummyNormalizer:\n",
++++++++++++++    "    def __init__(self):\n",
++++++++++++++    "        self.action_dim = 2\n",
++++++++++++++    "\n",
++++++++++++++    "    def normalize(self, data, key):\n",
++++++++++++++    "        return data\n",
++++++++++++++    "\n",
++++++++++++++    "    def unnormalize(self, data, key):\n",
++++++++++++++    "        return data\n",
++++++++++++++    "\n",
+++++++++++++     "# Define the Policy class\n",
+++++++++++++     "class Policy:\n",
+++++++++++++     "    def __init__(self, diffusion_model, normalizer):\n",
+++++++++++++@@ -267,17 +321,17 @@
+++++++++++++     "\n",
+++++++++++++     "    @property\n",
+++++++++++++     "    def device(self):\n",
+++++++++++++-    "        parameters = list(self.diffusion_model.parameters())\n",
+++++++++++++-    "        return parameters[0].device\n",
++++++++++++++    "        return next(self.diffusion_model.parameters()).device\n",
+++++++++++++     "\n",
+++++++++++++     "    def _format_conditions(self, conditions, batch_size):\n",
+++++++++++++-    "        conditions = utils.apply_dict(\n",
++++++++++++++    "        conditions = apply_dict(\n",
+++++++++++++     "            self.normalizer.normalize,\n",
+++++++++++++     "            conditions,\n",
+++++++++++++     "            'observations',\n",
+++++++++++++     "        )\n",
+++++++++++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
+++++++++++++-    "        conditions = utils.apply_dict(\n",
++++++++++++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
++++++++++++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
++++++++++++++    "        conditions = apply_dict(\n",
+++++++++++++     "            einops.repeat,\n",
+++++++++++++     "            conditions,\n",
+++++++++++++     "            'd -> repeat d', repeat=batch_size,\n",
+++++++++++++@@ -289,7 +343,7 @@
+++++++++++++     "\n",
+++++++++++++     "        # Run reverse diffusion process\n",
+++++++++++++     "        sample = self.diffusion_model(conditions)\n",
+++++++++++++-    "        sample = utils.to_np(sample)\n",
++++++++++++++    "        sample = to_np(sample)\n",
+++++++++++++     "\n",
+++++++++++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
+++++++++++++     "        actions = sample[:, :, :self.action_dim]\n",
+++++++++++++@@ -308,8 +362,9 @@
+++++++++++++     "# Training the policy-guided diffusion model\n",
+++++++++++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
+++++++++++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
+++++++++++++-    "    model = PolicyModel(grid_size)\n",
+++++++++++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
++++++++++++++    "    diffusion_model = PolicyModel(grid_size)\n",
++++++++++++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
++++++++++++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
+++++++++++++     "\n",
+++++++++++++     "    # Reward function\n",
+++++++++++++     "    def compute_reward(waypoints, goal):\n",
+++++++++++++@@ -318,11 +373,12 @@
+++++++++++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
+++++++++++++     "        return reward\n",
+++++++++++++     "\n",
+++++++++++++-    "    model.train()\n",
++++++++++++++    "    diffusion_model.train()\n",
+++++++++++++     "    for epoch in range(num_epochs):\n",
+++++++++++++     "        total_loss = 0.0\n",
+++++++++++++     "        for batch in dataloader:\n",
+++++++++++++     "            grid, start, goal, waypoints = batch\n",
++++++++++++++    "            conditions = {'observations': grid}\n",
+++++++++++++     "\n",
+++++++++++++     "            # Use the grid as input and predict the next waypoint after start\n",
+++++++++++++     "            optimizer.zero_grad()\n",
+++++++++++++@@ -330,7 +386,7 @@
+++++++++++++     "            current_position = start\n",
+++++++++++++     "            for _ in range(waypoints.size(1)):\n",
+++++++++++++     "                input_grid = grid\n",
+++++++++++++-    "                predicted_waypoint = model(input_grid)\n",
++++++++++++++    "                predicted_waypoint, _ = model(conditions)\n",
+++++++++++++     "                predicted_waypoints.append(predicted_waypoint)\n",
+++++++++++++     "                current_position = predicted_waypoint\n",
+++++++++++++     "\n",
++++++++++++\ No newline at end of file
++++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
++++++++++++index 5618eda..e35350a 100644
++++++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
++++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl
++++++++++++index 75127f1..27512cf 100644
++++++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl and b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl differ
+++++++++++ diff --git a/scripts/train.py b/scripts/train.py
+++++++++++-index 502837e..f9646f7 100644
++++++++++++index f9646f7..d3ed429 100644
+++++++++++ --- a/scripts/train.py
+++++++++++ +++ b/scripts/train.py
+++++++++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
+++++++++++- 
+++++++++++- class Parser(utils.Parser):
+++++++++++-     dataset: str = 'hopper-medium-expert-v2'
+++++++++++--    config: str = 'config.locomotion'
+++++++++++-+    #config: str = 'config.locomotion'
+++++++++++-+    config: str = 'config.maze2d'
+++++++++++- 
+++++++++++- args = Parser().parse_args('diffusion')
+++++++++++- 
+++++++++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
++++++++++++@@ -87,7 +87,6 @@ trainer_config = utils.Config(
+++++++++++      results_folder=args.savepath,
+++++++++++      bucket=args.bucket,
+++++++++++      n_reference=args.n_reference,
+++++++++++-+    n_samples=args.n_samples,
+++++++++++-+
++++++++++++-    n_samples=args.n_samples,
++++++++++++ 
+++++++++++  )
+++++++++++  
+++++++++++- #-----------------------------------------------------------------------------#
+++++++++++\ No newline at end of file
++++++++++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
++++++++++++index f4bf52b..c1f0340 100644
++++++++++++--- a/scripts/training.ipynb
+++++++++++++++ b/scripts/training.ipynb
++++++++++++@@ -2,20 +2,20 @@
++++++++++++  "cells": [
++++++++++++   {
++++++++++++    "cell_type": "code",
++++++++++++-   "execution_count": 2,
+++++++++++++   "execution_count": 1,
++++++++++++    "metadata": {},
++++++++++++    "outputs": [
++++++++++++     {
++++++++++++      "name": "stdout",
++++++++++++      "output_type": "stream",
++++++++++++      "text": [
++++++++++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
++++++++++++-      "Loaded dataset with 894 samples.\n"
+++++++++++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
+++++++++++++      "Loaded dataset with 901 samples.\n"
++++++++++++      ]
++++++++++++     },
++++++++++++     {
++++++++++++      "data": {
++++++++++++-      "image/png": "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35jvfOc7ed/73pfvfOc7+e1vf7vfdTdt2pQLL7wwt9xyS+67776sWLEid911VxYuXDho3d/+9rfp6urKW97ylvz93/99LrjgglxzzTX50Ic+lCVLluSyyy7Ll7/85Zx66ql597vfPeR3Ey9dujTjxo3LF77whaxcuTLf/e5309nZmV/96lcH/J+WLVuWFStW5JxzzslXvvKV3HTTTfmnf/qnnHnmmfnZz352+DuJMUdeHNzOnTvz8MMP5/d///cPe1tGL7kxtP7+/uzevTu/+MUvctNNN+VrX/uawd0xRF4M9vOf/zwrVqzIpz71qVQqlYOuT3OSG0O74oorMn78+LS0tOS8887LN77xjUPajuYgL2o98MADmTJlSh5//PGcfvrpGT9+fF760pfmve99b3p7ew+4Lc1FbhzYzp07s27durz5zW/O7/3e7x3Wtoxe8qLWkiVLcsIJJ+SP/uiP8sQTT2TXrl25++67s3r16lxxxRWZOHHiAbeneciNWr/5zW/ykpe8ZNDyPct++MMfHnB7Rh85cGR+8pOf5Ne//nVe85rXDLrvNa95TTZv3pznn39+WJ6rIRUURVEUTz/9dPGmN72pSFIkKY455pjizDPPLD75yU8Wu3bt2u92/f39xW9/+9vi/vvvL5IUP/jBD/bet2TJkiJJ8aUvfWnvst/+9rfFySefXCQpHn744b3Lf/nLXxblcrn4kz/5k73Lbr311iJJ8ba3va3mOb/5zW8WSYrrrruu5rlmzZq19/aDDz5YJCluuOGGmm23bt1aTJgwofjABz5wyPvmF7/4RZGkuPbaaw95G5qDvDi4d77zncX48eOLhx566LC3ZfSSG0NbtmzZ3n1y7LHHFjfddNMhbUdzkBeDvf3tby/OPPPMor+/f+9zTJw48aDb0VzkRq2HH364WL58efHlL3+5eOCBB4rPfe5zRXt7e1Eul4v77rvvgNvSPORFrVNPPbU47rjjismTJxef+MQnivXr1xfXX399MWHChOKss87a247Q/OTGgd18881FkuKLX/ziYW3H6CYvBnvssceK0047be8+SVK8733v016MMXKj1umnn17Mmzev6Ovrq4n95S9/eZGk+MIXvnDA7Rl95MD+HaimtyeWofpTn/jEJ4okxfbt2w/5uUYbV4q/4KSTTsrGjRvzve99L5/61KeyaNGi/PjHP84111yTV7/61Xn66af3rvvEE0/k4osvzimnnJJyuZxjjjkmZ599dpLkscceq3ncUqmUCy+8cO/t8ePHZ86cOZk2bVr+4A/+YO/yKVOm5KUvfWmefPLJQbG9853vrLl95plnZtasWVm/fv1+/5+77747pVIp/+k//afs3r17788pp5ySf/Nv/k02bNhwWPuHsUleHNif//mf54477sinP/3p/Nt/+28Pa1tGN7kxtA996EP53ve+l3/4h3/IZZddliuvvDL/7b/9t0PaltFPXtT60pe+lK9+9av57//9v/tKmjFObtT6gz/4g6xcuTIXXXRROjo6cumll+Zb3/pWpk2blg984AMH3JbmIS9q9ff35/nnn8+HPvShXHPNNens7Myf/dmf5ZOf/GS++c1v5n/9r/91wO1pHnLjwG655ZacdNJJedvb3nZY2zG6yYtaW7ZsycKFC3PSSSdl3bp1uf/++3P99dfntttuy3ve854DbktzkRu1rrrqqvz4xz/OlVdemZ6enmzdujXvfe9798bX6N8vzeGTAy/Ogcaqmnkcyxd9/o4zzjgjZ5xxRpLqNAlXX311Pv3pT+f666/P9ddfn2effTYdHR057rjjct1112XevHk5/vjjs3Xr1nR1deXXv/51zeMdf/zxOe6442qWHXvssZkyZcqg5z722GOHnJbglFNOGXLZL3/5y/3+Hz/72c9SFEVe9rKXDXn/y1/+8v1uC79LXgz20Y9+NNddd13+8i//MldeeeUhb0dzkRu1Zs6cmZkzZybJ3s7jNddckyVLluTkk08+pMdg9JMXybPPPpsrrrgiV111VaZPn753eqzf/OY3SZJf/epXOeaYY0xtOMbIjf074YQT8ta3vjV/8zd/k1//+teZMGHCYT8Go5O8qDrppJOyadOmnHfeeTXLL7jggqxYsSIPP/xwzjnnnAM+Bs1Fbgz2f/7P/8lDDz2U5cuXDzk9Ls1PXlR98IMfTG9vbx555JG95xPz58/P1KlTc9lll+WSSy7ZW+hhbJAbVZdddll+8Ytf5LrrrsvNN9+cpDq99p/+6Z/mr/7qr9LW1nbA7Rm95MDhOemkk5JkyFieeeaZlEqlnHDCCcPyXI1IUfwAjjnmmFx77bX59Kc/nR/96EdJkq9//evZvn17NmzYUNPBONh3AbwY//f//t8hl82ZM2e/20ydOjWlUikbN2484HdpwOGSF9WC+Ec+8pF85CMfyYc+9KFDD5qmJjcGe/3rX5+/+Zu/yRNPPKEoPkaN1bx4+umn87Of/Sw33HBDbrjhhkH3n3jiiVm0aFG+8pWvHOJ/QLMZq7lxIEVRJGnuT6RzYGM5L17zmtfk29/+9qDle/LClU1j21jOjX3dcsstSeJKWJKM7bx45JFH8spXvnLQB2xf97rXJUl+9KMfKYqPYWM5N5Lk6quvzooVK7Jp06ZMnjw5s2bNyrJlyzJx4kSzfI4RYz0HDsUrXvGKTJgwIT/84Q8H3ffDH/4wc+bMGfShgGbizOoFO3bsGHL5nqkTpk+fnmRgkOZ334CrV68+arHdcccdNbe/9a1v5cknn0xnZ+d+t3nrW9+aoijS09Oz95My+/68+tWvPmrx0jzkxWAf//jH85GPfCQf/vCHc+21177Yf4NRSm4cmvXr12fcuHFmJxkj5MWAU045JevXrx/0c9555+W4447L+vXrc9111w3Xv0eDkxsH9//+3//L3XffndNPP72pT74ZIC9qvf3tb0+S3HvvvTXL77nnniTJG97whiP4TxiN5MbQ/vVf/zWf//zn8/rXvz6vetWrXsy/wSgkL2pNnz49//RP/5Rnn322ZvmDDz6YJKlUKkf2zzDqyI2hveQlL8mrXvWqzJo1K0899VTuvPPO/Of//J/NRtWE5MCRGT9+fBYuXJju7u7s2rVr7/Knnnoq69evT1dX17A8T6NypfgLzjvvvFQqlSxcuDCnnXZa+vv788gjj+SGG27IpEmTsnz58iTVuf9PPPHEvPe97821116bY445JnfccUd+8IMfHLXYHnroobznPe/Jv//3/z5bt27Nf/2v/zVtbW35L//lv+x3m7POOiuXX355Lr300jz00EOZP39+Jk6cmB07duQb3/hGXv3qV+eP/uiPDvi89957b5577rm9ifHoo49m3bp1SarT4h5//PHD90/SkORFrRtuuCF/8Rd/kfPPPz9vectbBl3NYbBq7JAbtS6//PK0tLTk9a9/fV72spfl6aefzt/93d/lzjvvzJ/92Z+5SnyMkBcDjjvuuCFPdG677baUy+UDngTRfORGrYsvvjgzZ87MGWeckalTp2bTpk254YYb8rOf/Sy33XbbUfgvaUTyota5556bhQsX5mMf+1j6+/vzhje8IQ899FA++tGP5q1vfWve9KY3HY1/lQYkN4b2la98Jc8884yrxMcoeVFrxYoVueiii/KHf/iH+eM//uNMnTo13/72t/PJT34yr3zlK3PBBRccjX+VBiQ3av3oRz/Kl770pZxxxhl5yUtekh/84Af51Kc+lblz5+bjH//40fg3qTM5MNih1vQ++tGP5nWve13e+ta35oMf/GCef/75/MVf/EWmTp2a97///cO0FxpUQVEURXHnnXcWF198cTF37txi0qRJxTHHHFPMnDmzeNe73lU8+uijNet+61vfKt74xjcWxx9/fHHyyScX73nPe4qHH364SFLceuute9dbsmRJMXHixEHPdfbZZxe///u/P2j5rFmzire85S17b996661FkuIf//Efi3e9613FCSecUEyYMKG48MILi02bNtVsu2TJkmLWrFmDHvNzn/tc8e/+3b8rJk6cWEyYMKF4xSteUVxyySXFQw89dNB9MmvWrCLJkD8//elPD7o9o5+8GBzj/nLC4XRskRuDt+vo6CimTp1ajB8/vjjhhBOKs88+u7j99tsPuB3NRV4c3P7+H5qb3Kj1yU9+sjj99NOL1tbWolwuFyeffHLxtre9rfjud797wO1oLvJisH/5l38prr766mLGjBnF+PHji5kzZxbXXHNN8fzzzx90W5qH3BjaH/7hHxYTJ04sent7D2l9mou8GOzrX/96ce655xannHJKMWHChGLevHnF+9///uLpp58+6LY0D7lR65//+Z+L+fPnF1OmTCmOPfbYYs6cOcWHP/zh4tlnnz3gdoxecmCww6npPfTQQ8Wb3/zm4vjjjy9aWlqKiy66qNi8efNBn2O0KxXFC19SRcO57bbbcumll+Z73/tezjjjjHqHAw1BXsDQ5AYMJi9gaHIDBpMXMDS5AYPJCxia3GCskwONz3eKAwAAAAAAANC0FMUBAAAAAAAAaFqmTwcAAAAAAACgablSHAAAAAAAAICmpSgOAAAAAAAAQNNSFAcAAAAAAACgaY0/0g37+/uzffv2TJ48OaVSaThjghFTFEV27dqV6dOnZ9y4F/8ZEXlBs5AbMJi8gKHJDRhMXsDQ5AYMJi9gaHIDBpMXMLRDzY0jLopv3749M2bMONLNoaFs3bo1lUrlRT+OvKDZyA0YTF7A0OQGDCYvYGhyAwaTFzA0uQGDyQsY2sFy44iL4pMnTz7STamDnTt3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",
+++++++++++++      "image/png": "",
++++++++++++       "text/plain": [
++++++++++++        "<Figure size 2000x500 with 10 Axes>"
++++++++++++       ]
++++++++++++@@ -184,18 +184,45 @@
++++++++++++   },
++++++++++++   {
++++++++++++    "cell_type": "code",
++++++++++++-   "execution_count": 13,
+++++++++++++   "execution_count": 3,
++++++++++++    "metadata": {},
++++++++++++    "outputs": [
++++++++++++     {
++++++++++++-     "ename": "ModuleNotFoundError",
++++++++++++-     "evalue": "No module named 'diffuser'",
+++++++++++++     "name": "stdout",
+++++++++++++     "output_type": "stream",
+++++++++++++     "text": [
+++++++++++++      "Loaded dataset with 901 samples.\n"
+++++++++++++     ]
+++++++++++++    },
+++++++++++++    {
+++++++++++++     "name": "stderr",
+++++++++++++     "output_type": "stream",
+++++++++++++     "text": [
+++++++++++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
+++++++++++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
+++++++++++++     ]
+++++++++++++    },
+++++++++++++    {
+++++++++++++     "ename": "EinopsError",
+++++++++++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++++++++++      "output_type": "error",
++++++++++++      "traceback": [
++++++++++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
++++++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
++++++++++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
++++++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
+++++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
+++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
+++++++++++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++++++++++      "\nDuring handling of the above exception, another exception occurred:\n",
+++++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++++++++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
+++++++++++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
+++++++++++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
+++++++++++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
+++++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
+++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
+++++++++++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
++++++++++++      ]
++++++++++++     }
++++++++++++    ],
++++++++++++@@ -212,7 +239,6 @@
++++++++++++     "import einops\n",
++++++++++++     "from collections import namedtuple\n",
++++++++++++     "\n",
++++++++++++-    "\n",
++++++++++++     "# Define custom namedtuple for storing trajectories\n",
++++++++++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
++++++++++++     "\n",
++++++++++++@@ -258,6 +284,34 @@
++++++++++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
++++++++++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
++++++++++++     "\n",
+++++++++++++    "# Define the PolicyModel class\n",
+++++++++++++    "class PolicyModel(nn.Module):\n",
+++++++++++++    "    def __init__(self, grid_size):\n",
+++++++++++++    "        super(PolicyModel, self).__init__()\n",
+++++++++++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
+++++++++++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
+++++++++++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
+++++++++++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
+++++++++++++    "\n",
+++++++++++++    "    def forward(self, x):\n",
+++++++++++++    "        x = torch.relu(self.conv1(x))\n",
+++++++++++++    "        x = torch.relu(self.conv2(x))\n",
+++++++++++++    "        x = x.view(x.size(0), -1)\n",
+++++++++++++    "        x = torch.relu(self.fc1(x))\n",
+++++++++++++    "        x = self.fc2(x)\n",
+++++++++++++    "        return x\n",
+++++++++++++    "\n",
+++++++++++++    "# Define a dummy normalizer class for simplicity\n",
+++++++++++++    "class DummyNormalizer:\n",
+++++++++++++    "    def __init__(self):\n",
+++++++++++++    "        self.action_dim = 2\n",
+++++++++++++    "\n",
+++++++++++++    "    def normalize(self, data, key):\n",
+++++++++++++    "        return data\n",
+++++++++++++    "\n",
+++++++++++++    "    def unnormalize(self, data, key):\n",
+++++++++++++    "        return data\n",
+++++++++++++    "\n",
++++++++++++     "# Define the Policy class\n",
++++++++++++     "class Policy:\n",
++++++++++++     "    def __init__(self, diffusion_model, normalizer):\n",
++++++++++++@@ -267,17 +321,17 @@
++++++++++++     "\n",
++++++++++++     "    @property\n",
++++++++++++     "    def device(self):\n",
++++++++++++-    "        parameters = list(self.diffusion_model.parameters())\n",
++++++++++++-    "        return parameters[0].device\n",
+++++++++++++    "        return next(self.diffusion_model.parameters()).device\n",
++++++++++++     "\n",
++++++++++++     "    def _format_conditions(self, conditions, batch_size):\n",
++++++++++++-    "        conditions = utils.apply_dict(\n",
+++++++++++++    "        conditions = apply_dict(\n",
++++++++++++     "            self.normalizer.normalize,\n",
++++++++++++     "            conditions,\n",
++++++++++++     "            'observations',\n",
++++++++++++     "        )\n",
++++++++++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
++++++++++++-    "        conditions = utils.apply_dict(\n",
+++++++++++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
+++++++++++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
+++++++++++++    "        conditions = apply_dict(\n",
++++++++++++     "            einops.repeat,\n",
++++++++++++     "            conditions,\n",
++++++++++++     "            'd -> repeat d', repeat=batch_size,\n",
++++++++++++@@ -289,7 +343,7 @@
++++++++++++     "\n",
++++++++++++     "        # Run reverse diffusion process\n",
++++++++++++     "        sample = self.diffusion_model(conditions)\n",
++++++++++++-    "        sample = utils.to_np(sample)\n",
+++++++++++++    "        sample = to_np(sample)\n",
++++++++++++     "\n",
++++++++++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
++++++++++++     "        actions = sample[:, :, :self.action_dim]\n",
++++++++++++@@ -308,8 +362,9 @@
++++++++++++     "# Training the policy-guided diffusion model\n",
++++++++++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
++++++++++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
++++++++++++-    "    model = PolicyModel(grid_size)\n",
++++++++++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
+++++++++++++    "    diffusion_model = PolicyModel(grid_size)\n",
+++++++++++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
+++++++++++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
++++++++++++     "\n",
++++++++++++     "    # Reward function\n",
++++++++++++     "    def compute_reward(waypoints, goal):\n",
++++++++++++@@ -318,11 +373,12 @@
++++++++++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
++++++++++++     "        return reward\n",
++++++++++++     "\n",
++++++++++++-    "    model.train()\n",
+++++++++++++    "    diffusion_model.train()\n",
++++++++++++     "    for epoch in range(num_epochs):\n",
++++++++++++     "        total_loss = 0.0\n",
++++++++++++     "        for batch in dataloader:\n",
++++++++++++     "            grid, start, goal, waypoints = batch\n",
+++++++++++++    "            conditions = {'observations': grid}\n",
++++++++++++     "\n",
++++++++++++     "            # Use the grid as input and predict the next waypoint after start\n",
++++++++++++     "            optimizer.zero_grad()\n",
++++++++++++@@ -330,7 +386,7 @@
++++++++++++     "            current_position = start\n",
++++++++++++     "            for _ in range(waypoints.size(1)):\n",
++++++++++++     "                input_grid = grid\n",
++++++++++++-    "                predicted_waypoint = model(input_grid)\n",
+++++++++++++    "                predicted_waypoint, _ = model(conditions)\n",
++++++++++++     "                predicted_waypoints.append(predicted_waypoint)\n",
++++++++++++     "                current_position = predicted_waypoint\n",
++++++++++++     "\n",
+++++++++++\ No newline at end of file
+++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
+++++++++++index 5618eda..515c5e1 100644
+++++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
+++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl
+++++++++++index 75127f1..27512cf 100644
+++++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl and b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl differ
++++++++++ diff --git a/scripts/train.py b/scripts/train.py
++++++++++-index 502837e..f9646f7 100644
+++++++++++index f9646f7..d3ed429 100644
++++++++++ --- a/scripts/train.py
++++++++++ +++ b/scripts/train.py
++++++++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
++++++++++- 
++++++++++- class Parser(utils.Parser):
++++++++++-     dataset: str = 'hopper-medium-expert-v2'
++++++++++--    config: str = 'config.locomotion'
++++++++++-+    #config: str = 'config.locomotion'
++++++++++-+    config: str = 'config.maze2d'
++++++++++- 
++++++++++- args = Parser().parse_args('diffusion')
++++++++++- 
++++++++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
+++++++++++@@ -87,7 +87,6 @@ trainer_config = utils.Config(
++++++++++      results_folder=args.savepath,
++++++++++      bucket=args.bucket,
++++++++++      n_reference=args.n_reference,
++++++++++-+    n_samples=args.n_samples,
++++++++++-+
+++++++++++-    n_samples=args.n_samples,
+++++++++++ 
++++++++++  )
++++++++++  
++++++++++- #-----------------------------------------------------------------------------#
++++++++++\ No newline at end of file
+++++++++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
+++++++++++index f4bf52b..c1f0340 100644
+++++++++++--- a/scripts/training.ipynb
++++++++++++++ b/scripts/training.ipynb
+++++++++++@@ -2,20 +2,20 @@
+++++++++++  "cells": [
+++++++++++   {
+++++++++++    "cell_type": "code",
+++++++++++-   "execution_count": 2,
++++++++++++   "execution_count": 1,
+++++++++++    "metadata": {},
+++++++++++    "outputs": [
+++++++++++     {
+++++++++++      "name": "stdout",
+++++++++++      "output_type": "stream",
+++++++++++      "text": [
+++++++++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
+++++++++++-      "Loaded dataset with 894 samples.\n"
++++++++++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
++++++++++++      "Loaded dataset with 901 samples.\n"
+++++++++++      ]
+++++++++++     },
+++++++++++     {
+++++++++++      "data": {
+++++++++++-      "image/png": "",
++++++++++++      "image/png": "",
+++++++++++       "text/plain": [
+++++++++++        "<Figure size 2000x500 with 10 Axes>"
+++++++++++       ]
+++++++++++@@ -184,18 +184,45 @@
+++++++++++   },
+++++++++++   {
+++++++++++    "cell_type": "code",
+++++++++++-   "execution_count": 13,
++++++++++++   "execution_count": 3,
+++++++++++    "metadata": {},
+++++++++++    "outputs": [
+++++++++++     {
+++++++++++-     "ename": "ModuleNotFoundError",
+++++++++++-     "evalue": "No module named 'diffuser'",
++++++++++++     "name": "stdout",
++++++++++++     "output_type": "stream",
++++++++++++     "text": [
++++++++++++      "Loaded dataset with 901 samples.\n"
++++++++++++     ]
++++++++++++    },
++++++++++++    {
++++++++++++     "name": "stderr",
++++++++++++     "output_type": "stream",
++++++++++++     "text": [
++++++++++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
++++++++++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
++++++++++++     ]
++++++++++++    },
++++++++++++    {
++++++++++++     "ename": "EinopsError",
++++++++++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++++++++      "output_type": "error",
+++++++++++      "traceback": [
+++++++++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+++++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+++++++++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
+++++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
++++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
++++++++++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++++++++++      "\nDuring handling of the above exception, another exception occurred:\n",
++++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++++++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
++++++++++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
++++++++++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
++++++++++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
++++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
++++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
++++++++++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
+++++++++++      ]
+++++++++++     }
+++++++++++    ],
+++++++++++@@ -212,7 +239,6 @@
+++++++++++     "import einops\n",
+++++++++++     "from collections import namedtuple\n",
+++++++++++     "\n",
+++++++++++-    "\n",
+++++++++++     "# Define custom namedtuple for storing trajectories\n",
+++++++++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
+++++++++++     "\n",
+++++++++++@@ -258,6 +284,34 @@
+++++++++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
+++++++++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
+++++++++++     "\n",
++++++++++++    "# Define the PolicyModel class\n",
++++++++++++    "class PolicyModel(nn.Module):\n",
++++++++++++    "    def __init__(self, grid_size):\n",
++++++++++++    "        super(PolicyModel, self).__init__()\n",
++++++++++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
++++++++++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
++++++++++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
++++++++++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
++++++++++++    "\n",
++++++++++++    "    def forward(self, x):\n",
++++++++++++    "        x = torch.relu(self.conv1(x))\n",
++++++++++++    "        x = torch.relu(self.conv2(x))\n",
++++++++++++    "        x = x.view(x.size(0), -1)\n",
++++++++++++    "        x = torch.relu(self.fc1(x))\n",
++++++++++++    "        x = self.fc2(x)\n",
++++++++++++    "        return x\n",
++++++++++++    "\n",
++++++++++++    "# Define a dummy normalizer class for simplicity\n",
++++++++++++    "class DummyNormalizer:\n",
++++++++++++    "    def __init__(self):\n",
++++++++++++    "        self.action_dim = 2\n",
++++++++++++    "\n",
++++++++++++    "    def normalize(self, data, key):\n",
++++++++++++    "        return data\n",
++++++++++++    "\n",
++++++++++++    "    def unnormalize(self, data, key):\n",
++++++++++++    "        return data\n",
++++++++++++    "\n",
+++++++++++     "# Define the Policy class\n",
+++++++++++     "class Policy:\n",
+++++++++++     "    def __init__(self, diffusion_model, normalizer):\n",
+++++++++++@@ -267,17 +321,17 @@
+++++++++++     "\n",
+++++++++++     "    @property\n",
+++++++++++     "    def device(self):\n",
+++++++++++-    "        parameters = list(self.diffusion_model.parameters())\n",
+++++++++++-    "        return parameters[0].device\n",
++++++++++++    "        return next(self.diffusion_model.parameters()).device\n",
+++++++++++     "\n",
+++++++++++     "    def _format_conditions(self, conditions, batch_size):\n",
+++++++++++-    "        conditions = utils.apply_dict(\n",
++++++++++++    "        conditions = apply_dict(\n",
+++++++++++     "            self.normalizer.normalize,\n",
+++++++++++     "            conditions,\n",
+++++++++++     "            'observations',\n",
+++++++++++     "        )\n",
+++++++++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
+++++++++++-    "        conditions = utils.apply_dict(\n",
++++++++++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
++++++++++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
++++++++++++    "        conditions = apply_dict(\n",
+++++++++++     "            einops.repeat,\n",
+++++++++++     "            conditions,\n",
+++++++++++     "            'd -> repeat d', repeat=batch_size,\n",
+++++++++++@@ -289,7 +343,7 @@
+++++++++++     "\n",
+++++++++++     "        # Run reverse diffusion process\n",
+++++++++++     "        sample = self.diffusion_model(conditions)\n",
+++++++++++-    "        sample = utils.to_np(sample)\n",
++++++++++++    "        sample = to_np(sample)\n",
+++++++++++     "\n",
+++++++++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
+++++++++++     "        actions = sample[:, :, :self.action_dim]\n",
+++++++++++@@ -308,8 +362,9 @@
+++++++++++     "# Training the policy-guided diffusion model\n",
+++++++++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
+++++++++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
+++++++++++-    "    model = PolicyModel(grid_size)\n",
+++++++++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
++++++++++++    "    diffusion_model = PolicyModel(grid_size)\n",
++++++++++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
++++++++++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
+++++++++++     "\n",
+++++++++++     "    # Reward function\n",
+++++++++++     "    def compute_reward(waypoints, goal):\n",
+++++++++++@@ -318,11 +373,12 @@
+++++++++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
+++++++++++     "        return reward\n",
+++++++++++     "\n",
+++++++++++-    "    model.train()\n",
++++++++++++    "    diffusion_model.train()\n",
+++++++++++     "    for epoch in range(num_epochs):\n",
+++++++++++     "        total_loss = 0.0\n",
+++++++++++     "        for batch in dataloader:\n",
+++++++++++     "            grid, start, goal, waypoints = batch\n",
++++++++++++    "            conditions = {'observations': grid}\n",
+++++++++++     "\n",
+++++++++++     "            # Use the grid as input and predict the next waypoint after start\n",
+++++++++++     "            optimizer.zero_grad()\n",
+++++++++++@@ -330,7 +386,7 @@
+++++++++++     "            current_position = start\n",
+++++++++++     "            for _ in range(waypoints.size(1)):\n",
+++++++++++     "                input_grid = grid\n",
+++++++++++-    "                predicted_waypoint = model(input_grid)\n",
++++++++++++    "                predicted_waypoint, _ = model(conditions)\n",
+++++++++++     "                predicted_waypoints.append(predicted_waypoint)\n",
+++++++++++     "                current_position = predicted_waypoint\n",
+++++++++++     "\n",
++++++++++\ No newline at end of file
++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
++++++++++index 5618eda..f5f0f41 100644
++++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
++++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl
++++++++++index 75127f1..27512cf 100644
++++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl and b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl differ
+++++++++ diff --git a/scripts/train.py b/scripts/train.py
+++++++++-index 502837e..f9646f7 100644
++++++++++index f9646f7..d3ed429 100644
+++++++++ --- a/scripts/train.py
+++++++++ +++ b/scripts/train.py
+++++++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
+++++++++- 
+++++++++- class Parser(utils.Parser):
+++++++++-     dataset: str = 'hopper-medium-expert-v2'
+++++++++--    config: str = 'config.locomotion'
+++++++++-+    #config: str = 'config.locomotion'
+++++++++-+    config: str = 'config.maze2d'
+++++++++- 
+++++++++- args = Parser().parse_args('diffusion')
+++++++++- 
+++++++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
++++++++++@@ -87,7 +87,6 @@ trainer_config = utils.Config(
+++++++++      results_folder=args.savepath,
+++++++++      bucket=args.bucket,
+++++++++      n_reference=args.n_reference,
+++++++++-+    n_samples=args.n_samples,
+++++++++-+
++++++++++-    n_samples=args.n_samples,
++++++++++ 
+++++++++  )
+++++++++  
+++++++++- #-----------------------------------------------------------------------------#
+++++++++\ No newline at end of file
++++++++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
++++++++++index f4bf52b..c1f0340 100644
++++++++++--- a/scripts/training.ipynb
+++++++++++++ b/scripts/training.ipynb
++++++++++@@ -2,20 +2,20 @@
++++++++++  "cells": [
++++++++++   {
++++++++++    "cell_type": "code",
++++++++++-   "execution_count": 2,
+++++++++++   "execution_count": 1,
++++++++++    "metadata": {},
++++++++++    "outputs": [
++++++++++     {
++++++++++      "name": "stdout",
++++++++++      "output_type": "stream",
++++++++++      "text": [
++++++++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
++++++++++-      "Loaded dataset with 894 samples.\n"
+++++++++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
+++++++++++      "Loaded dataset with 901 samples.\n"
++++++++++      ]
++++++++++     },
++++++++++     {
++++++++++      "data": {
++++++++++-      "image/png": "",
+++++++++++      "image/png": "",
++++++++++       "text/plain": [
++++++++++        "<Figure size 2000x500 with 10 Axes>"
++++++++++       ]
++++++++++@@ -184,18 +184,45 @@
++++++++++   },
++++++++++   {
++++++++++    "cell_type": "code",
++++++++++-   "execution_count": 13,
+++++++++++   "execution_count": 3,
++++++++++    "metadata": {},
++++++++++    "outputs": [
++++++++++     {
++++++++++-     "ename": "ModuleNotFoundError",
++++++++++-     "evalue": "No module named 'diffuser'",
+++++++++++     "name": "stdout",
+++++++++++     "output_type": "stream",
+++++++++++     "text": [
+++++++++++      "Loaded dataset with 901 samples.\n"
+++++++++++     ]
+++++++++++    },
+++++++++++    {
+++++++++++     "name": "stderr",
+++++++++++     "output_type": "stream",
+++++++++++     "text": [
+++++++++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
+++++++++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
+++++++++++     ]
+++++++++++    },
+++++++++++    {
+++++++++++     "ename": "EinopsError",
+++++++++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++++++++      "output_type": "error",
++++++++++      "traceback": [
++++++++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
++++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
++++++++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
++++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
+++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
+++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
+++++++++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++++++++      "\nDuring handling of the above exception, another exception occurred:\n",
+++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++++++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
+++++++++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
+++++++++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
+++++++++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
+++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
+++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
+++++++++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
++++++++++      ]
++++++++++     }
++++++++++    ],
++++++++++@@ -212,7 +239,6 @@
++++++++++     "import einops\n",
++++++++++     "from collections import namedtuple\n",
++++++++++     "\n",
++++++++++-    "\n",
++++++++++     "# Define custom namedtuple for storing trajectories\n",
++++++++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
++++++++++     "\n",
++++++++++@@ -258,6 +284,34 @@
++++++++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
++++++++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
++++++++++     "\n",
+++++++++++    "# Define the PolicyModel class\n",
+++++++++++    "class PolicyModel(nn.Module):\n",
+++++++++++    "    def __init__(self, grid_size):\n",
+++++++++++    "        super(PolicyModel, self).__init__()\n",
+++++++++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
+++++++++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
+++++++++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
+++++++++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
+++++++++++    "\n",
+++++++++++    "    def forward(self, x):\n",
+++++++++++    "        x = torch.relu(self.conv1(x))\n",
+++++++++++    "        x = torch.relu(self.conv2(x))\n",
+++++++++++    "        x = x.view(x.size(0), -1)\n",
+++++++++++    "        x = torch.relu(self.fc1(x))\n",
+++++++++++    "        x = self.fc2(x)\n",
+++++++++++    "        return x\n",
+++++++++++    "\n",
+++++++++++    "# Define a dummy normalizer class for simplicity\n",
+++++++++++    "class DummyNormalizer:\n",
+++++++++++    "    def __init__(self):\n",
+++++++++++    "        self.action_dim = 2\n",
+++++++++++    "\n",
+++++++++++    "    def normalize(self, data, key):\n",
+++++++++++    "        return data\n",
+++++++++++    "\n",
+++++++++++    "    def unnormalize(self, data, key):\n",
+++++++++++    "        return data\n",
+++++++++++    "\n",
++++++++++     "# Define the Policy class\n",
++++++++++     "class Policy:\n",
++++++++++     "    def __init__(self, diffusion_model, normalizer):\n",
++++++++++@@ -267,17 +321,17 @@
++++++++++     "\n",
++++++++++     "    @property\n",
++++++++++     "    def device(self):\n",
++++++++++-    "        parameters = list(self.diffusion_model.parameters())\n",
++++++++++-    "        return parameters[0].device\n",
+++++++++++    "        return next(self.diffusion_model.parameters()).device\n",
++++++++++     "\n",
++++++++++     "    def _format_conditions(self, conditions, batch_size):\n",
++++++++++-    "        conditions = utils.apply_dict(\n",
+++++++++++    "        conditions = apply_dict(\n",
++++++++++     "            self.normalizer.normalize,\n",
++++++++++     "            conditions,\n",
++++++++++     "            'observations',\n",
++++++++++     "        )\n",
++++++++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
++++++++++-    "        conditions = utils.apply_dict(\n",
+++++++++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
+++++++++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
+++++++++++    "        conditions = apply_dict(\n",
++++++++++     "            einops.repeat,\n",
++++++++++     "            conditions,\n",
++++++++++     "            'd -> repeat d', repeat=batch_size,\n",
++++++++++@@ -289,7 +343,7 @@
++++++++++     "\n",
++++++++++     "        # Run reverse diffusion process\n",
++++++++++     "        sample = self.diffusion_model(conditions)\n",
++++++++++-    "        sample = utils.to_np(sample)\n",
+++++++++++    "        sample = to_np(sample)\n",
++++++++++     "\n",
++++++++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
++++++++++     "        actions = sample[:, :, :self.action_dim]\n",
++++++++++@@ -308,8 +362,9 @@
++++++++++     "# Training the policy-guided diffusion model\n",
++++++++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
++++++++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
++++++++++-    "    model = PolicyModel(grid_size)\n",
++++++++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
+++++++++++    "    diffusion_model = PolicyModel(grid_size)\n",
+++++++++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
+++++++++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
++++++++++     "\n",
++++++++++     "    # Reward function\n",
++++++++++     "    def compute_reward(waypoints, goal):\n",
++++++++++@@ -318,11 +373,12 @@
++++++++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
++++++++++     "        return reward\n",
++++++++++     "\n",
++++++++++-    "    model.train()\n",
+++++++++++    "    diffusion_model.train()\n",
++++++++++     "    for epoch in range(num_epochs):\n",
++++++++++     "        total_loss = 0.0\n",
++++++++++     "        for batch in dataloader:\n",
++++++++++     "            grid, start, goal, waypoints = batch\n",
+++++++++++    "            conditions = {'observations': grid}\n",
++++++++++     "\n",
++++++++++     "            # Use the grid as input and predict the next waypoint after start\n",
++++++++++     "            optimizer.zero_grad()\n",
++++++++++@@ -330,7 +386,7 @@
++++++++++     "            current_position = start\n",
++++++++++     "            for _ in range(waypoints.size(1)):\n",
++++++++++     "                input_grid = grid\n",
++++++++++-    "                predicted_waypoint = model(input_grid)\n",
+++++++++++    "                predicted_waypoint, _ = model(conditions)\n",
++++++++++     "                predicted_waypoints.append(predicted_waypoint)\n",
++++++++++     "                current_position = predicted_waypoint\n",
++++++++++     "\n",
+++++++++\ No newline at end of file
+++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
+++++++++index 5618eda..c5e43ed 100644
+++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
+++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl
+++++++++index 75127f1..27512cf 100644
+++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl and b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl differ
++++++++ diff --git a/scripts/train.py b/scripts/train.py
++++++++-index 502837e..f9646f7 100644
+++++++++index f9646f7..d3ed429 100644
++++++++ --- a/scripts/train.py
++++++++ +++ b/scripts/train.py
++++++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
++++++++- 
++++++++- class Parser(utils.Parser):
++++++++-     dataset: str = 'hopper-medium-expert-v2'
++++++++--    config: str = 'config.locomotion'
++++++++-+    #config: str = 'config.locomotion'
++++++++-+    config: str = 'config.maze2d'
++++++++- 
++++++++- args = Parser().parse_args('diffusion')
++++++++- 
++++++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
+++++++++@@ -87,7 +87,6 @@ trainer_config = utils.Config(
++++++++      results_folder=args.savepath,
++++++++      bucket=args.bucket,
++++++++      n_reference=args.n_reference,
++++++++-+    n_samples=args.n_samples,
++++++++-+
+++++++++-    n_samples=args.n_samples,
+++++++++ 
++++++++  )
++++++++  
++++++++- #-----------------------------------------------------------------------------#
++++++++\ No newline at end of file
+++++++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
+++++++++index f4bf52b..c1f0340 100644
+++++++++--- a/scripts/training.ipynb
++++++++++++ b/scripts/training.ipynb
+++++++++@@ -2,20 +2,20 @@
+++++++++  "cells": [
+++++++++   {
+++++++++    "cell_type": "code",
+++++++++-   "execution_count": 2,
++++++++++   "execution_count": 1,
+++++++++    "metadata": {},
+++++++++    "outputs": [
+++++++++     {
+++++++++      "name": "stdout",
+++++++++      "output_type": "stream",
+++++++++      "text": [
+++++++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
+++++++++-      "Loaded dataset with 894 samples.\n"
++++++++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
++++++++++      "Loaded dataset with 901 samples.\n"
+++++++++      ]
+++++++++     },
+++++++++     {
+++++++++      "data": {
+++++++++-      "image/png": "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35jvfOc7ed/73pfvfOc7+e1vf7vfdTdt2pQLL7wwt9xyS+67776sWLEid911VxYuXDho3d/+9rfp6urKW97ylvz93/99LrjgglxzzTX50Ic+lCVLluSyyy7Ll7/85Zx66ql597vfPeR3Ey9dujTjxo3LF77whaxcuTLf/e5309nZmV/96lcH/J+WLVuWFStW5JxzzslXvvKV3HTTTfmnf/qnnHnmmfnZz352+DuJMUdeHNzOnTvz8MMP5/d///cPe1tGL7kxtP7+/uzevTu/+MUvctNNN+VrX/uawd0xRF4M9vOf/zwrVqzIpz71qVQqlYOuT3OSG0O74oorMn78+LS0tOS8887LN77xjUPajuYgL2o98MADmTJlSh5//PGcfvrpGT9+fF760pfmve99b3p7ew+4Lc1FbhzYzp07s27durz5zW/O7/3e7x3Wtoxe8qLWkiVLcsIJJ+SP/uiP8sQTT2TXrl25++67s3r16lxxxRWZOHHiAbeneciNWr/5zW/ykpe8ZNDyPct++MMfHnB7Rh85cGR+8pOf5Ne//nVe85rXDLrvNa95TTZv3pznn39+WJ6rIRUURVEUTz/9dPGmN72pSFIkKY455pjizDPPLD75yU8Wu3bt2u92/f39xW9/+9vi/vvvL5IUP/jBD/bet2TJkiJJ8aUvfWnvst/+9rfFySefXCQpHn744b3Lf/nLXxblcrn4kz/5k73Lbr311iJJ8ba3va3mOb/5zW8WSYrrrruu5rlmzZq19/aDDz5YJCluuOGGmm23bt1aTJgwofjABz5wyPvmF7/4RZGkuPbaaw95G5qDvDi4d77zncX48eOLhx566LC3ZfSSG0NbtmzZ3n1y7LHHFjfddNMhbUdzkBeDvf3tby/OPPPMor+/f+9zTJw48aDb0VzkRq2HH364WL58efHlL3+5eOCBB4rPfe5zRXt7e1Eul4v77rvvgNvSPORFrVNPPbU47rjjismTJxef+MQnivXr1xfXX399MWHChOKss87a247Q/OTGgd18881FkuKLX/ziYW3H6CYvBnvssceK0047be8+SVK8733v016MMXKj1umnn17Mmzev6Ovrq4n95S9/eZGk+MIXvnDA7Rl95MD+HaimtyeWofpTn/jEJ4okxfbt2w/5uUYbV4q/4KSTTsrGjRvzve99L5/61KeyaNGi/PjHP84111yTV7/61Xn66af3rvvEE0/k4osvzimnnJJyuZxjjjkmZ599dpLkscceq3ncUqmUCy+8cO/t8ePHZ86cOZk2bVr+4A/+YO/yKVOm5KUvfWmefPLJQbG9853vrLl95plnZtasWVm/fv1+/5+77747pVIp/+k//afs3r17788pp5ySf/Nv/k02bNhwWPuHsUleHNif//mf54477sinP/3p/Nt/+28Pa1tGN7kxtA996EP53ve+l3/4h3/IZZddliuvvDL/7b/9t0PaltFPXtT60pe+lK9+9av57//9v/tKmjFObtT6gz/4g6xcuTIXXXRROjo6cumll+Zb3/pWpk2blg984AMH3JbmIS9q9ff35/nnn8+HPvShXHPNNens7Myf/dmf5ZOf/GS++c1v5n/9r/91wO1pHnLjwG655ZacdNJJedvb3nZY2zG6yYtaW7ZsycKFC3PSSSdl3bp1uf/++3P99dfntttuy3ve854DbktzkRu1rrrqqvz4xz/OlVdemZ6enmzdujXvfe9798bX6N8vzeGTAy/Ogcaqmnkcyxd9/o4zzjgjZ5xxRpLqNAlXX311Pv3pT+f666/P9ddfn2effTYdHR057rjjct1112XevHk5/vjjs3Xr1nR1deXXv/51zeMdf/zxOe6442qWHXvssZkyZcqg5z722GOHnJbglFNOGXLZL3/5y/3+Hz/72c9SFEVe9rKXDXn/y1/+8v1uC79LXgz20Y9+NNddd13+8i//MldeeeUhb0dzkRu1Zs6cmZkzZybJ3s7jNddckyVLluTkk08+pMdg9JMXybPPPpsrrrgiV111VaZPn753eqzf/OY3SZJf/epXOeaYY0xtOMbIjf074YQT8ta3vjV/8zd/k1//+teZMGHCYT8Go5O8qDrppJOyadOmnHfeeTXLL7jggqxYsSIPP/xwzjnnnAM+Bs1Fbgz2f/7P/8lDDz2U5cuXDzk9Ls1PXlR98IMfTG9vbx555JG95xPz58/P1KlTc9lll+WSSy7ZW+hhbJAbVZdddll+8Ytf5LrrrsvNN9+cpDq99p/+6Z/mr/7qr9LW1nbA7Rm95MDhOemkk5JkyFieeeaZlEqlnHDCCcPyXI1IUfwAjjnmmFx77bX59Kc/nR/96EdJkq9//evZvn17NmzYUNPBONh3AbwY//f//t8hl82ZM2e/20ydOjWlUikbN2484HdpwOGSF9WC+Ec+8pF85CMfyYc+9KFDD5qmJjcGe/3rX5+/+Zu/yRNPPKEoPkaN1bx4+umn87Of/Sw33HBDbrjhhkH3n3jiiVm0aFG+8pWvHOJ/QLMZq7lxIEVRJGnuT6RzYGM5L17zmtfk29/+9qDle/LClU1j21jOjX3dcsstSeJKWJKM7bx45JFH8spXvnLQB2xf97rXJUl+9KMfKYqPYWM5N5Lk6quvzooVK7Jp06ZMnjw5s2bNyrJlyzJx4kSzfI4RYz0HDsUrXvGKTJgwIT/84Q8H3ffDH/4wc+bMGfShgGbizOoFO3bsGHL5nqkTpk+fnmRgkOZ334CrV68+arHdcccdNbe/9a1v5cknn0xnZ+d+t3nrW9+aoijS09Oz95My+/68+tWvPmrx0jzkxWAf//jH85GPfCQf/vCHc+21177Yf4NRSm4cmvXr12fcuHFmJxkj5MWAU045JevXrx/0c9555+W4447L+vXrc9111w3Xv0eDkxsH9//+3//L3XffndNPP72pT74ZIC9qvf3tb0+S3HvvvTXL77nnniTJG97whiP4TxiN5MbQ/vVf/zWf//zn8/rXvz6vetWrXsy/wSgkL2pNnz49//RP/5Rnn322ZvmDDz6YJKlUKkf2zzDqyI2hveQlL8mrXvWqzJo1K0899VTuvPPO/Of//J/NRtWE5MCRGT9+fBYuXJju7u7s2rVr7/Knnnoq69evT1dX17A8T6NypfgLzjvvvFQqlSxcuDCnnXZa+vv788gjj+SGG27IpEmTsnz58iTVuf9PPPHEvPe97821116bY445JnfccUd+8IMfHLXYHnroobznPe/Jv//3/z5bt27Nf/2v/zVtbW35L//lv+x3m7POOiuXX355Lr300jz00EOZP39+Jk6cmB07duQb3/hGXv3qV+eP/uiPDvi89957b5577rm9ifHoo49m3bp1SarT4h5//PHD90/SkORFrRtuuCF/8Rd/kfPPPz9vectbBl3NYbBq7JAbtS6//PK0tLTk9a9/fV72spfl6aefzt/93d/lzjvvzJ/92Z+5SnyMkBcDjjvuuCFPdG677baUy+UDngTRfORGrYsvvjgzZ87MGWeckalTp2bTpk254YYb8rOf/Sy33XbbUfgvaUTyota5556bhQsX5mMf+1j6+/vzhje8IQ899FA++tGP5q1vfWve9KY3HY1/lQYkN4b2la98Jc8884yrxMcoeVFrxYoVueiii/KHf/iH+eM//uNMnTo13/72t/PJT34yr3zlK3PBBRccjX+VBiQ3av3oRz/Kl770pZxxxhl5yUtekh/84Af51Kc+lblz5+bjH//40fg3qTM5MNih1vQ++tGP5nWve13e+ta35oMf/GCef/75/MVf/EWmTp2a97///cO0FxpUQVEURXHnnXcWF198cTF37txi0qRJxTHHHFPMnDmzeNe73lU8+uijNet+61vfKt74xjcWxx9/fHHyyScX73nPe4qHH364SFLceuute9dbsmRJMXHixEHPdfbZZxe///u/P2j5rFmzire85S17b996661FkuIf//Efi3e9613FCSecUEyYMKG48MILi02bNtVsu2TJkmLWrFmDHvNzn/tc8e/+3b8rJk6cWEyYMKF4xSteUVxyySXFQw89dNB9MmvWrCLJkD8//elPD7o9o5+8GBzj/nLC4XRskRuDt+vo6CimTp1ajB8/vjjhhBOKs88+u7j99tsPuB3NRV4c3P7+H5qb3Kj1yU9+sjj99NOL1tbWolwuFyeffHLxtre9rfjud797wO1oLvJisH/5l38prr766mLGjBnF+PHji5kzZxbXXHNN8fzzzx90W5qH3BjaH/7hHxYTJ04sent7D2l9mou8GOzrX/96ce655xannHJKMWHChGLevHnF+9///uLpp58+6LY0D7lR65//+Z+L+fPnF1OmTCmOPfbYYs6cOcWHP/zh4tlnnz3gdoxecmCww6npPfTQQ8Wb3/zm4vjjjy9aWlqKiy66qNi8efNBn2O0KxXFC19SRcO57bbbcumll+Z73/tezjjjjHqHAw1BXsDQ5AYMJi9gaHIDBpMXMDS5AYPJCxia3GCskwONz3eKAwAAAAAAANC0FMUBAAAAAAAAaFqmTwcAAAAAAACgablSHAAAAAAAAICmpSgOAAAAAAAAQNNSFAcAAAAAAACgaY0/0g37+/uzffv2TJ48OaVSaThjghFTFEV27dqV6dOnZ9y4F/8ZEXlBs5AbMJi8gKHJDRhMXsDQ5AYMJi9gaHIDBpMXMLRDzY0jLopv3749M2bMONLNoaFs3bo1lUrlRT+OvKDZyA0YTF7A0OQGDCYvYGhyAwaTFzA0uQGDyQsY2sFy44iL4pMnTz7STamDnTt3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",
++++++++++      "image/png": "",
+++++++++       "text/plain": [
+++++++++        "<Figure size 2000x500 with 10 Axes>"
+++++++++       ]
+++++++++@@ -184,18 +184,45 @@
+++++++++   },
+++++++++   {
+++++++++    "cell_type": "code",
+++++++++-   "execution_count": 13,
++++++++++   "execution_count": 3,
+++++++++    "metadata": {},
+++++++++    "outputs": [
+++++++++     {
+++++++++-     "ename": "ModuleNotFoundError",
+++++++++-     "evalue": "No module named 'diffuser'",
++++++++++     "name": "stdout",
++++++++++     "output_type": "stream",
++++++++++     "text": [
++++++++++      "Loaded dataset with 901 samples.\n"
++++++++++     ]
++++++++++    },
++++++++++    {
++++++++++     "name": "stderr",
++++++++++     "output_type": "stream",
++++++++++     "text": [
++++++++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
++++++++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
++++++++++     ]
++++++++++    },
++++++++++    {
++++++++++     "ename": "EinopsError",
++++++++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++++++      "output_type": "error",
+++++++++      "traceback": [
+++++++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+++++++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
+++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
++++++++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++++++++      "\nDuring handling of the above exception, another exception occurred:\n",
++++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
++++++++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
++++++++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
++++++++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
++++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
++++++++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
+++++++++      ]
+++++++++     }
+++++++++    ],
+++++++++@@ -212,7 +239,6 @@
+++++++++     "import einops\n",
+++++++++     "from collections import namedtuple\n",
+++++++++     "\n",
+++++++++-    "\n",
+++++++++     "# Define custom namedtuple for storing trajectories\n",
+++++++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
+++++++++     "\n",
+++++++++@@ -258,6 +284,34 @@
+++++++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
+++++++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
+++++++++     "\n",
++++++++++    "# Define the PolicyModel class\n",
++++++++++    "class PolicyModel(nn.Module):\n",
++++++++++    "    def __init__(self, grid_size):\n",
++++++++++    "        super(PolicyModel, self).__init__()\n",
++++++++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
++++++++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
++++++++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
++++++++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
++++++++++    "\n",
++++++++++    "    def forward(self, x):\n",
++++++++++    "        x = torch.relu(self.conv1(x))\n",
++++++++++    "        x = torch.relu(self.conv2(x))\n",
++++++++++    "        x = x.view(x.size(0), -1)\n",
++++++++++    "        x = torch.relu(self.fc1(x))\n",
++++++++++    "        x = self.fc2(x)\n",
++++++++++    "        return x\n",
++++++++++    "\n",
++++++++++    "# Define a dummy normalizer class for simplicity\n",
++++++++++    "class DummyNormalizer:\n",
++++++++++    "    def __init__(self):\n",
++++++++++    "        self.action_dim = 2\n",
++++++++++    "\n",
++++++++++    "    def normalize(self, data, key):\n",
++++++++++    "        return data\n",
++++++++++    "\n",
++++++++++    "    def unnormalize(self, data, key):\n",
++++++++++    "        return data\n",
++++++++++    "\n",
+++++++++     "# Define the Policy class\n",
+++++++++     "class Policy:\n",
+++++++++     "    def __init__(self, diffusion_model, normalizer):\n",
+++++++++@@ -267,17 +321,17 @@
+++++++++     "\n",
+++++++++     "    @property\n",
+++++++++     "    def device(self):\n",
+++++++++-    "        parameters = list(self.diffusion_model.parameters())\n",
+++++++++-    "        return parameters[0].device\n",
++++++++++    "        return next(self.diffusion_model.parameters()).device\n",
+++++++++     "\n",
+++++++++     "    def _format_conditions(self, conditions, batch_size):\n",
+++++++++-    "        conditions = utils.apply_dict(\n",
++++++++++    "        conditions = apply_dict(\n",
+++++++++     "            self.normalizer.normalize,\n",
+++++++++     "            conditions,\n",
+++++++++     "            'observations',\n",
+++++++++     "        )\n",
+++++++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
+++++++++-    "        conditions = utils.apply_dict(\n",
++++++++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
++++++++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
++++++++++    "        conditions = apply_dict(\n",
+++++++++     "            einops.repeat,\n",
+++++++++     "            conditions,\n",
+++++++++     "            'd -> repeat d', repeat=batch_size,\n",
+++++++++@@ -289,7 +343,7 @@
+++++++++     "\n",
+++++++++     "        # Run reverse diffusion process\n",
+++++++++     "        sample = self.diffusion_model(conditions)\n",
+++++++++-    "        sample = utils.to_np(sample)\n",
++++++++++    "        sample = to_np(sample)\n",
+++++++++     "\n",
+++++++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
+++++++++     "        actions = sample[:, :, :self.action_dim]\n",
+++++++++@@ -308,8 +362,9 @@
+++++++++     "# Training the policy-guided diffusion model\n",
+++++++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
+++++++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
+++++++++-    "    model = PolicyModel(grid_size)\n",
+++++++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
++++++++++    "    diffusion_model = PolicyModel(grid_size)\n",
++++++++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
++++++++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
+++++++++     "\n",
+++++++++     "    # Reward function\n",
+++++++++     "    def compute_reward(waypoints, goal):\n",
+++++++++@@ -318,11 +373,12 @@
+++++++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
+++++++++     "        return reward\n",
+++++++++     "\n",
+++++++++-    "    model.train()\n",
++++++++++    "    diffusion_model.train()\n",
+++++++++     "    for epoch in range(num_epochs):\n",
+++++++++     "        total_loss = 0.0\n",
+++++++++     "        for batch in dataloader:\n",
+++++++++     "            grid, start, goal, waypoints = batch\n",
++++++++++    "            conditions = {'observations': grid}\n",
+++++++++     "\n",
+++++++++     "            # Use the grid as input and predict the next waypoint after start\n",
+++++++++     "            optimizer.zero_grad()\n",
+++++++++@@ -330,7 +386,7 @@
+++++++++     "            current_position = start\n",
+++++++++     "            for _ in range(waypoints.size(1)):\n",
+++++++++     "                input_grid = grid\n",
+++++++++-    "                predicted_waypoint = model(input_grid)\n",
++++++++++    "                predicted_waypoint, _ = model(conditions)\n",
+++++++++     "                predicted_waypoints.append(predicted_waypoint)\n",
+++++++++     "                current_position = predicted_waypoint\n",
+++++++++     "\n",
++++++++\ No newline at end of file
++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
++++++++index 5618eda..e412a8e 100644
++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
++++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl
++++++++index 75127f1..27512cf 100644
++++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl and b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl differ
+++++++ diff --git a/scripts/train.py b/scripts/train.py
+++++++-index 502837e..f9646f7 100644
++++++++index f9646f7..d3ed429 100644
+++++++ --- a/scripts/train.py
+++++++ +++ b/scripts/train.py
+++++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
+++++++- 
+++++++- class Parser(utils.Parser):
+++++++-     dataset: str = 'hopper-medium-expert-v2'
+++++++--    config: str = 'config.locomotion'
+++++++-+    #config: str = 'config.locomotion'
+++++++-+    config: str = 'config.maze2d'
+++++++- 
+++++++- args = Parser().parse_args('diffusion')
+++++++- 
+++++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
++++++++@@ -87,7 +87,6 @@ trainer_config = utils.Config(
+++++++      results_folder=args.savepath,
+++++++      bucket=args.bucket,
+++++++      n_reference=args.n_reference,
+++++++-+    n_samples=args.n_samples,
+++++++-+
++++++++-    n_samples=args.n_samples,
++++++++ 
+++++++  )
+++++++  
+++++++- #-----------------------------------------------------------------------------#
+++++++\ No newline at end of file
++++++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
++++++++index f4bf52b..c1f0340 100644
++++++++--- a/scripts/training.ipynb
+++++++++++ b/scripts/training.ipynb
++++++++@@ -2,20 +2,20 @@
++++++++  "cells": [
++++++++   {
++++++++    "cell_type": "code",
++++++++-   "execution_count": 2,
+++++++++   "execution_count": 1,
++++++++    "metadata": {},
++++++++    "outputs": [
++++++++     {
++++++++      "name": "stdout",
++++++++      "output_type": "stream",
++++++++      "text": [
++++++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
++++++++-      "Loaded dataset with 894 samples.\n"
+++++++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
+++++++++      "Loaded dataset with 901 samples.\n"
++++++++      ]
++++++++     },
++++++++     {
++++++++      "data": {
++++++++-      "image/png": "",
+++++++++      "image/png": "iVBORw0KGgoAAAANSUhEUgAAB8UAAADfCAYAAABvTgKOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3dfZRcZZ0n8G+lAxKSdEMIStKdl9EkEEddZhZdBRs6yvCmOcE269nFlQi4xFnAZMYZAdcZfGHU4QzH5LiDA2sExpc5MLHVMwwws7smEBVfGBZXB9AETKA7WRVZ04GRUbrv/lEkoenOe6fr1u3P55w63XW7btWv6z6/ep7n/ureWyuKoggAAAAAAAAAVNCERgcAAAAAAAAAAIeLojgAAAAAAAAAlaUoDgAAAAAAAEBlKYoDAAAAAAAAUFmK4gAAAAAAAABUlqI4AAAAAAAAAJWlKA4AAAAAAABAZSmKAwAAAAAAAFBZiuIAAAAAAAAAVJai+At85zvfydve9rbMnj07L3nJS/Kyl70sb3jDG/L+97+/0aHt07vf/e7MnTt31J5vx44d+cAHPpCzzjorxx9/fGq1Wj784Q+P2vPTPOTFbl//+tdz8cUX56STTsrkyZPT3t6eJUuW5J/+6Z9G7TVoHnJjtwcffDBvectbMnv27EyaNCnTpk3LG97whnzhC18YtdegOciLPfvsZz+bWq2WKVOmHLbXoLzkxm7r169PrVYb8fbtb3971F6H8pMXw33jG9/Ieeedl2OPPTaTJk3K/Pnz87GPfWzUX4dykxtDn29PfYZ+Y3yRF0P97//9v3P++edn5syZOfroo3PSSSflox/9aP7lX/5lVF+H8pMbQ333u9/N2WefnalTp2bKlClZtGhRvvnNb47qa1AucmC3A63pPfDAAznzzDMzZcqUHHPMMenu7s5jjz02avGUlaL48/7+7/8+p556avr7+3PdddflH//xH7N69eqcdtppue222xod3pj7xS9+kZtuuin/+q//mvPPP7/R4dAg8mKoz3zmM9m8eXNWrFiRO++8M6tXr87PfvazvP71r8/Xv/71RofHGJIbQ/3yl7/MrFmz8vGPfzx33nln/vqv/zpz587Nu971rlx77bWNDo8xIi/2rK+vL3/0R3+UmTNnNjoUGkBujOzjH/947rvvviG3V73qVY0OizEiL4b70pe+lDPOOCNtbW3567/+69x555258sorUxRFo0NjDMmNof7kT/5kWF9x3333Zfr06Wlvb89rX/vaRofIGJAXQz300EM59dRTs3nz5qxatSp33HFH/sN/+A/56Ec/mv/4H/9jo8NjDMmNob73ve/l9NNPz69+9at8/vOfz+c///k8++yzefOb35z77ruv0eFxGMiBoQ6kpvfII4+kq6srv/71r3P77bfnc5/7XH784x+ns7MzP//5z8co4saoFWZYSZIzzjgjfX19eeSRRzJx4sQhfxscHMyECeX+/sC73/3urF+/Pps3bx6V59vZLGq1Wp588skcf/zxueaaaxwtPs7Ii6F+9rOf5aUvfemQZU8//XTmzZuXV73qVfmf//N/jsrrUH5yY/+8/vWvz9atW/P4448f1tehHOTFni1evDi1Wi3Tpk3L2rVr8/TTT4/6a1BecmOo9evXZ9GiRfnbv/3bLF26dFSek+YjL4bq6+vLiSeemAsvvDA33HDDqDwnzUlu7Ns999yTrq6ufOhDH3ImhXFCXgz1oQ99KH/2Z3+WTZs25RWveMWu5cuXL89NN92Up556Kscee+yovBblJjeGOuecc/Lggw/msccey9FHH52kfuTsy1/+8ixYsMAR4xUkB4Y6kJreO97xjqxbty6PPvpoWltbkyRbtmzJ/Pnz8wd/8Af58z//81GJqYzK3SrG0C9+8YtMnz59WPIkGZY8t912W84666zMmDEjkyZNysKFC3PVVVflmWeeGfK4d7/73ZkyZUoeeeSRnH322Zk8eXJmzJiRT37yk0mSb3/723njG9+YyZMnZ8GCBbn11luHrH/LLbekVqvlf/yP/5GLLroo06ZNy+TJk7N48eL9Oo1BURS54YYbcvLJJ2fSpEk59thjs3Tp0v1ad+epqBjf5MVQLy6IJ8mUKVPyyle+Mk888cQ+16c65Mb+2dN7RDXJi5F94QtfyD333KPIMY7JDRhOXgz12c9+Ns8880yuvPLKfT6WapMb+7ZmzZrUarVcfPHFB7U+zUdeDHXEEUckSdra2oYsP+aYYzJhwoQceeSR+3wOqkFuDPXNb34zXV1duwriSTJ16tScfvrp+da3vpVt27bt8zloLnJgqP2t6T333HO544478va3v31XQTxJ5syZk0WLFuUrX/nKPp+jmSmKP+8Nb3hDvvOd7+R973tfvvOd7+Q3v/nNHh+7cePGnHfeeVmzZk3uvvvurFy5MrfffnsWL1487LG/+c1v0t3dnbe85S352te+lnPPPTdXX311PvjBD2bZsmW5+OKL85WvfCUnnnhi3v3ud494beJLLrkkEyZMyJe+9KWsWrUq3/3ud9PV1ZVf/vKXe/2fli9fnpUrV+bMM8/MV7/61dxwww3553/+55x66qn56U9/euBvEuOOvNi37du354EHHshv//ZvH/C6NC+5MbLBwcE899xz+fnPf54bbrgh//AP/2Dn7jgiL4b72c9+lpUrV+aTn/xkOjo69vl4qklujOyyyy7LxIkT09ramrPPPjvf+MY39ms9qkFeDHXvvfdm2rRpeeSRR3LyySdn4sSJeelLX5r3vve96e/v3+u6VIvc2Lvt27dn7dq1efOb35zf+q3fOqB1aV7yYqhly5blmGOOye///u/nsccey44dO3LHHXfkxhtvzGWXXZbJkyfvdX2qQ24M9etf/zoveclLhi3fuewHP/jBXten+ciBg/Poo4/mV7/6VV7zmtcM+9trXvOabNq0Kc8+++yovFYpFRRFURRPPvlk8cY3vrFIUiQpjjjiiOLUU08tPvGJTxQ7duzY43qDg4PFb37zm+Kee+4pkhTf//73d/1t2bJlRZLiy1/+8q5lv/nNb4rjjz++SFI88MADu5b/4he/KFpaWoo//MM/3LXs5ptvLpIUb3vb24a85je/+c0iSXHttdcOea05c+bsun/fffcVSYrrr79+yLpPPPFEMWnSpOIDH/jAfr83P//5z4skxTXXXLPf61AN8mLf3vnOdxYTJ04s7r///gNel+YlN0a2fPnyXe/JkUceWdxwww37tR7VIC+Ge/vb316ceuqpxeDg4K7XmDx58j7Xo1rkxlAPPPBAsWLFiuIrX/lKce+99xaf+9znioULFxYtLS3F3Xffvdd1qQ55MdSJJ55YHHXUUcXUqVOLj3/848W6deuK6667rpg0aVJx2mmn7epHqD65sXef+cxniiTF3/zN3xzQejQ3eTHcww8/XJx00km73pMkxfve9z79xTgjN4Y6+eSTiwULFhQDAwNDYn/5y19eJCm+9KUv7XV9mo8c2LO91fR2xjLSeOrjH/94kaTYunXrfr9Ws3Gk+POOO+64bNiwId/73vfyyU9+MkuWLMmPf/zjXH311Xn1q1+dJ598ctdjH3vssVxwwQU54YQT0tLSkiOOOCJnnHFGkuThhx8e8ry1Wi3nnXfervsTJ07MvHnzMmPGjPzO7/zOruXTpk3LS1/60mzZsmVYbO985zuH3D/11FMzZ86crFu3bo//zx133JFarZb/9J/+U5577rldtxNOOCH/5t/8m6xfv/6A3h/GJ3mxd3/yJ3+SL37xi/nUpz6Vf/tv/+0BrUtzkxsj++AHP5jvfe97+fu///tcfPHFufzyy/MXf/EX+7UuzU9eDPXlL385f/d3f5f//t//u0vSjHNyY6jf+Z3fyapVq3L++eens7MzF110Ub71rW9lxowZ+cAHPrDXdakOeTHU4OBgnn322Xzwgx/M1Vdfna6urvzxH/9xPvGJT+Sb3/xm/tf/+l97XZ/qkBt7t2bNmhx33HF529vedkDr0dzkxVCbN2/O4sWLc9xxx2Xt2rW55557ct111+WWW27Je97znr2uS7XIjaGuuOKK/PjHP87ll1+evr6+PPHEE3nve9+7K76yX1+aAycHDs3e9lVVeT+WC32+yCmnnJJTTjklSf00CVdeeWU+9alP5brrrst1112Xp59+Op2dnTnqqKNy7bXXZsGCBTn66KPzxBNPpLu7O7/61a+GPN/RRx+do446asiyI488MtOmTRv22kceeeSIpyU44YQTRlz2i1/8Yo//x09/+tMURZGXvexlI/795S9/+R7XhReTF8N95CMfybXXXps/+7M/y+WXX77f61EtcmOo2bNnZ/bs2Umya/B49dVXZ9myZTn++OP36zlofvIiefrpp3PZZZfliiuuyMyZM3edHuvXv/51kuSXv/xljjjiCKc2HGfkxp4dc8wxeetb35q/+qu/yq9+9atMmjTpgJ+D5iQv6o477rhs3LgxZ5999pDl5557blauXJkHHnggZ5555l6fg2qRG8P9n//zf3L//fdnxYoVI54el+qTF3VXXXVV+vv78+CDD+6aT5x++umZPn16Lr744lx44YW7Cj2MD3Kj7uKLL87Pf/7zXHvttfnMZz6TpH567T/6oz/Kn//5n6e9vX2v69O85MCBOe6445JkxFieeuqp1Gq1HHPMMaPyWmWkKL4XRxxxRK655pp86lOfyg9/+MMkyde//vVs3bo169evHzLA2Ne1AA7F//2//3fEZfPmzdvjOtOnT0+tVsuGDRv2ei0NOFDyol4Q//CHP5wPf/jD+eAHP7j/QVNpcmO4173udfmrv/qrPPbYY4ri49R4zYsnn3wyP/3pT3P99dfn+uuvH/b3Y489NkuWLMlXv/rV/fwPqJrxmht7UxRFkmp/I529G8958ZrXvCbf/va3hy3fmReObBrfxnNuvNCaNWuSxJGwJBnfefHggw/mla985bAv2L72ta9Nkvzwhz9UFB/HxnNuJMmVV16ZlStXZuPGjZk6dWrmzJmT5cuXZ/Lkyc7yOU6M9xzYH694xSsyadKk/OAHPxj2tx/84AeZN2/esC8FVImZ1fO2bds24vKdp06YOXNmkt07aV7cAG+88cbDFtsXv/jFIfe/9a1vZcuWLenq6trjOm9961tTFEX6+vp2fVPmhbdXv/rVhy1eqkNeDPexj30sH/7wh/OhD30o11xzzaH+GzQpubF/1q1blwkTJjg7yTghL3Y74YQTsm7dumG3s88+O0cddVTWrVuXa6+9drT+PUpObuzb//t//y933HFHTj755EpPvtlNXgz19re/PUly1113DVl+5513Jkle//rXH8R/QjOSGyP713/913zhC1/I6173urzqVa86lH+DJiQvhpo5c2b++Z//OU8//fSQ5ffdd1+SpKOj4+D+GZqO3BjZS17ykrzqVa/KnDlz8vjjj+e2227Lf/7P/9nZqCpIDhyciRMnZvHixenp6cmOHTt2LX/88cezbt26dHd3j8rrlJUjxZ939tlnp6OjI4sXL85JJ52UwcHBPPjgg7n++uszZcqUrFixIkn93P/HHnts3vve9+aaa67JEUcckS9+8Yv5/ve/f9hiu//++/Oe97wn//7f//s88cQT+a//9b+mvb09/+W//Jc9rnPaaafl0ksvzUUXXZT7778/p59+eiZPnpxt27blG9/4Rl796lfn93//9/f6unfddVeeeeaZXYnx0EMPZe3atUnqp8U9+uijR++fpJTkxVDXX399/vRP/zTnnHNO3vKWtww7msPOqvFDbgx16aWXprW1Na973evyspe9LE8++WT+9m//Nrfddlv++I//2FHi44S82O2oo44acaJzyy23pKWlZa+TIKpHbgx1wQUXZPbs2TnllFMyffr0bNy4Mddff31++tOf5pZbbjkM/yVlJC+GOuuss7J48eJ89KMfzeDgYF7/+tfn/vvvz0c+8pG89a1vzRvf+MbD8a9SQnJjZF/96lfz1FNPOUp8nJIXQ61cuTLnn39+fu/3fi9/8Ad/kOnTp+fb3/52PvGJT+SVr3xlzj333MPxr1JCcmOoH/7wh/nyl7+cU045JS95yUvy/e9/P5/85Cczf/78fOxjHzsc/yYNJgeG29+a3kc+8pG89rWvzVvf+tZcddVVefbZZ/Onf/qnmT59et7//veP0rtQUgVFURTFbbfdVlxwwQXF/PnziylTphRHHHFEMXv27OJd73pX8dBDDw157Le+9a3iDW94Q3H00UcXxx9/fPGe97yneOCBB4okxc0337zrccuWLSsmT5487LXOOOOM4rd/+7eHLZ8zZ07xlre8Zdf9m2++uUhS/OM//mPxrne9qzjmmGOKSZMmFeedd16xcePGIesuW7asmDNnzrDn/NznPlf8u3/374rJkycXkyZNKl7xilcUF154YXH//ffv8z2ZM2dOkWTE209+8pN9rk/zkxfDY9xTTvg4HV/kxvD1Ojs7i+nTpxcTJ04sjjnmmOKMM84oPv/5z+91PapFXuzbnv4fqk1uDPWJT3yiOPnkk4u2traipaWlOP7444u3ve1txXe/+929rke1yIvh/uVf/qW48sori1mzZhUTJ04sZs+eXVx99dXFs88+u891qQ65MbLf+73fKyZPnlz09/fv1+OpFnkx3Ne//vXirLPOKk444YRi0qRJxYIFC4r3v//9xZNPPrnPdakOuTHUj370o+L0008vpk2bVhx55JHFvHnzig996EPF008/vdf1aF5yYLgDqendf//9xZvf/Obi6KOPLlpbW4vzzz+/2LRp0z5fo9nViuL5i1RROrfccksuuuiifO9738spp5zS6HCgFOQFjExuwHDyAkYmN2A4eQEjkxswnLyAkckNxjs5UH6uKQ4AAAAAAABAZSmKAwAAAAAAAFBZTp8OAAAAAAAAQGU5UhwAAAAAAACAylIUBwAAAAAAAKCyFMUBAAAAAAAAqKyJB7vi4OBgtm7dmqlTp6ZWq41mTDBmiqLIjh07MnPmzEyYcOjfEZEXVIXcgOHkBYxMbsBw8gJGJjdgOHkBI5MbMJy8gJHtb24cdFF869atmTVr1sGuDqXyxBNPpKOj45CfR15QNXIDhpMXMDK5AcPJCxiZ3IDh5AWMTG7AcPICRrav3DjoovjUqVN3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",
++++++++       "text/plain": [
++++++++        "<Figure size 2000x500 with 10 Axes>"
++++++++       ]
++++++++@@ -184,18 +184,45 @@
++++++++   },
++++++++   {
++++++++    "cell_type": "code",
++++++++-   "execution_count": 13,
+++++++++   "execution_count": 3,
++++++++    "metadata": {},
++++++++    "outputs": [
++++++++     {
++++++++-     "ename": "ModuleNotFoundError",
++++++++-     "evalue": "No module named 'diffuser'",
+++++++++     "name": "stdout",
+++++++++     "output_type": "stream",
+++++++++     "text": [
+++++++++      "Loaded dataset with 901 samples.\n"
+++++++++     ]
+++++++++    },
+++++++++    {
+++++++++     "name": "stderr",
+++++++++     "output_type": "stream",
+++++++++     "text": [
+++++++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
+++++++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
+++++++++     ]
+++++++++    },
+++++++++    {
+++++++++     "ename": "EinopsError",
+++++++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++++++      "output_type": "error",
++++++++      "traceback": [
++++++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
++++++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
++++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
+++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
+++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
+++++++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++++++      "\nDuring handling of the above exception, another exception occurred:\n",
+++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
+++++++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
+++++++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
+++++++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
+++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
+++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
+++++++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
++++++++      ]
++++++++     }
++++++++    ],
++++++++@@ -212,7 +239,6 @@
++++++++     "import einops\n",
++++++++     "from collections import namedtuple\n",
++++++++     "\n",
++++++++-    "\n",
++++++++     "# Define custom namedtuple for storing trajectories\n",
++++++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
++++++++     "\n",
++++++++@@ -258,6 +284,34 @@
++++++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
++++++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
++++++++     "\n",
+++++++++    "# Define the PolicyModel class\n",
+++++++++    "class PolicyModel(nn.Module):\n",
+++++++++    "    def __init__(self, grid_size):\n",
+++++++++    "        super(PolicyModel, self).__init__()\n",
+++++++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
+++++++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
+++++++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
+++++++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
+++++++++    "\n",
+++++++++    "    def forward(self, x):\n",
+++++++++    "        x = torch.relu(self.conv1(x))\n",
+++++++++    "        x = torch.relu(self.conv2(x))\n",
+++++++++    "        x = x.view(x.size(0), -1)\n",
+++++++++    "        x = torch.relu(self.fc1(x))\n",
+++++++++    "        x = self.fc2(x)\n",
+++++++++    "        return x\n",
+++++++++    "\n",
+++++++++    "# Define a dummy normalizer class for simplicity\n",
+++++++++    "class DummyNormalizer:\n",
+++++++++    "    def __init__(self):\n",
+++++++++    "        self.action_dim = 2\n",
+++++++++    "\n",
+++++++++    "    def normalize(self, data, key):\n",
+++++++++    "        return data\n",
+++++++++    "\n",
+++++++++    "    def unnormalize(self, data, key):\n",
+++++++++    "        return data\n",
+++++++++    "\n",
++++++++     "# Define the Policy class\n",
++++++++     "class Policy:\n",
++++++++     "    def __init__(self, diffusion_model, normalizer):\n",
++++++++@@ -267,17 +321,17 @@
++++++++     "\n",
++++++++     "    @property\n",
++++++++     "    def device(self):\n",
++++++++-    "        parameters = list(self.diffusion_model.parameters())\n",
++++++++-    "        return parameters[0].device\n",
+++++++++    "        return next(self.diffusion_model.parameters()).device\n",
++++++++     "\n",
++++++++     "    def _format_conditions(self, conditions, batch_size):\n",
++++++++-    "        conditions = utils.apply_dict(\n",
+++++++++    "        conditions = apply_dict(\n",
++++++++     "            self.normalizer.normalize,\n",
++++++++     "            conditions,\n",
++++++++     "            'observations',\n",
++++++++     "        )\n",
++++++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
++++++++-    "        conditions = utils.apply_dict(\n",
+++++++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
+++++++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
+++++++++    "        conditions = apply_dict(\n",
++++++++     "            einops.repeat,\n",
++++++++     "            conditions,\n",
++++++++     "            'd -> repeat d', repeat=batch_size,\n",
++++++++@@ -289,7 +343,7 @@
++++++++     "\n",
++++++++     "        # Run reverse diffusion process\n",
++++++++     "        sample = self.diffusion_model(conditions)\n",
++++++++-    "        sample = utils.to_np(sample)\n",
+++++++++    "        sample = to_np(sample)\n",
++++++++     "\n",
++++++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
++++++++     "        actions = sample[:, :, :self.action_dim]\n",
++++++++@@ -308,8 +362,9 @@
++++++++     "# Training the policy-guided diffusion model\n",
++++++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
++++++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
++++++++-    "    model = PolicyModel(grid_size)\n",
++++++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
+++++++++    "    diffusion_model = PolicyModel(grid_size)\n",
+++++++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
+++++++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
++++++++     "\n",
++++++++     "    # Reward function\n",
++++++++     "    def compute_reward(waypoints, goal):\n",
++++++++@@ -318,11 +373,12 @@
++++++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
++++++++     "        return reward\n",
++++++++     "\n",
++++++++-    "    model.train()\n",
+++++++++    "    diffusion_model.train()\n",
++++++++     "    for epoch in range(num_epochs):\n",
++++++++     "        total_loss = 0.0\n",
++++++++     "        for batch in dataloader:\n",
++++++++     "            grid, start, goal, waypoints = batch\n",
+++++++++    "            conditions = {'observations': grid}\n",
++++++++     "\n",
++++++++     "            # Use the grid as input and predict the next waypoint after start\n",
++++++++     "            optimizer.zero_grad()\n",
++++++++@@ -330,7 +386,7 @@
++++++++     "            current_position = start\n",
++++++++     "            for _ in range(waypoints.size(1)):\n",
++++++++     "                input_grid = grid\n",
++++++++-    "                predicted_waypoint = model(input_grid)\n",
+++++++++    "                predicted_waypoint, _ = model(conditions)\n",
++++++++     "                predicted_waypoints.append(predicted_waypoint)\n",
++++++++     "                current_position = predicted_waypoint\n",
++++++++     "\n",
+++++++\ No newline at end of file
+++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
+++++++index 5618eda..90a6f92 100644
+++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
+++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl
+++++++index 75127f1..27512cf 100644
+++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl and b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl differ
++++++ diff --git a/scripts/train.py b/scripts/train.py
++++++-index 502837e..f9646f7 100644
+++++++index f9646f7..d3ed429 100644
++++++ --- a/scripts/train.py
++++++ +++ b/scripts/train.py
++++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
++++++- 
++++++- class Parser(utils.Parser):
++++++-     dataset: str = 'hopper-medium-expert-v2'
++++++--    config: str = 'config.locomotion'
++++++-+    #config: str = 'config.locomotion'
++++++-+    config: str = 'config.maze2d'
++++++- 
++++++- args = Parser().parse_args('diffusion')
++++++- 
++++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
+++++++@@ -87,7 +87,6 @@ trainer_config = utils.Config(
++++++      results_folder=args.savepath,
++++++      bucket=args.bucket,
++++++      n_reference=args.n_reference,
++++++-+    n_samples=args.n_samples,
++++++-+
+++++++-    n_samples=args.n_samples,
+++++++ 
++++++  )
++++++  
++++++- #-----------------------------------------------------------------------------#
++++++\ No newline at end of file
+++++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
+++++++index f4bf52b..c1f0340 100644
+++++++--- a/scripts/training.ipynb
++++++++++ b/scripts/training.ipynb
+++++++@@ -2,20 +2,20 @@
+++++++  "cells": [
+++++++   {
+++++++    "cell_type": "code",
+++++++-   "execution_count": 2,
++++++++   "execution_count": 1,
+++++++    "metadata": {},
+++++++    "outputs": [
+++++++     {
+++++++      "name": "stdout",
+++++++      "output_type": "stream",
+++++++      "text": [
+++++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
+++++++-      "Loaded dataset with 894 samples.\n"
++++++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
++++++++      "Loaded dataset with 901 samples.\n"
+++++++      ]
+++++++     },
+++++++     {
+++++++      "data": {
+++++++-      "image/png": "",
++++++++      "image/png": "",
+++++++       "text/plain": [
+++++++        "<Figure size 2000x500 with 10 Axes>"
+++++++       ]
+++++++@@ -184,18 +184,45 @@
+++++++   },
+++++++   {
+++++++    "cell_type": "code",
+++++++-   "execution_count": 13,
++++++++   "execution_count": 3,
+++++++    "metadata": {},
+++++++    "outputs": [
+++++++     {
+++++++-     "ename": "ModuleNotFoundError",
+++++++-     "evalue": "No module named 'diffuser'",
++++++++     "name": "stdout",
++++++++     "output_type": "stream",
++++++++     "text": [
++++++++      "Loaded dataset with 901 samples.\n"
++++++++     ]
++++++++    },
++++++++    {
++++++++     "name": "stderr",
++++++++     "output_type": "stream",
++++++++     "text": [
++++++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
++++++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
++++++++     ]
++++++++    },
++++++++    {
++++++++     "ename": "EinopsError",
++++++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++++      "output_type": "error",
+++++++      "traceback": [
+++++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+++++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
+++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
++++++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++++++      "\nDuring handling of the above exception, another exception occurred:\n",
++++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
++++++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
++++++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
++++++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
++++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
++++++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
+++++++      ]
+++++++     }
+++++++    ],
+++++++@@ -212,7 +239,6 @@
+++++++     "import einops\n",
+++++++     "from collections import namedtuple\n",
+++++++     "\n",
+++++++-    "\n",
+++++++     "# Define custom namedtuple for storing trajectories\n",
+++++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
+++++++     "\n",
+++++++@@ -258,6 +284,34 @@
+++++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
+++++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
+++++++     "\n",
++++++++    "# Define the PolicyModel class\n",
++++++++    "class PolicyModel(nn.Module):\n",
++++++++    "    def __init__(self, grid_size):\n",
++++++++    "        super(PolicyModel, self).__init__()\n",
++++++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
++++++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
++++++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
++++++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
++++++++    "\n",
++++++++    "    def forward(self, x):\n",
++++++++    "        x = torch.relu(self.conv1(x))\n",
++++++++    "        x = torch.relu(self.conv2(x))\n",
++++++++    "        x = x.view(x.size(0), -1)\n",
++++++++    "        x = torch.relu(self.fc1(x))\n",
++++++++    "        x = self.fc2(x)\n",
++++++++    "        return x\n",
++++++++    "\n",
++++++++    "# Define a dummy normalizer class for simplicity\n",
++++++++    "class DummyNormalizer:\n",
++++++++    "    def __init__(self):\n",
++++++++    "        self.action_dim = 2\n",
++++++++    "\n",
++++++++    "    def normalize(self, data, key):\n",
++++++++    "        return data\n",
++++++++    "\n",
++++++++    "    def unnormalize(self, data, key):\n",
++++++++    "        return data\n",
++++++++    "\n",
+++++++     "# Define the Policy class\n",
+++++++     "class Policy:\n",
+++++++     "    def __init__(self, diffusion_model, normalizer):\n",
+++++++@@ -267,17 +321,17 @@
+++++++     "\n",
+++++++     "    @property\n",
+++++++     "    def device(self):\n",
+++++++-    "        parameters = list(self.diffusion_model.parameters())\n",
+++++++-    "        return parameters[0].device\n",
++++++++    "        return next(self.diffusion_model.parameters()).device\n",
+++++++     "\n",
+++++++     "    def _format_conditions(self, conditions, batch_size):\n",
+++++++-    "        conditions = utils.apply_dict(\n",
++++++++    "        conditions = apply_dict(\n",
+++++++     "            self.normalizer.normalize,\n",
+++++++     "            conditions,\n",
+++++++     "            'observations',\n",
+++++++     "        )\n",
+++++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
+++++++-    "        conditions = utils.apply_dict(\n",
++++++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
++++++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
++++++++    "        conditions = apply_dict(\n",
+++++++     "            einops.repeat,\n",
+++++++     "            conditions,\n",
+++++++     "            'd -> repeat d', repeat=batch_size,\n",
+++++++@@ -289,7 +343,7 @@
+++++++     "\n",
+++++++     "        # Run reverse diffusion process\n",
+++++++     "        sample = self.diffusion_model(conditions)\n",
+++++++-    "        sample = utils.to_np(sample)\n",
++++++++    "        sample = to_np(sample)\n",
+++++++     "\n",
+++++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
+++++++     "        actions = sample[:, :, :self.action_dim]\n",
+++++++@@ -308,8 +362,9 @@
+++++++     "# Training the policy-guided diffusion model\n",
+++++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
+++++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
+++++++-    "    model = PolicyModel(grid_size)\n",
+++++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
++++++++    "    diffusion_model = PolicyModel(grid_size)\n",
++++++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
++++++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
+++++++     "\n",
+++++++     "    # Reward function\n",
+++++++     "    def compute_reward(waypoints, goal):\n",
+++++++@@ -318,11 +373,12 @@
+++++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
+++++++     "        return reward\n",
+++++++     "\n",
+++++++-    "    model.train()\n",
++++++++    "    diffusion_model.train()\n",
+++++++     "    for epoch in range(num_epochs):\n",
+++++++     "        total_loss = 0.0\n",
+++++++     "        for batch in dataloader:\n",
+++++++     "            grid, start, goal, waypoints = batch\n",
++++++++    "            conditions = {'observations': grid}\n",
+++++++     "\n",
+++++++     "            # Use the grid as input and predict the next waypoint after start\n",
+++++++     "            optimizer.zero_grad()\n",
+++++++@@ -330,7 +386,7 @@
+++++++     "            current_position = start\n",
+++++++     "            for _ in range(waypoints.size(1)):\n",
+++++++     "                input_grid = grid\n",
+++++++-    "                predicted_waypoint = model(input_grid)\n",
++++++++    "                predicted_waypoint, _ = model(conditions)\n",
+++++++     "                predicted_waypoints.append(predicted_waypoint)\n",
+++++++     "                current_position = predicted_waypoint\n",
+++++++     "\n",
++++++\ No newline at end of file
++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
++++++index 5618eda..8254f3d 100644
++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
++++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl
++++++index 75127f1..27512cf 100644
++++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl and b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl differ
+++++ diff --git a/scripts/train.py b/scripts/train.py
+++++-index 502837e..f9646f7 100644
++++++index f9646f7..d3ed429 100644
+++++ --- a/scripts/train.py
+++++ +++ b/scripts/train.py
+++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
+++++- 
+++++- class Parser(utils.Parser):
+++++-     dataset: str = 'hopper-medium-expert-v2'
+++++--    config: str = 'config.locomotion'
+++++-+    #config: str = 'config.locomotion'
+++++-+    config: str = 'config.maze2d'
+++++- 
+++++- args = Parser().parse_args('diffusion')
+++++- 
+++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
++++++@@ -87,7 +87,6 @@ trainer_config = utils.Config(
+++++      results_folder=args.savepath,
+++++      bucket=args.bucket,
+++++      n_reference=args.n_reference,
+++++-+    n_samples=args.n_samples,
+++++-+
++++++-    n_samples=args.n_samples,
++++++ 
+++++  )
+++++  
+++++- #-----------------------------------------------------------------------------#
+++++\ No newline at end of file
++++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
++++++index f4bf52b..c1f0340 100644
++++++--- a/scripts/training.ipynb
+++++++++ b/scripts/training.ipynb
++++++@@ -2,20 +2,20 @@
++++++  "cells": [
++++++   {
++++++    "cell_type": "code",
++++++-   "execution_count": 2,
+++++++   "execution_count": 1,
++++++    "metadata": {},
++++++    "outputs": [
++++++     {
++++++      "name": "stdout",
++++++      "output_type": "stream",
++++++      "text": [
++++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
++++++-      "Loaded dataset with 894 samples.\n"
+++++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
+++++++      "Loaded dataset with 901 samples.\n"
++++++      ]
++++++     },
++++++     {
++++++      "data": {
++++++-      "image/png": "",
+++++++      "image/png": "",
++++++       "text/plain": [
++++++        "<Figure size 2000x500 with 10 Axes>"
++++++       ]
++++++@@ -184,18 +184,45 @@
++++++   },
++++++   {
++++++    "cell_type": "code",
++++++-   "execution_count": 13,
+++++++   "execution_count": 3,
++++++    "metadata": {},
++++++    "outputs": [
++++++     {
++++++-     "ename": "ModuleNotFoundError",
++++++-     "evalue": "No module named 'diffuser'",
+++++++     "name": "stdout",
+++++++     "output_type": "stream",
+++++++     "text": [
+++++++      "Loaded dataset with 901 samples.\n"
+++++++     ]
+++++++    },
+++++++    {
+++++++     "name": "stderr",
+++++++     "output_type": "stream",
+++++++     "text": [
+++++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
+++++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
+++++++     ]
+++++++    },
+++++++    {
+++++++     "ename": "EinopsError",
+++++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++++      "output_type": "error",
++++++      "traceback": [
++++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
++++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
++++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
+++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
+++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
+++++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++++      "\nDuring handling of the above exception, another exception occurred:\n",
+++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
+++++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
+++++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
+++++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
+++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
+++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
+++++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
++++++      ]
++++++     }
++++++    ],
++++++@@ -212,7 +239,6 @@
++++++     "import einops\n",
++++++     "from collections import namedtuple\n",
++++++     "\n",
++++++-    "\n",
++++++     "# Define custom namedtuple for storing trajectories\n",
++++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
++++++     "\n",
++++++@@ -258,6 +284,34 @@
++++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
++++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
++++++     "\n",
+++++++    "# Define the PolicyModel class\n",
+++++++    "class PolicyModel(nn.Module):\n",
+++++++    "    def __init__(self, grid_size):\n",
+++++++    "        super(PolicyModel, self).__init__()\n",
+++++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
+++++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
+++++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
+++++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
+++++++    "\n",
+++++++    "    def forward(self, x):\n",
+++++++    "        x = torch.relu(self.conv1(x))\n",
+++++++    "        x = torch.relu(self.conv2(x))\n",
+++++++    "        x = x.view(x.size(0), -1)\n",
+++++++    "        x = torch.relu(self.fc1(x))\n",
+++++++    "        x = self.fc2(x)\n",
+++++++    "        return x\n",
+++++++    "\n",
+++++++    "# Define a dummy normalizer class for simplicity\n",
+++++++    "class DummyNormalizer:\n",
+++++++    "    def __init__(self):\n",
+++++++    "        self.action_dim = 2\n",
+++++++    "\n",
+++++++    "    def normalize(self, data, key):\n",
+++++++    "        return data\n",
+++++++    "\n",
+++++++    "    def unnormalize(self, data, key):\n",
+++++++    "        return data\n",
+++++++    "\n",
++++++     "# Define the Policy class\n",
++++++     "class Policy:\n",
++++++     "    def __init__(self, diffusion_model, normalizer):\n",
++++++@@ -267,17 +321,17 @@
++++++     "\n",
++++++     "    @property\n",
++++++     "    def device(self):\n",
++++++-    "        parameters = list(self.diffusion_model.parameters())\n",
++++++-    "        return parameters[0].device\n",
+++++++    "        return next(self.diffusion_model.parameters()).device\n",
++++++     "\n",
++++++     "    def _format_conditions(self, conditions, batch_size):\n",
++++++-    "        conditions = utils.apply_dict(\n",
+++++++    "        conditions = apply_dict(\n",
++++++     "            self.normalizer.normalize,\n",
++++++     "            conditions,\n",
++++++     "            'observations',\n",
++++++     "        )\n",
++++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
++++++-    "        conditions = utils.apply_dict(\n",
+++++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
+++++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
+++++++    "        conditions = apply_dict(\n",
++++++     "            einops.repeat,\n",
++++++     "            conditions,\n",
++++++     "            'd -> repeat d', repeat=batch_size,\n",
++++++@@ -289,7 +343,7 @@
++++++     "\n",
++++++     "        # Run reverse diffusion process\n",
++++++     "        sample = self.diffusion_model(conditions)\n",
++++++-    "        sample = utils.to_np(sample)\n",
+++++++    "        sample = to_np(sample)\n",
++++++     "\n",
++++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
++++++     "        actions = sample[:, :, :self.action_dim]\n",
++++++@@ -308,8 +362,9 @@
++++++     "# Training the policy-guided diffusion model\n",
++++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
++++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
++++++-    "    model = PolicyModel(grid_size)\n",
++++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
+++++++    "    diffusion_model = PolicyModel(grid_size)\n",
+++++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
+++++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
++++++     "\n",
++++++     "    # Reward function\n",
++++++     "    def compute_reward(waypoints, goal):\n",
++++++@@ -318,11 +373,12 @@
++++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
++++++     "        return reward\n",
++++++     "\n",
++++++-    "    model.train()\n",
+++++++    "    diffusion_model.train()\n",
++++++     "    for epoch in range(num_epochs):\n",
++++++     "        total_loss = 0.0\n",
++++++     "        for batch in dataloader:\n",
++++++     "            grid, start, goal, waypoints = batch\n",
+++++++    "            conditions = {'observations': grid}\n",
++++++     "\n",
++++++     "            # Use the grid as input and predict the next waypoint after start\n",
++++++     "            optimizer.zero_grad()\n",
++++++@@ -330,7 +386,7 @@
++++++     "            current_position = start\n",
++++++     "            for _ in range(waypoints.size(1)):\n",
++++++     "                input_grid = grid\n",
++++++-    "                predicted_waypoint = model(input_grid)\n",
+++++++    "                predicted_waypoint, _ = model(conditions)\n",
++++++     "                predicted_waypoints.append(predicted_waypoint)\n",
++++++     "                current_position = predicted_waypoint\n",
++++++     "\n",
+++++\ No newline at end of file
+++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
+++++index 5618eda..80cae2a 100644
+++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
+++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl
+++++index 75127f1..27512cf 100644
+++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl and b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl differ
++++ diff --git a/scripts/train.py b/scripts/train.py
++++-index 502837e..f9646f7 100644
+++++index f9646f7..d3ed429 100644
++++ --- a/scripts/train.py
++++ +++ b/scripts/train.py
++++-@@ -7,7 +7,8 @@ import diffuser.utils as utils
++++- 
++++- class Parser(utils.Parser):
++++-     dataset: str = 'hopper-medium-expert-v2'
++++--    config: str = 'config.locomotion'
++++-+    #config: str = 'config.locomotion'
++++-+    config: str = 'config.maze2d'
++++- 
++++- args = Parser().parse_args('diffusion')
++++- 
++++-@@ -86,6 +87,8 @@ trainer_config = utils.Config(
+++++@@ -87,7 +87,6 @@ trainer_config = utils.Config(
++++      results_folder=args.savepath,
++++      bucket=args.bucket,
++++      n_reference=args.n_reference,
++++-+    n_samples=args.n_samples,
++++-+
+++++-    n_samples=args.n_samples,
+++++ 
++++  )
++++  
++++- #-----------------------------------------------------------------------------#
++++\ No newline at end of file
+++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
+++++index f4bf52b..c1f0340 100644
+++++--- a/scripts/training.ipynb
++++++++ b/scripts/training.ipynb
+++++@@ -2,20 +2,20 @@
+++++  "cells": [
+++++   {
+++++    "cell_type": "code",
+++++-   "execution_count": 2,
++++++   "execution_count": 1,
+++++    "metadata": {},
+++++    "outputs": [
+++++     {
+++++      "name": "stdout",
+++++      "output_type": "stream",
+++++      "text": [
+++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
+++++-      "Loaded dataset with 894 samples.\n"
++++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
++++++      "Loaded dataset with 901 samples.\n"
+++++      ]
+++++     },
+++++     {
+++++      "data": {
+++++-      "image/png": "iVBORw0KGgoAAAANSUhEUgAAB8UAAADfCAYAAABvTgKOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3dfZRcdZ0n/nelAhKSdEMIStKVh9Ek0I66jIuugh06PxmeNCfYZj27uBIhLnEWMJlxRsR1Bh8YdTjLMTmMMMmKkEH0wMTWOTKAs7smEBUfkMXVAcZEDCSdrIqs6cDIaLrv748i6ZTdeaTTVV39ep3Tp7tu3Vv16Vv1ud/v/X7qfqtUFEURAAAAAAAAAGhC4+odAAAAAAAAAAAcLYriAAAAAAAAADQtRXEAAAAAAAAAmpaiOAAAAAAAAABNS1EcAAAAAAAAgKalKA4AAAAAAABA01IUBwAAAAAAAKBpKYoDAAAAAAAA0LQUxQEAAAAAAABoWori+/jOd76Tt73tbZk5c2Ze8pKX5GUve1ne+MY35v3vf3+9Qzuod7/73Zk9e/awPd6uXbvygQ98IOeee25OPvnklEqlfOQjHxm2x2f0kBcDvv71r+eyyy7LaaedlokTJ6atrS2LFi3K97///WF7DkYPuTHgkUceyVve8pbMnDkzEyZMyJQpU/LGN74xn//854ftORgd5MX+ffazn02pVMqkSZOO2nPQuOTGgA0bNqRUKg358+1vf3vYnofGJy8G+8Y3vpELL7wwJ554YiZMmJC5c+fm4x//+LA/D41NbtQ+3v7aDO3G2CIvav3v//2/c9FFF2X69Ok5/vjjc9ppp+VjH/tY/uVf/mVYn4fGJzdqffe73815552XyZMnZ9KkSVmwYEG++c1vDutz0FjkwIDDrek9/PDDOeecczJp0qSccMIJ6erqyhNPPDFs8TQqRfEX/MM//EPOPPPM9Pb25vrrr88//uM/ZtWqVTnrrLNy55131ju8EffLX/4ya9asyb/+67/moosuqnc41Im8qHXzzTdny5YtWb58ee65556sWrUqP//5z/OGN7whX//61+sdHiNIbtT61a9+lRkzZuQTn/hE7rnnnvzt3/5tZs+enXe961257rrr6h0eI0Re7F9PT0/+9E//NNOnT693KNSB3BjaJz7xiTz44IM1P6961avqHRYjRF4M9oUvfCFnn312Wltb87d/+7e55557cvXVV6coinqHxgiSG7X+/M//fFBb8eCDD2bq1Klpa2vL6173unqHyAiQF7UeffTRnHnmmdmyZUtWrlyZu+++O//hP/yHfOxjH8t//I//sd7hMYLkRq3vfe97mT9/fn7961/n9ttvz+23357nn38+b37zm/Pggw/WOzyOAjlQ63Bqeo8//ng6Ozvzm9/8JnfddVc+97nP5cc//nE6Ojryi1/8YoQiro9S4QwrSXL22Wenp6cnjz/+eMaPH19zX39/f8aNa+zPD7z73e/Ohg0bsmXLlmF5vD1vi1KplKeffjonn3xyrr32WleLjzHyotbPf/7zvPSlL61Z9uyzz2bOnDl51atelf/5P//nsDwPjU9uHJo3vOEN2b59e5566qmj+jw0BnmxfwsXLkypVMqUKVOybt26PPvss8P+HDQuuVFrw4YNWbBgQf7u7/4uixcvHpbHZPSRF7V6enpy6qmn5pJLLslNN900LI/J6CQ3Du7+++9PZ2dnPvzhD5tJYYyQF7U+/OEP5y//8i+zefPmvOIVr9i7fNmyZVmzZk2eeeaZnHjiicPyXDQ2uVHr/PPPzyOPPJInnngixx9/fJLqlbMvf/nLM2/ePFeMNyE5UOtwanrveMc7sn79+vzkJz9JS0tLkuTJJ5/M3Llz88d//Mf5q7/6q2GJqRE19rtiBP3yl7/M1KlTByVPkkHJc+edd+bcc8/NtGnTMmHChLS3t+eDH/xgnnvuuZr13v3ud2fSpEl5/PHHc95552XixImZNm1aPvWpTyVJvv3tb+dNb3pTJk6cmHnz5mXt2rU12992220plUr5H//jf+TSSy/NlClTMnHixCxcuPCQpjEoiiI33XRTTj/99EyYMCEnnnhiFi9efEjb7pmKirFNXtT63YJ4kkyaNCmvfOUrs3Xr1oNuT/OQG4dmf/uI5iQvhvb5z38+999/vyLHGCY3YDB5Ueuzn/1snnvuuVx99dUHXZfmJjcO7pZbbkmpVMpll112RNsz+siLWsccc0ySpLW1tWb5CSeckHHjxuXYY4896GPQHORGrW9+85vp7OzcWxBPksmTJ2f+/Pn51re+lR07dhz0MRhd5ECtQ63p7d69O3fffXfe/va37y2IJ8msWbOyYMGCfPnLXz7oY4xmiuIveOMb35jvfOc7ed/73pfvfOc7+e1vf7vfdTdt2pQLL7wwt9xyS+67776sWLEid911VxYuXDho3d/+9rfp6urKW97ylvz93/99LrjgglxzzTX50Ic+lCVLluSyyy7Ll7/85Zx66ql597vfPeR3Ey9dujTjxo3LF77whaxcuTLf/e5309nZmV/96lcH/J+WLVuWFStW5JxzzslXvvKV3HTTTfmnf/qnnHnmmfnZz352+DuJMUdeHNzOnTvz8MMP5/d///cPe1tGL7kxtP7+/uzevTu/+MUvctNNN+VrX/uawd0xRF4M9vOf/zwrVqzIpz71qVQqlYOuT3OSG0O74oorMn78+LS0tOS8887LN77xjUPajuYgL2o98MADmTJlSh5//PGcfvrpGT9+fF760pfmve99b3p7ew+4Lc1FbhzYzp07s27durz5zW/O7/3e7x3Wtoxe8qLWkiVLcsIJJ+SP/uiP8sQTT2TXrl25++67s3r16lxxxRWZOHHiAbeneciNWr/5zW/ykpe8ZNDyPct++MMfHnB7Rh85cGR+8pOf5Ne//nVe85rXDLrvNa95TTZv3pznn39+WJ6rIRUURVEUTz/9dPGmN72pSFIkKY455pjizDPPLD75yU8Wu3bt2u92/f39xW9/+9vi/vvvL5IUP/jBD/bet2TJkiJJ8aUvfWnvst/+9rfFySefXCQpHn744b3Lf/nLXxblcrn4kz/5k73Lbr311iJJ8ba3va3mOb/5zW8WSYrrrruu5rlmzZq19/aDDz5YJCluuOGGmm23bt1aTJgwofjABz5wyPvmF7/4RZGkuPbaaw95G5qDvDi4d77zncX48eOLhx566LC3ZfSSG0NbtmzZ3n1y7LHHFjfddNMhbUdzkBeDvf3tby/OPPPMor+/f+9zTJw48aDb0VzkRq2HH364WL58efHlL3+5eOCBB4rPfe5zRXt7e1Eul4v77rvvgNvSPORFrVNPPbU47rjjismTJxef+MQnivXr1xfXX399MWHChOKss87a247Q/OTGgd18881FkuKLX/ziYW3H6CYvBnvssceK0047be8+SVK8733v016MMXKj1umnn17Mmzev6Ovrq4n95S9/eZGk+MIXvnDA7Rl95MD+HaimtyeWofpTn/jEJ4okxfbt2w/5uUYbV4q/4KSTTsrGjRvzve99L5/61KeyaNGi/PjHP84111yTV7/61Xn66af3rvvEE0/k4osvzimnnJJyuZxjjjkmZ599dpLkscceq3ncUqmUCy+8cO/t8ePHZ86cOZk2bVr+4A/+YO/yKVOm5KUvfWmefPLJQbG9853vrLl95plnZtasWVm/fv1+/5+77747pVIp/+k//afs3r17788pp5ySf/Nv/k02bNhwWPuHsUleHNif//mf54477sinP/3p/Nt/+28Pa1tGN7kxtA996EP53ve+l3/4h3/IZZddliuvvDL/7b/9t0PaltFPXtT60pe+lK9+9av57//9v/tKmjFObtT6gz/4g6xcuTIXXXRROjo6cumll+Zb3/pWpk2blg984AMH3JbmIS9q9ff35/nnn8+HPvShXHPNNens7Myf/dmf5ZOf/GS++c1v5n/9r/91wO1pHnLjwG655ZacdNJJedvb3nZY2zG6yYtaW7ZsycKFC3PSSSdl3bp1uf/++3P99dfntttuy3ve854DbktzkRu1rrrqqvz4xz/OlVdemZ6enmzdujXvfe9798bX6N8vzeGTAy/Ogcaqmnkcyxd9/o4zzjgjZ5xxRpLqNAlXX311Pv3pT+f666/P9ddfn2effTYdHR057rjjct1112XevHk5/vjjs3Xr1nR1deXXv/51zeMdf/zxOe6442qWHXvssZkyZcqg5z722GOHnJbglFNOGXLZL3/5y/3+Hz/72c9SFEVe9rKXDXn/y1/+8v1uC79LXgz20Y9+NNddd13+8i//MldeeeUhb0dzkRu1Zs6cmZkzZybJ3s7jNddckyVLluTkk08+pMdg9JMXybPPPpsrrrgiV111VaZPn753eqzf/OY3SZJf/epXOeaYY0xtOMbIjf074YQT8ta3vjV/8zd/k1//+teZMGHCYT8Go5O8qDrppJOyadOmnHfeeTXLL7jggqxYsSIPP/xwzjnnnAM+Bs1Fbgz2f/7P/8lDDz2U5cuXDzk9Ls1PXlR98IMfTG9vbx555JG95xPz58/P1KlTc9lll+WSSy7ZW+hhbJAbVZdddll+8Ytf5LrrrsvNN9+cpDq99p/+6Z/mr/7qr9LW1nbA7Rm95MDhOemkk5JkyFieeeaZlEqlnHDCCcPyXI1IUfwAjjnmmFx77bX59Kc/nR/96EdJkq9//evZvn17NmzYUNPBONh3AbwY//f//t8hl82ZM2e/20ydOjWlUikbN2484HdpwOGSF9WC+Ec+8pF85CMfyYc+9KFDD5qmJjcGe/3rX5+/+Zu/yRNPPKEoPkaN1bx4+umn87Of/Sw33HBDbrjhhkH3n3jiiVm0aFG+8pWvHOJ/QLMZq7lxIEVRJGnuT6RzYGM5L17zmtfk29/+9qDle/LClU1j21jOjX3dcsstSeJKWJKM7bx45JFH8spXvnLQB2xf97rXJUl+9KMfKYqPYWM5N5Lk6quvzooVK7Jp06ZMnjw5s2bNyrJlyzJx4kSzfI4RYz0HDsUrXvGKTJgwIT/84Q8H3ffDH/4wc+bMGfShgGbizOoFO3bsGHL5nqkTpk+fnmRgkOZ334CrV68+arHdcccdNbe/9a1v5cknn0xnZ+d+t3nrW9+aoijS09Oz95My+/68+tWvPmrx0jzkxWAf//jH85GPfCQf/vCHc+21177Yf4NRSm4cmvXr12fcuHFmJxkj5MWAU045JevXrx/0c9555+W4447L+vXrc9111w3Xv0eDkxsH9//+3//L3XffndNPP72pT74ZIC9qvf3tb0+S3HvvvTXL77nnniTJG97whiP4TxiN5MbQ/vVf/zWf//zn8/rXvz6vetWrXsy/wSgkL2pNnz49//RP/5Rnn322ZvmDDz6YJKlUKkf2zzDqyI2hveQlL8mrXvWqzJo1K0899VTuvPPO/Of//J/NRtWE5MCRGT9+fBYuXJju7u7s2rVr7/Knnnoq69evT1dX17A8T6NypfgLzjvvvFQqlSxcuDCnnXZa+vv788gjj+SGG27IpEmTsnz58iTVuf9PPPHEvPe97821116bY445JnfccUd+8IMfHLXYHnroobznPe/Jv//3/z5bt27Nf/2v/zVtbW35L//lv+x3m7POOiuXX355Lr300jz00EOZP39+Jk6cmB07duQb3/hGXv3qV+eP/uiPDvi89957b5577rm9ifHoo49m3bp1SarT4h5//PHD90/SkORFrRtuuCF/8Rd/kfPPPz9vectbBl3NYbBq7JAbtS6//PK0tLTk9a9/fV72spfl6aefzt/93d/lzjvvzJ/92Z+5SnyMkBcDjjvuuCFPdG677baUy+UDngTRfORGrYsvvjgzZ87MGWeckalTp2bTpk254YYb8rOf/Sy33XbbUfgvaUTyota5556bhQsX5mMf+1j6+/vzhje8IQ899FA++tGP5q1vfWve9KY3HY1/lQYkN4b2la98Jc8884yrxMcoeVFrxYoVueiii/KHf/iH+eM//uNMnTo13/72t/PJT34yr3zlK3PBBRccjX+VBiQ3av3oRz/Kl770pZxxxhl5yUtekh/84Af51Kc+lblz5+bjH//40fg3qTM5MNih1vQ++tGP5nWve13e+ta35oMf/GCef/75/MVf/EWmTp2a97///cO0FxpUQVEURXHnnXcWF198cTF37txi0qRJxTHHHFPMnDmzeNe73lU8+uijNet+61vfKt74xjcWxx9/fHHyyScX73nPe4qHH364SFLceuute9dbsmRJMXHixEHPdfbZZxe///u/P2j5rFmzire85S17b996661FkuIf//Efi3e9613FCSecUEyYMKG48MILi02bNtVsu2TJkmLWrFmDHvNzn/tc8e/+3b8rJk6cWEyYMKF4xSteUVxyySXFQw89dNB9MmvWrCLJkD8//elPD7o9o5+8GBzj/nLC4XRskRuDt+vo6CimTp1ajB8/vjjhhBOKs88+u7j99tsPuB3NRV4c3P7+H5qb3Kj1yU9+sjj99NOL1tbWolwuFyeffHLxtre9rfjud797wO1oLvJisH/5l38prr766mLGjBnF+PHji5kzZxbXXHNN8fzzzx90W5qH3BjaH/7hHxYTJ04sent7D2l9mou8GOzrX/96ce655xannHJKMWHChGLevHnF+9///uLpp58+6LY0D7lR65//+Z+L+fPnF1OmTCmOPfbYYs6cOcWHP/zh4tlnnz3gdoxecmCww6npPfTQQ8Wb3/zm4vjjjy9aWlqKiy66qNi8efNBn2O0KxXFC19SRcO57bbbcumll+Z73/tezjjjjHqHAw1BXsDQ5AYMJi9gaHIDBpMXMDS5AYPJCxia3GCskwONz3eKAwAAAAAAANC0FMUBAAAAAAAAaFqmTwcAAAAAAACgablSHAAAAAAAAICmpSgOAAAAAAAAQNNSFAcAAAAAAACgaY0/0g37+/uzffv2TJ48OaVSaThjghFTFEV27dqV6dOnZ9y4F/8ZEXlBs5AbMJi8gKHJDRhMXsDQ5AYMJi9gaHIDBpMXMLRDzY0jLopv3749M2bMONLNoaFs3bo1lUrlRT+OvKDZyA0YTF7A0OQGDCYvYGhyAwaTFzA0uQGDyQsY2sFy44iL4pMnTz7STamDnTt3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",
++++++      "image/png": "",
+++++       "text/plain": [
+++++        "<Figure size 2000x500 with 10 Axes>"
+++++       ]
+++++@@ -184,18 +184,45 @@
+++++   },
+++++   {
+++++    "cell_type": "code",
+++++-   "execution_count": 13,
++++++   "execution_count": 3,
+++++    "metadata": {},
+++++    "outputs": [
+++++     {
+++++-     "ename": "ModuleNotFoundError",
+++++-     "evalue": "No module named 'diffuser'",
++++++     "name": "stdout",
++++++     "output_type": "stream",
++++++     "text": [
++++++      "Loaded dataset with 901 samples.\n"
++++++     ]
++++++    },
++++++    {
++++++     "name": "stderr",
++++++     "output_type": "stream",
++++++     "text": [
++++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
++++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
++++++     ]
++++++    },
++++++    {
++++++     "ename": "EinopsError",
++++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++      "output_type": "error",
+++++      "traceback": [
+++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
+++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
++++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++++      "\nDuring handling of the above exception, another exception occurred:\n",
++++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
++++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
++++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
++++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
++++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
++++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
+++++      ]
+++++     }
+++++    ],
+++++@@ -212,7 +239,6 @@
+++++     "import einops\n",
+++++     "from collections import namedtuple\n",
+++++     "\n",
+++++-    "\n",
+++++     "# Define custom namedtuple for storing trajectories\n",
+++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
+++++     "\n",
+++++@@ -258,6 +284,34 @@
+++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
+++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
+++++     "\n",
++++++    "# Define the PolicyModel class\n",
++++++    "class PolicyModel(nn.Module):\n",
++++++    "    def __init__(self, grid_size):\n",
++++++    "        super(PolicyModel, self).__init__()\n",
++++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
++++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
++++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
++++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
++++++    "\n",
++++++    "    def forward(self, x):\n",
++++++    "        x = torch.relu(self.conv1(x))\n",
++++++    "        x = torch.relu(self.conv2(x))\n",
++++++    "        x = x.view(x.size(0), -1)\n",
++++++    "        x = torch.relu(self.fc1(x))\n",
++++++    "        x = self.fc2(x)\n",
++++++    "        return x\n",
++++++    "\n",
++++++    "# Define a dummy normalizer class for simplicity\n",
++++++    "class DummyNormalizer:\n",
++++++    "    def __init__(self):\n",
++++++    "        self.action_dim = 2\n",
++++++    "\n",
++++++    "    def normalize(self, data, key):\n",
++++++    "        return data\n",
++++++    "\n",
++++++    "    def unnormalize(self, data, key):\n",
++++++    "        return data\n",
++++++    "\n",
+++++     "# Define the Policy class\n",
+++++     "class Policy:\n",
+++++     "    def __init__(self, diffusion_model, normalizer):\n",
+++++@@ -267,17 +321,17 @@
+++++     "\n",
+++++     "    @property\n",
+++++     "    def device(self):\n",
+++++-    "        parameters = list(self.diffusion_model.parameters())\n",
+++++-    "        return parameters[0].device\n",
++++++    "        return next(self.diffusion_model.parameters()).device\n",
+++++     "\n",
+++++     "    def _format_conditions(self, conditions, batch_size):\n",
+++++-    "        conditions = utils.apply_dict(\n",
++++++    "        conditions = apply_dict(\n",
+++++     "            self.normalizer.normalize,\n",
+++++     "            conditions,\n",
+++++     "            'observations',\n",
+++++     "        )\n",
+++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
+++++-    "        conditions = utils.apply_dict(\n",
++++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
++++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
++++++    "        conditions = apply_dict(\n",
+++++     "            einops.repeat,\n",
+++++     "            conditions,\n",
+++++     "            'd -> repeat d', repeat=batch_size,\n",
+++++@@ -289,7 +343,7 @@
+++++     "\n",
+++++     "        # Run reverse diffusion process\n",
+++++     "        sample = self.diffusion_model(conditions)\n",
+++++-    "        sample = utils.to_np(sample)\n",
++++++    "        sample = to_np(sample)\n",
+++++     "\n",
+++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
+++++     "        actions = sample[:, :, :self.action_dim]\n",
+++++@@ -308,8 +362,9 @@
+++++     "# Training the policy-guided diffusion model\n",
+++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
+++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
+++++-    "    model = PolicyModel(grid_size)\n",
+++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
++++++    "    diffusion_model = PolicyModel(grid_size)\n",
++++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
++++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
+++++     "\n",
+++++     "    # Reward function\n",
+++++     "    def compute_reward(waypoints, goal):\n",
+++++@@ -318,11 +373,12 @@
+++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
+++++     "        return reward\n",
+++++     "\n",
+++++-    "    model.train()\n",
++++++    "    diffusion_model.train()\n",
+++++     "    for epoch in range(num_epochs):\n",
+++++     "        total_loss = 0.0\n",
+++++     "        for batch in dataloader:\n",
+++++     "            grid, start, goal, waypoints = batch\n",
++++++    "            conditions = {'observations': grid}\n",
+++++     "\n",
+++++     "            # Use the grid as input and predict the next waypoint after start\n",
+++++     "            optimizer.zero_grad()\n",
+++++@@ -330,7 +386,7 @@
+++++     "            current_position = start\n",
+++++     "            for _ in range(waypoints.size(1)):\n",
+++++     "                input_grid = grid\n",
+++++-    "                predicted_waypoint = model(input_grid)\n",
++++++    "                predicted_waypoint, _ = model(conditions)\n",
+++++     "                predicted_waypoints.append(predicted_waypoint)\n",
+++++     "                current_position = predicted_waypoint\n",
+++++     "\n",
++++\ No newline at end of file
++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
++++index 5618eda..7c5bfac 100644
++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
++++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl
++++index 75127f1..27512cf 100644
++++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl and b/logs/maze2d-large-v1/diffusion/H384_T256/trainer_config.pkl differ
++++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
++++index f4bf52b..c1f0340 100644
++++--- a/scripts/training.ipynb
+++++++ b/scripts/training.ipynb
++++@@ -2,20 +2,20 @@
++++  "cells": [
++++   {
++++    "cell_type": "code",
++++-   "execution_count": 2,
+++++   "execution_count": 1,
++++    "metadata": {},
++++    "outputs": [
++++     {
++++      "name": "stdout",
++++      "output_type": "stream",
++++      "text": [
++++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
++++-      "Loaded dataset with 894 samples.\n"
+++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
+++++      "Loaded dataset with 901 samples.\n"
++++      ]
++++     },
++++     {
++++      "data": {
++++-      "image/png": "",
+++++      "image/png": "",
++++       "text/plain": [
++++        "<Figure size 2000x500 with 10 Axes>"
++++       ]
++++@@ -184,18 +184,45 @@
++++   },
++++   {
++++    "cell_type": "code",
++++-   "execution_count": 13,
+++++   "execution_count": 3,
++++    "metadata": {},
++++    "outputs": [
++++     {
++++-     "ename": "ModuleNotFoundError",
++++-     "evalue": "No module named 'diffuser'",
+++++     "name": "stdout",
+++++     "output_type": "stream",
+++++     "text": [
+++++      "Loaded dataset with 901 samples.\n"
+++++     ]
+++++    },
+++++    {
+++++     "name": "stderr",
+++++     "output_type": "stream",
+++++     "text": [
+++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
+++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
+++++     ]
+++++    },
+++++    {
+++++     "ename": "EinopsError",
+++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++      "output_type": "error",
++++      "traceback": [
++++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
++++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
++++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
+++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
+++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
+++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++++      "\nDuring handling of the above exception, another exception occurred:\n",
+++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
+++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
+++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
+++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
+++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
+++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
+++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
++++      ]
++++     }
++++    ],
++++@@ -212,7 +239,6 @@
++++     "import einops\n",
++++     "from collections import namedtuple\n",
++++     "\n",
++++-    "\n",
++++     "# Define custom namedtuple for storing trajectories\n",
++++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
++++     "\n",
++++@@ -258,6 +284,34 @@
++++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
++++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
++++     "\n",
+++++    "# Define the PolicyModel class\n",
+++++    "class PolicyModel(nn.Module):\n",
+++++    "    def __init__(self, grid_size):\n",
+++++    "        super(PolicyModel, self).__init__()\n",
+++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
+++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
+++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
+++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
+++++    "\n",
+++++    "    def forward(self, x):\n",
+++++    "        x = torch.relu(self.conv1(x))\n",
+++++    "        x = torch.relu(self.conv2(x))\n",
+++++    "        x = x.view(x.size(0), -1)\n",
+++++    "        x = torch.relu(self.fc1(x))\n",
+++++    "        x = self.fc2(x)\n",
+++++    "        return x\n",
+++++    "\n",
+++++    "# Define a dummy normalizer class for simplicity\n",
+++++    "class DummyNormalizer:\n",
+++++    "    def __init__(self):\n",
+++++    "        self.action_dim = 2\n",
+++++    "\n",
+++++    "    def normalize(self, data, key):\n",
+++++    "        return data\n",
+++++    "\n",
+++++    "    def unnormalize(self, data, key):\n",
+++++    "        return data\n",
+++++    "\n",
++++     "# Define the Policy class\n",
++++     "class Policy:\n",
++++     "    def __init__(self, diffusion_model, normalizer):\n",
++++@@ -267,17 +321,17 @@
++++     "\n",
++++     "    @property\n",
++++     "    def device(self):\n",
++++-    "        parameters = list(self.diffusion_model.parameters())\n",
++++-    "        return parameters[0].device\n",
+++++    "        return next(self.diffusion_model.parameters()).device\n",
++++     "\n",
++++     "    def _format_conditions(self, conditions, batch_size):\n",
++++-    "        conditions = utils.apply_dict(\n",
+++++    "        conditions = apply_dict(\n",
++++     "            self.normalizer.normalize,\n",
++++     "            conditions,\n",
++++     "            'observations',\n",
++++     "        )\n",
++++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
++++-    "        conditions = utils.apply_dict(\n",
+++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
+++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
+++++    "        conditions = apply_dict(\n",
++++     "            einops.repeat,\n",
++++     "            conditions,\n",
++++     "            'd -> repeat d', repeat=batch_size,\n",
++++@@ -289,7 +343,7 @@
++++     "\n",
++++     "        # Run reverse diffusion process\n",
++++     "        sample = self.diffusion_model(conditions)\n",
++++-    "        sample = utils.to_np(sample)\n",
+++++    "        sample = to_np(sample)\n",
++++     "\n",
++++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
++++     "        actions = sample[:, :, :self.action_dim]\n",
++++@@ -308,8 +362,9 @@
++++     "# Training the policy-guided diffusion model\n",
++++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
++++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
++++-    "    model = PolicyModel(grid_size)\n",
++++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
+++++    "    diffusion_model = PolicyModel(grid_size)\n",
+++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
+++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
++++     "\n",
++++     "    # Reward function\n",
++++     "    def compute_reward(waypoints, goal):\n",
++++@@ -318,11 +373,12 @@
++++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
++++     "        return reward\n",
++++     "\n",
++++-    "    model.train()\n",
+++++    "    diffusion_model.train()\n",
++++     "    for epoch in range(num_epochs):\n",
++++     "        total_loss = 0.0\n",
++++     "        for batch in dataloader:\n",
++++     "            grid, start, goal, waypoints = batch\n",
+++++    "            conditions = {'observations': grid}\n",
++++     "\n",
++++     "            # Use the grid as input and predict the next waypoint after start\n",
++++     "            optimizer.zero_grad()\n",
++++@@ -330,7 +386,7 @@
++++     "            current_position = start\n",
++++     "            for _ in range(waypoints.size(1)):\n",
++++     "                input_grid = grid\n",
++++-    "                predicted_waypoint = model(input_grid)\n",
+++++    "                predicted_waypoint, _ = model(conditions)\n",
++++     "                predicted_waypoints.append(predicted_waypoint)\n",
++++     "                current_position = predicted_waypoint\n",
++++     "\n",
+++\ No newline at end of file
+++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
+++index 5618eda..7c5bfac 100644
+++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
+++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
+++index f4bf52b..c1f0340 100644
+++--- a/scripts/training.ipynb
++++++ b/scripts/training.ipynb
+++@@ -2,20 +2,20 @@
+++  "cells": [
+++   {
+++    "cell_type": "code",
+++-   "execution_count": 2,
++++   "execution_count": 1,
+++    "metadata": {},
+++    "outputs": [
+++     {
+++      "name": "stdout",
+++      "output_type": "stream",
+++      "text": [
+++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
+++-      "Loaded dataset with 894 samples.\n"
++++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
++++      "Loaded dataset with 901 samples.\n"
+++      ]
+++     },
+++     {
+++      "data": {
+++-      "image/png": "",
++++      "image/png": "iVBORw0KGgoAAAANSUhEUgAAB8UAAADfCAYAAABvTgKOAAAABHNCSVQICAgIfAhkiAAAAAlwSFlzAAAPYQAAD2EBqD+naQAAADh0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uMy4xLjIsIGh0dHA6Ly9tYXRwbG90bGliLm9yZy8li6FKAAAgAElEQVR4nO3dfZRcZZ0n8G+lAxKSdEMIStKdl9EkEEddZhZdBRs6yvCmOcE269nFlQi4xFnAZMYZAdcZfGHU4QzH5LiDA2sExpc5MLHVMwwws7smEBVfGBZXB9AETKA7WRVZ04GRUbrv/lEkoenOe6fr1u3P55w63XW7btWv6z6/ep7n/ureWyuKoggAAAAAAAAAVNCERgcAAAAAAAAAAIeLojgAAAAAAAAAlaUoDgAAAAAAAEBlKYoDAAAAAAAAUFmK4gAAAAAAAABUlqI4AAAAAAAAAJWlKA4AAAAAAABAZSmKAwAAAAAAAFBZiuIAAAAAAAAAVJai+At85zvfydve9rbMnj07L3nJS/Kyl70sb3jDG/L+97+/0aHt07vf/e7MnTt31J5vx44d+cAHPpCzzjorxx9/fGq1Wj784Q+P2vPTPOTFbl//+tdz8cUX56STTsrkyZPT3t6eJUuW5J/+6Z9G7TVoHnJjtwcffDBvectbMnv27EyaNCnTpk3LG97whnzhC18YtdegOciLPfvsZz+bWq2WKVOmHLbXoLzkxm7r169PrVYb8fbtb3971F6H8pMXw33jG9/Ieeedl2OPPTaTJk3K/Pnz87GPfWzUX4dykxtDn29PfYZ+Y3yRF0P97//9v3P++edn5syZOfroo3PSSSflox/9aP7lX/5lVF+H8pMbQ333u9/N2WefnalTp2bKlClZtGhRvvnNb47qa1AucmC3A63pPfDAAznzzDMzZcqUHHPMMenu7s5jjz02avGUlaL48/7+7/8+p556avr7+3PdddflH//xH7N69eqcdtppue222xod3pj7xS9+kZtuuin/+q//mvPPP7/R4dAg8mKoz3zmM9m8eXNWrFiRO++8M6tXr87PfvazvP71r8/Xv/71RofHGJIbQ/3yl7/MrFmz8vGPfzx33nln/vqv/zpz587Nu971rlx77bWNDo8xIi/2rK+vL3/0R3+UmTNnNjoUGkBujOzjH/947rvvviG3V73qVY0OizEiL4b70pe+lDPOOCNtbW3567/+69x555258sorUxRFo0NjDMmNof7kT/5kWF9x3333Zfr06Wlvb89rX/vaRofIGJAXQz300EM59dRTs3nz5qxatSp33HFH/sN/+A/56Ec/mv/4H/9jo8NjDMmNob73ve/l9NNPz69+9at8/vOfz+c///k8++yzefOb35z77ruv0eFxGMiBoQ6kpvfII4+kq6srv/71r3P77bfnc5/7XH784x+ns7MzP//5z8co4saoFWZYSZIzzjgjfX19eeSRRzJx4sQhfxscHMyECeX+/sC73/3urF+/Pps3bx6V59vZLGq1Wp588skcf/zxueaaaxwtPs7Ii6F+9rOf5aUvfemQZU8//XTmzZuXV73qVfmf//N/jsrrUH5yY/+8/vWvz9atW/P4448f1tehHOTFni1evDi1Wi3Tpk3L2rVr8/TTT4/6a1BecmOo9evXZ9GiRfnbv/3bLF26dFSek+YjL4bq6+vLiSeemAsvvDA33HDDqDwnzUlu7Ns999yTrq6ufOhDH3ImhXFCXgz1oQ99KH/2Z3+WTZs25RWveMWu5cuXL89NN92Up556Kscee+yovBblJjeGOuecc/Lggw/msccey9FHH52kfuTsy1/+8ixYsMAR4xUkB4Y6kJreO97xjqxbty6PPvpoWltbkyRbtmzJ/Pnz8wd/8Af58z//81GJqYzK3SrG0C9+8YtMnz59WPIkGZY8t912W84666zMmDEjkyZNysKFC3PVVVflmWeeGfK4d7/73ZkyZUoeeeSRnH322Zk8eXJmzJiRT37yk0mSb3/723njG9+YyZMnZ8GCBbn11luHrH/LLbekVqvlf/yP/5GLLroo06ZNy+TJk7N48eL9Oo1BURS54YYbcvLJJ2fSpEk59thjs3Tp0v1ad+epqBjf5MVQLy6IJ8mUKVPyyle+Mk888cQ+16c65Mb+2dN7RDXJi5F94QtfyD333KPIMY7JDRhOXgz12c9+Ns8880yuvPLKfT6WapMb+7ZmzZrUarVcfPHFB7U+zUdeDHXEEUckSdra2oYsP+aYYzJhwoQceeSR+3wOqkFuDPXNb34zXV1duwriSTJ16tScfvrp+da3vpVt27bt8zloLnJgqP2t6T333HO544478va3v31XQTxJ5syZk0WLFuUrX/nKPp+jmSmKP+8Nb3hDvvOd7+R973tfvvOd7+Q3v/nNHh+7cePGnHfeeVmzZk3uvvvurFy5MrfffnsWL1487LG/+c1v0t3dnbe85S352te+lnPPPTdXX311PvjBD2bZsmW5+OKL85WvfCUnnnhi3v3ud494beJLLrkkEyZMyJe+9KWsWrUq3/3ud9PV1ZVf/vKXe/2fli9fnpUrV+bMM8/MV7/61dxwww3553/+55x66qn56U9/euBvEuOOvNi37du354EHHshv//ZvH/C6NC+5MbLBwcE899xz+fnPf54bbrgh//AP/2Dn7jgiL4b72c9+lpUrV+aTn/xkOjo69vl4qklujOyyyy7LxIkT09ramrPPPjvf+MY39ms9qkFeDHXvvfdm2rRpeeSRR3LyySdn4sSJeelLX5r3vve96e/v3+u6VIvc2Lvt27dn7dq1efOb35zf+q3fOqB1aV7yYqhly5blmGOOye///u/nsccey44dO3LHHXfkxhtvzGWXXZbJkyfvdX2qQ24M9etf/zoveclLhi3fuewHP/jBXten+ciBg/Poo4/mV7/6VV7zmtcM+9trXvOabNq0Kc8+++yovFYpFRRFURRPPvlk8cY3vrFIUiQpjjjiiOLUU08tPvGJTxQ7duzY43qDg4PFb37zm+Kee+4pkhTf//73d/1t2bJlRZLiy1/+8q5lv/nNb4rjjz++SFI88MADu5b/4he/KFpaWoo//MM/3LXs5ptvLpIUb3vb24a85je/+c0iSXHttdcOea05c+bsun/fffcVSYrrr79+yLpPPPFEMWnSpOIDH/jAfr83P//5z4skxTXXXLPf61AN8mLf3vnOdxYTJ04s7r///gNel+YlN0a2fPnyXe/JkUceWdxwww37tR7VIC+Ge/vb316ceuqpxeDg4K7XmDx58j7Xo1rkxlAPPPBAsWLFiuIrX/lKce+99xaf+9znioULFxYtLS3F3Xffvdd1qQ55MdSJJ55YHHXUUcXUqVOLj3/848W6deuK6667rpg0aVJx2mmn7epHqD65sXef+cxniiTF3/zN3xzQejQ3eTHcww8/XJx00km73pMkxfve9z79xTgjN4Y6+eSTiwULFhQDAwNDYn/5y19eJCm+9KUv7XV9mo8c2LO91fR2xjLSeOrjH/94kaTYunXrfr9Ws3Gk+POOO+64bNiwId/73vfyyU9+MkuWLMmPf/zjXH311Xn1q1+dJ598ctdjH3vssVxwwQU54YQT0tLSkiOOOCJnnHFGkuThhx8e8ry1Wi3nnXfervsTJ07MvHnzMmPGjPzO7/zOruXTpk3LS1/60mzZsmVYbO985zuH3D/11FMzZ86crFu3bo//zx133JFarZb/9J/+U5577rldtxNOOCH/5t/8m6xfv/6A3h/GJ3mxd3/yJ3+SL37xi/nUpz6Vf/tv/+0BrUtzkxsj++AHP5jvfe97+fu///tcfPHFufzyy/MXf/EX+7UuzU9eDPXlL385f/d3f5f//t//u0vSjHNyY6jf+Z3fyapVq3L++eens7MzF110Ub71rW9lxowZ+cAHPrDXdakOeTHU4OBgnn322Xzwgx/M1Vdfna6urvzxH/9xPvGJT+Sb3/xm/tf/+l97XZ/qkBt7t2bNmhx33HF529vedkDr0dzkxVCbN2/O4sWLc9xxx2Xt2rW55557ct111+WWW27Je97znr2uS7XIjaGuuOKK/PjHP87ll1+evr6+PPHEE3nve9+7K76yX1+aAycHDs3e9lVVeT+WC32+yCmnnJJTTjklSf00CVdeeWU+9alP5brrrst1112Xp59+Op2dnTnqqKNy7bXXZsGCBTn66KPzxBNPpLu7O7/61a+GPN/RRx+do446asiyI488MtOmTRv22kceeeSIpyU44YQTRlz2i1/8Yo//x09/+tMURZGXvexlI/795S9/+R7XhReTF8N95CMfybXXXps/+7M/y+WXX77f61EtcmOo2bNnZ/bs2Umya/B49dVXZ9myZTn++OP36zlofvIiefrpp3PZZZfliiuuyMyZM3edHuvXv/51kuSXv/xljjjiCKc2HGfkxp4dc8wxeetb35q/+qu/yq9+9atMmjTpgJ+D5iQv6o477rhs3LgxZ5999pDl5557blauXJkHHnggZ5555l6fg2qRG8P9n//zf3L//fdnxYoVI54el+qTF3VXXXVV+vv78+CDD+6aT5x++umZPn16Lr744lx44YW7Cj2MD3Kj7uKLL87Pf/7zXHvttfnMZz6TpH567T/6oz/Kn//5n6e9vX2v69O85MCBOe6445JkxFieeuqp1Gq1HHPMMaPyWmWkKL4XRxxxRK655pp86lOfyg9/+MMkyde//vVs3bo169evHzLA2Ne1AA7F//2//3fEZfPmzdvjOtOnT0+tVsuGDRv2ei0NOFDyol4Q//CHP5wPf/jD+eAHP7j/QVNpcmO4173udfmrv/qrPPbYY4ri49R4zYsnn3wyP/3pT3P99dfn+uuvH/b3Y489NkuWLMlXv/rV/fwPqJrxmht7UxRFkmp/I529G8958ZrXvCbf/va3hy3fmReObBrfxnNuvNCaNWuSxJGwJBnfefHggw/mla985bAv2L72ta9Nkvzwhz9UFB/HxnNuJMmVV16ZlStXZuPGjZk6dWrmzJmT5cuXZ/Lkyc7yOU6M9xzYH694xSsyadKk/OAHPxj2tx/84AeZN2/esC8FVImZ1fO2bds24vKdp06YOXNmkt07aV7cAG+88cbDFtsXv/jFIfe/9a1vZcuWLenq6trjOm9961tTFEX6+vp2fVPmhbdXv/rVhy1eqkNeDPexj30sH/7wh/OhD30o11xzzaH+GzQpubF/1q1blwkTJjg7yTghL3Y74YQTsm7dumG3s88+O0cddVTWrVuXa6+9drT+PUpObuzb//t//y933HFHTj755EpPvtlNXgz19re/PUly1113DVl+5513Jkle//rXH8R/QjOSGyP713/913zhC1/I6173urzqVa86lH+DJiQvhpo5c2b++Z//OU8//fSQ5ffdd1+SpKOj4+D+GZqO3BjZS17ykrzqVa/KnDlz8vjjj+e2227Lf/7P/9nZqCpIDhyciRMnZvHixenp6cmOHTt2LX/88cezbt26dHd3j8rrlJUjxZ939tlnp6OjI4sXL85JJ52UwcHBPPjgg7n++uszZcqUrFixIkn93P/HHnts3vve9+aaa67JEUcckS9+8Yv5/ve/f9hiu//++/Oe97wn//7f//s88cQT+a//9b+mvb09/+W//Jc9rnPaaafl0ksvzUUXXZT7778/p59+eiZPnpxt27blG9/4Rl796lfn93//9/f6unfddVeeeeaZXYnx0EMPZe3atUnqp8U9+uijR++fpJTkxVDXX399/vRP/zTnnHNO3vKWtww7msPOqvFDbgx16aWXprW1Na973evyspe9LE8++WT+9m//Nrfddlv++I//2FHi44S82O2oo44acaJzyy23pKWlZa+TIKpHbgx1wQUXZPbs2TnllFMyffr0bNy4Mddff31++tOf5pZbbjkM/yVlJC+GOuuss7J48eJ89KMfzeDgYF7/+tfn/vvvz0c+8pG89a1vzRvf+MbD8a9SQnJjZF/96lfz1FNPOUp8nJIXQ61cuTLnn39+fu/3fi9/8Ad/kOnTp+fb3/52PvGJT+SVr3xlzj333MPxr1JCcmOoH/7wh/nyl7+cU045JS95yUvy/e9/P5/85Cczf/78fOxjHzsc/yYNJgeG29+a3kc+8pG89rWvzVvf+tZcddVVefbZZ/Onf/qnmT59et7//veP0rtQUgVFURTFbbfdVlxwwQXF/PnziylTphRHHHFEMXv27OJd73pX8dBDDw157Le+9a3iDW94Q3H00UcXxx9/fPGe97yneOCBB4okxc0337zrccuWLSsmT5487LXOOOOM4rd/+7eHLZ8zZ07xlre8Zdf9m2++uUhS/OM//mPxrne9qzjmmGOKSZMmFeedd16xcePGIesuW7asmDNnzrDn/NznPlf8u3/374rJkycXkyZNKl7xilcUF154YXH//ffv8z2ZM2dOkWTE209+8pN9rk/zkxfDY9xTTvg4HV/kxvD1Ojs7i+nTpxcTJ04sjjnmmOKMM84oPv/5z+91PapFXuzbnv4fqk1uDPWJT3yiOPnkk4u2traipaWlOP7444u3ve1txXe/+929rke1yIvh/uVf/qW48sori1mzZhUTJ04sZs+eXVx99dXFs88+u891qQ65MbLf+73fKyZPnlz09/fv1+OpFnkx3Ne//vXirLPOKk444YRi0qRJxYIFC4r3v//9xZNPPrnPdakOuTHUj370o+L0008vpk2bVhx55JHFvHnzig996EPF008/vdf1aF5yYLgDqendf//9xZvf/Obi6KOPLlpbW4vzzz+/2LRp0z5fo9nViuL5i1RROrfccksuuuiifO9738spp5zS6HCgFOQFjExuwHDyAkYmN2A4eQEjkxswnLyAkckNxjs5UH6uKQ4AAAAAAABAZSmKAwAAAAAAAFBZTp8OAAAAAAAAQGU5UhwAAAAAAACAylIUBwAAAAAAAKCyFMUBAAAAAAAAqKyJB7vi4OBgtm7dmqlTp6ZWq41mTDBmiqLIjh07MnPmzEyYcOjfEZEXVIXcgOHkBYxMbsBw8gJGJjdgOHkBI5MbMJy8gJHtb24cdFF869atmTVr1sGuDqXyxBNPpKOj45CfR15QNXIDhpMXMDK5AcPJCxiZ3IDh5AWMTG7AcPICRrav3DjoovjUqVN3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",
+++       "text/plain": [
+++        "<Figure size 2000x500 with 10 Axes>"
+++       ]
+++@@ -184,18 +184,45 @@
+++   },
+++   {
+++    "cell_type": "code",
+++-   "execution_count": 13,
++++   "execution_count": 3,
+++    "metadata": {},
+++    "outputs": [
+++     {
+++-     "ename": "ModuleNotFoundError",
+++-     "evalue": "No module named 'diffuser'",
++++     "name": "stdout",
++++     "output_type": "stream",
++++     "text": [
++++      "Loaded dataset with 901 samples.\n"
++++     ]
++++    },
++++    {
++++     "name": "stderr",
++++     "output_type": "stream",
++++     "text": [
++++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
++++      "  return torch._C._cuda_getDeviceCount() > 0\n"
++++     ]
++++    },
++++    {
++++     "ename": "EinopsError",
++++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++      "output_type": "error",
+++      "traceback": [
+++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
+++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
++++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
++++      "\nDuring handling of the above exception, another exception occurred:\n",
++++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
++++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
++++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
++++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
++++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
++++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
+++      ]
+++     }
+++    ],
+++@@ -212,7 +239,6 @@
+++     "import einops\n",
+++     "from collections import namedtuple\n",
+++     "\n",
+++-    "\n",
+++     "# Define custom namedtuple for storing trajectories\n",
+++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
+++     "\n",
+++@@ -258,6 +284,34 @@
+++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
+++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
+++     "\n",
++++    "# Define the PolicyModel class\n",
++++    "class PolicyModel(nn.Module):\n",
++++    "    def __init__(self, grid_size):\n",
++++    "        super(PolicyModel, self).__init__()\n",
++++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
++++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
++++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
++++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
++++    "\n",
++++    "    def forward(self, x):\n",
++++    "        x = torch.relu(self.conv1(x))\n",
++++    "        x = torch.relu(self.conv2(x))\n",
++++    "        x = x.view(x.size(0), -1)\n",
++++    "        x = torch.relu(self.fc1(x))\n",
++++    "        x = self.fc2(x)\n",
++++    "        return x\n",
++++    "\n",
++++    "# Define a dummy normalizer class for simplicity\n",
++++    "class DummyNormalizer:\n",
++++    "    def __init__(self):\n",
++++    "        self.action_dim = 2\n",
++++    "\n",
++++    "    def normalize(self, data, key):\n",
++++    "        return data\n",
++++    "\n",
++++    "    def unnormalize(self, data, key):\n",
++++    "        return data\n",
++++    "\n",
+++     "# Define the Policy class\n",
+++     "class Policy:\n",
+++     "    def __init__(self, diffusion_model, normalizer):\n",
+++@@ -267,17 +321,17 @@
+++     "\n",
+++     "    @property\n",
+++     "    def device(self):\n",
+++-    "        parameters = list(self.diffusion_model.parameters())\n",
+++-    "        return parameters[0].device\n",
++++    "        return next(self.diffusion_model.parameters()).device\n",
+++     "\n",
+++     "    def _format_conditions(self, conditions, batch_size):\n",
+++-    "        conditions = utils.apply_dict(\n",
++++    "        conditions = apply_dict(\n",
+++     "            self.normalizer.normalize,\n",
+++     "            conditions,\n",
+++     "            'observations',\n",
+++     "        )\n",
+++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
+++-    "        conditions = utils.apply_dict(\n",
++++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
++++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
++++    "        conditions = apply_dict(\n",
+++     "            einops.repeat,\n",
+++     "            conditions,\n",
+++     "            'd -> repeat d', repeat=batch_size,\n",
+++@@ -289,7 +343,7 @@
+++     "\n",
+++     "        # Run reverse diffusion process\n",
+++     "        sample = self.diffusion_model(conditions)\n",
+++-    "        sample = utils.to_np(sample)\n",
++++    "        sample = to_np(sample)\n",
+++     "\n",
+++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
+++     "        actions = sample[:, :, :self.action_dim]\n",
+++@@ -308,8 +362,9 @@
+++     "# Training the policy-guided diffusion model\n",
+++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
+++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
+++-    "    model = PolicyModel(grid_size)\n",
+++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
++++    "    diffusion_model = PolicyModel(grid_size)\n",
++++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
++++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
+++     "\n",
+++     "    # Reward function\n",
+++     "    def compute_reward(waypoints, goal):\n",
+++@@ -318,11 +373,12 @@
+++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
+++     "        return reward\n",
+++     "\n",
+++-    "    model.train()\n",
++++    "    diffusion_model.train()\n",
+++     "    for epoch in range(num_epochs):\n",
+++     "        total_loss = 0.0\n",
+++     "        for batch in dataloader:\n",
+++     "            grid, start, goal, waypoints = batch\n",
++++    "            conditions = {'observations': grid}\n",
+++     "\n",
+++     "            # Use the grid as input and predict the next waypoint after start\n",
+++     "            optimizer.zero_grad()\n",
+++@@ -330,7 +386,7 @@
+++     "            current_position = start\n",
+++     "            for _ in range(waypoints.size(1)):\n",
+++     "                input_grid = grid\n",
+++-    "                predicted_waypoint = model(input_grid)\n",
++++    "                predicted_waypoint, _ = model(conditions)\n",
+++     "                predicted_waypoints.append(predicted_waypoint)\n",
+++     "                current_position = predicted_waypoint\n",
+++     "\n",
++\ No newline at end of file
++diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
++index 5618eda..91d6f87 100644
++Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
++diff --git a/scripts/training.ipynb b/scripts/training.ipynb
++index f4bf52b..c1f0340 100644
++--- a/scripts/training.ipynb
+++++ b/scripts/training.ipynb
++@@ -2,20 +2,20 @@
++  "cells": [
++   {
++    "cell_type": "code",
++-   "execution_count": 2,
+++   "execution_count": 1,
++    "metadata": {},
++    "outputs": [
++     {
++      "name": "stdout",
++      "output_type": "stream",
++      "text": [
++-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
++-      "Loaded dataset with 894 samples.\n"
+++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
+++      "Loaded dataset with 901 samples.\n"
++      ]
++     },
++     {
++      "data": {
++-      "image/png": "",
+++      "image/png": "",
++       "text/plain": [
++        "<Figure size 2000x500 with 10 Axes>"
++       ]
++@@ -184,18 +184,45 @@
++   },
++   {
++    "cell_type": "code",
++-   "execution_count": 13,
+++   "execution_count": 3,
++    "metadata": {},
++    "outputs": [
++     {
++-     "ename": "ModuleNotFoundError",
++-     "evalue": "No module named 'diffuser'",
+++     "name": "stdout",
+++     "output_type": "stream",
+++     "text": [
+++      "Loaded dataset with 901 samples.\n"
+++     ]
+++    },
+++    {
+++     "name": "stderr",
+++     "output_type": "stream",
+++     "text": [
+++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
+++      "  return torch._C._cuda_getDeviceCount() > 0\n"
+++     ]
+++    },
+++    {
+++     "ename": "EinopsError",
+++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
++      "output_type": "error",
++      "traceback": [
++       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
++-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
++-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
++-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
+++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
+++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
+++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
+++      "\nDuring handling of the above exception, another exception occurred:\n",
+++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
+++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
+++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
+++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
+++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
+++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
+++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
++      ]
++     }
++    ],
++@@ -212,7 +239,6 @@
++     "import einops\n",
++     "from collections import namedtuple\n",
++     "\n",
++-    "\n",
++     "# Define custom namedtuple for storing trajectories\n",
++     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
++     "\n",
++@@ -258,6 +284,34 @@
++     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
++     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
++     "\n",
+++    "# Define the PolicyModel class\n",
+++    "class PolicyModel(nn.Module):\n",
+++    "    def __init__(self, grid_size):\n",
+++    "        super(PolicyModel, self).__init__()\n",
+++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
+++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
+++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
+++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
+++    "\n",
+++    "    def forward(self, x):\n",
+++    "        x = torch.relu(self.conv1(x))\n",
+++    "        x = torch.relu(self.conv2(x))\n",
+++    "        x = x.view(x.size(0), -1)\n",
+++    "        x = torch.relu(self.fc1(x))\n",
+++    "        x = self.fc2(x)\n",
+++    "        return x\n",
+++    "\n",
+++    "# Define a dummy normalizer class for simplicity\n",
+++    "class DummyNormalizer:\n",
+++    "    def __init__(self):\n",
+++    "        self.action_dim = 2\n",
+++    "\n",
+++    "    def normalize(self, data, key):\n",
+++    "        return data\n",
+++    "\n",
+++    "    def unnormalize(self, data, key):\n",
+++    "        return data\n",
+++    "\n",
++     "# Define the Policy class\n",
++     "class Policy:\n",
++     "    def __init__(self, diffusion_model, normalizer):\n",
++@@ -267,17 +321,17 @@
++     "\n",
++     "    @property\n",
++     "    def device(self):\n",
++-    "        parameters = list(self.diffusion_model.parameters())\n",
++-    "        return parameters[0].device\n",
+++    "        return next(self.diffusion_model.parameters()).device\n",
++     "\n",
++     "    def _format_conditions(self, conditions, batch_size):\n",
++-    "        conditions = utils.apply_dict(\n",
+++    "        conditions = apply_dict(\n",
++     "            self.normalizer.normalize,\n",
++     "            conditions,\n",
++     "            'observations',\n",
++     "        )\n",
++-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
++-    "        conditions = utils.apply_dict(\n",
+++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
+++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
+++    "        conditions = apply_dict(\n",
++     "            einops.repeat,\n",
++     "            conditions,\n",
++     "            'd -> repeat d', repeat=batch_size,\n",
++@@ -289,7 +343,7 @@
++     "\n",
++     "        # Run reverse diffusion process\n",
++     "        sample = self.diffusion_model(conditions)\n",
++-    "        sample = utils.to_np(sample)\n",
+++    "        sample = to_np(sample)\n",
++     "\n",
++     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
++     "        actions = sample[:, :, :self.action_dim]\n",
++@@ -308,8 +362,9 @@
++     "# Training the policy-guided diffusion model\n",
++     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
++     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
++-    "    model = PolicyModel(grid_size)\n",
++-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
+++    "    diffusion_model = PolicyModel(grid_size)\n",
+++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
+++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
++     "\n",
++     "    # Reward function\n",
++     "    def compute_reward(waypoints, goal):\n",
++@@ -318,11 +373,12 @@
++     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
++     "        return reward\n",
++     "\n",
++-    "    model.train()\n",
+++    "    diffusion_model.train()\n",
++     "    for epoch in range(num_epochs):\n",
++     "        total_loss = 0.0\n",
++     "        for batch in dataloader:\n",
++     "            grid, start, goal, waypoints = batch\n",
+++    "            conditions = {'observations': grid}\n",
++     "\n",
++     "            # Use the grid as input and predict the next waypoint after start\n",
++     "            optimizer.zero_grad()\n",
++@@ -330,7 +386,7 @@
++     "            current_position = start\n",
++     "            for _ in range(waypoints.size(1)):\n",
++     "                input_grid = grid\n",
++-    "                predicted_waypoint = model(input_grid)\n",
+++    "                predicted_waypoint, _ = model(conditions)\n",
++     "                predicted_waypoints.append(predicted_waypoint)\n",
++     "                current_position = predicted_waypoint\n",
++     "\n",
+\ No newline at end of file
+diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
+index 5618eda..67c3c94 100644
+Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
+diff --git a/scripts/training.ipynb b/scripts/training.ipynb
+index f4bf52b..c1f0340 100644
+--- a/scripts/training.ipynb
++++ b/scripts/training.ipynb
+@@ -2,20 +2,20 @@
+  "cells": [
+   {
+    "cell_type": "code",
+-   "execution_count": 2,
++   "execution_count": 1,
+    "metadata": {},
+    "outputs": [
+     {
+      "name": "stdout",
+      "output_type": "stream",
+      "text": [
+-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
+-      "Loaded dataset with 894 samples.\n"
++      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
++      "Loaded dataset with 901 samples.\n"
+      ]
+     },
+     {
+      "data": {
+-      "image/png": "",
++      "image/png": "",
+       "text/plain": [
+        "<Figure size 2000x500 with 10 Axes>"
+       ]
+@@ -184,18 +184,45 @@
+   },
+   {
+    "cell_type": "code",
+-   "execution_count": 13,
++   "execution_count": 3,
+    "metadata": {},
+    "outputs": [
+     {
+-     "ename": "ModuleNotFoundError",
+-     "evalue": "No module named 'diffuser'",
++     "name": "stdout",
++     "output_type": "stream",
++     "text": [
++      "Loaded dataset with 901 samples.\n"
++     ]
++    },
++    {
++     "name": "stderr",
++     "output_type": "stream",
++     "text": [
++      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
++      "  return torch._C._cuda_getDeviceCount() > 0\n"
++     ]
++    },
++    {
++     "ename": "EinopsError",
++     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
+      "output_type": "error",
+      "traceback": [
+       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
+-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
+-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
+-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
++      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
++      "\nDuring handling of the above exception, another exception occurred:\n",
++      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
++      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
++      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
++      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
++      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
++      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
++      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
+      ]
+     }
+    ],
+@@ -212,7 +239,6 @@
+     "import einops\n",
+     "from collections import namedtuple\n",
+     "\n",
+-    "\n",
+     "# Define custom namedtuple for storing trajectories\n",
+     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
+     "\n",
+@@ -258,6 +284,34 @@
+     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
+     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
+     "\n",
++    "# Define the PolicyModel class\n",
++    "class PolicyModel(nn.Module):\n",
++    "    def __init__(self, grid_size):\n",
++    "        super(PolicyModel, self).__init__()\n",
++    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
++    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
++    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
++    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
++    "\n",
++    "    def forward(self, x):\n",
++    "        x = torch.relu(self.conv1(x))\n",
++    "        x = torch.relu(self.conv2(x))\n",
++    "        x = x.view(x.size(0), -1)\n",
++    "        x = torch.relu(self.fc1(x))\n",
++    "        x = self.fc2(x)\n",
++    "        return x\n",
++    "\n",
++    "# Define a dummy normalizer class for simplicity\n",
++    "class DummyNormalizer:\n",
++    "    def __init__(self):\n",
++    "        self.action_dim = 2\n",
++    "\n",
++    "    def normalize(self, data, key):\n",
++    "        return data\n",
++    "\n",
++    "    def unnormalize(self, data, key):\n",
++    "        return data\n",
++    "\n",
+     "# Define the Policy class\n",
+     "class Policy:\n",
+     "    def __init__(self, diffusion_model, normalizer):\n",
+@@ -267,17 +321,17 @@
+     "\n",
+     "    @property\n",
+     "    def device(self):\n",
+-    "        parameters = list(self.diffusion_model.parameters())\n",
+-    "        return parameters[0].device\n",
++    "        return next(self.diffusion_model.parameters()).device\n",
+     "\n",
+     "    def _format_conditions(self, conditions, batch_size):\n",
+-    "        conditions = utils.apply_dict(\n",
++    "        conditions = apply_dict(\n",
+     "            self.normalizer.normalize,\n",
+     "            conditions,\n",
+     "            'observations',\n",
+     "        )\n",
+-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
+-    "        conditions = utils.apply_dict(\n",
++    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
++    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
++    "        conditions = apply_dict(\n",
+     "            einops.repeat,\n",
+     "            conditions,\n",
+     "            'd -> repeat d', repeat=batch_size,\n",
+@@ -289,7 +343,7 @@
+     "\n",
+     "        # Run reverse diffusion process\n",
+     "        sample = self.diffusion_model(conditions)\n",
+-    "        sample = utils.to_np(sample)\n",
++    "        sample = to_np(sample)\n",
+     "\n",
+     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
+     "        actions = sample[:, :, :self.action_dim]\n",
+@@ -308,8 +362,9 @@
+     "# Training the policy-guided diffusion model\n",
+     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
+     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
+-    "    model = PolicyModel(grid_size)\n",
+-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
++    "    diffusion_model = PolicyModel(grid_size)\n",
++    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
++    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
+     "\n",
+     "    # Reward function\n",
+     "    def compute_reward(waypoints, goal):\n",
+@@ -318,11 +373,12 @@
+     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
+     "        return reward\n",
+     "\n",
+-    "    model.train()\n",
++    "    diffusion_model.train()\n",
+     "    for epoch in range(num_epochs):\n",
+     "        total_loss = 0.0\n",
+     "        for batch in dataloader:\n",
+     "            grid, start, goal, waypoints = batch\n",
++    "            conditions = {'observations': grid}\n",
+     "\n",
+     "            # Use the grid as input and predict the next waypoint after start\n",
+     "            optimizer.zero_grad()\n",
+@@ -330,7 +386,7 @@
+     "            current_position = start\n",
+     "            for _ in range(waypoints.size(1)):\n",
+     "                input_grid = grid\n",
+-    "                predicted_waypoint = model(input_grid)\n",
++    "                predicted_waypoint, _ = model(conditions)\n",
+     "                predicted_waypoints.append(predicted_waypoint)\n",
+     "                current_position = predicted_waypoint\n",
+     "\n",
\ No newline at end of file
diff --git a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt
index 5618eda..714a210 100644
Binary files a/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt and b/logs/maze2d-large-v1/diffusion/H384_T256/state_0.pt differ
diff --git a/scripts/train_values.py b/scripts/train_values.py
index 4de3d77..88a8d5b 100644
--- a/scripts/train_values.py
+++ b/scripts/train_values.py
@@ -8,7 +8,7 @@ import pdb
 
 class Parser(utils.Parser):
     dataset: str = 'walker2d-medium-replay-v2'
-    config: str = 'config.locomotion'
+    config: str = 'config.maze2d'
 
 args = Parser().parse_args('values')
 
diff --git a/scripts/training.ipynb b/scripts/training.ipynb
index f4bf52b..c1f0340 100644
--- a/scripts/training.ipynb
+++ b/scripts/training.ipynb
@@ -2,20 +2,20 @@
  "cells": [
   {
    "cell_type": "code",
-   "execution_count": 2,
+   "execution_count": 1,
    "metadata": {},
    "outputs": [
     {
      "name": "stdout",
      "output_type": "stream",
      "text": [
-      "Dataset saved to grid_world_dataset.pkl with 894 samples.\n",
-      "Loaded dataset with 894 samples.\n"
+      "Dataset saved to grid_world_dataset.pkl with 901 samples.\n",
+      "Loaded dataset with 901 samples.\n"
      ]
     },
     {
      "data": {
-      "image/png": "",
+      "image/png": "",
       "text/plain": [
        "<Figure size 2000x500 with 10 Axes>"
       ]
@@ -184,18 +184,45 @@
   },
   {
    "cell_type": "code",
-   "execution_count": 13,
+   "execution_count": 3,
    "metadata": {},
    "outputs": [
     {
-     "ename": "ModuleNotFoundError",
-     "evalue": "No module named 'diffuser'",
+     "name": "stdout",
+     "output_type": "stream",
+     "text": [
+      "Loaded dataset with 901 samples.\n"
+     ]
+    },
+    {
+     "name": "stderr",
+     "output_type": "stream",
+     "text": [
+      "/home/wslabtop/.local/lib/python3.8/site-packages/torch/cuda/__init__.py:128: UserWarning: CUDA initialization: CUDA unknown error - this may be due to an incorrectly set up environment, e.g. changing env variable CUDA_VISIBLE_DEVICES after program start. Setting the available devices to be zero. (Triggered internally at ../c10/cuda/CUDAFunctions.cpp:108.)\n",
+      "  return torch._C._cuda_getDeviceCount() > 0\n"
+     ]
+    },
+    {
+     "ename": "EinopsError",
+     "evalue": " Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor.",
      "output_type": "error",
      "traceback": [
       "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
-      "Cell \u001b[0;32mIn[13], line 9\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mpdb\u001b[39;00m\n\u001b[1;32m      8\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01mtorch\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mnn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mfunctional\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m \u001b[38;5;21;01mF\u001b[39;00m\n\u001b[0;32m----> 9\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mdiffuser\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mutils\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m apply_dict, to_torch, to_np\n\u001b[1;32m     10\u001b[0m \u001b[38;5;28;01mimport\u001b[39;00m \u001b[38;5;21;01meinops\u001b[39;00m\n\u001b[1;32m     11\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01mcollections\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m namedtuple\n",
-      "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'diffuser'"
+      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:522\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    521\u001b[0m shape \u001b[38;5;241m=\u001b[39m backend\u001b[38;5;241m.\u001b[39mshape(tensor)\n\u001b[0;32m--> 522\u001b[0m recipe \u001b[38;5;241m=\u001b[39m \u001b[43m_prepare_transformation_recipe\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43maxes_names\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mtuple\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mndim\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;28;43mlen\u001b[39;49m\u001b[43m(\u001b[49m\u001b[43mshape\u001b[49m\u001b[43m)\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    523\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m _apply_recipe(\n\u001b[1;32m    524\u001b[0m     backend, recipe, cast(Tensor, tensor), reduction_type\u001b[38;5;241m=\u001b[39mreduction, axes_lengths\u001b[38;5;241m=\u001b[39mhashable_axes_lengths\n\u001b[1;32m    525\u001b[0m )\n",
+      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:365\u001b[0m, in \u001b[0;36m_prepare_transformation_recipe\u001b[0;34m(pattern, operation, axes_names, ndim)\u001b[0m\n\u001b[1;32m    364\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m ndim \u001b[38;5;241m!=\u001b[39m \u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition):\n\u001b[0;32m--> 365\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(\u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mWrong shape: expected \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;28mlen\u001b[39m(left\u001b[38;5;241m.\u001b[39mcomposition)\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m dims. Received \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mndim\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m-dim tensor.\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    366\u001b[0m left_composition \u001b[38;5;241m=\u001b[39m left\u001b[38;5;241m.\u001b[39mcomposition\n",
+      "\u001b[0;31mEinopsError\u001b[0m: Wrong shape: expected 1 dims. Received 4-dim tensor.",
+      "\nDuring handling of the above exception, another exception occurred:\n",
+      "\u001b[0;31mEinopsError\u001b[0m                               Traceback (most recent call last)",
+      "Cell \u001b[0;32mIn[3], line 185\u001b[0m\n\u001b[1;32m    183\u001b[0m \u001b[38;5;66;03m# Train the policy-guided model\u001b[39;00m\n\u001b[1;32m    184\u001b[0m grid_size \u001b[38;5;241m=\u001b[39m \u001b[38;5;241m5\u001b[39m\n\u001b[0;32m--> 185\u001b[0m trained_policy_model \u001b[38;5;241m=\u001b[39m \u001b[43mtrain_policy_model\u001b[49m\u001b[43m(\u001b[49m\u001b[43mpath_dataset\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mgrid_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    187\u001b[0m \u001b[38;5;66;03m# Visualization of generated paths\u001b[39;00m\n\u001b[1;32m    188\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mvisualize_samples\u001b[39m(dataset, num_samples\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m10\u001b[39m):\n",
+      "Cell \u001b[0;32mIn[3], line 160\u001b[0m, in \u001b[0;36mtrain_policy_model\u001b[0;34m(dataset, grid_size, num_epochs, batch_size, learning_rate)\u001b[0m\n\u001b[1;32m    158\u001b[0m \u001b[38;5;28;01mfor\u001b[39;00m _ \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mrange\u001b[39m(waypoints\u001b[38;5;241m.\u001b[39msize(\u001b[38;5;241m1\u001b[39m)):\n\u001b[1;32m    159\u001b[0m     input_grid \u001b[38;5;241m=\u001b[39m grid\n\u001b[0;32m--> 160\u001b[0m     predicted_waypoint, _ \u001b[38;5;241m=\u001b[39m \u001b[43mmodel\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    161\u001b[0m     predicted_waypoints\u001b[38;5;241m.\u001b[39mappend(predicted_waypoint)\n\u001b[1;32m    162\u001b[0m     current_position \u001b[38;5;241m=\u001b[39m predicted_waypoint\n",
+      "Cell \u001b[0;32mIn[3], line 113\u001b[0m, in \u001b[0;36mPolicy.__call__\u001b[0;34m(self, conditions, debug, batch_size)\u001b[0m\n\u001b[1;32m    112\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21m__call__\u001b[39m(\u001b[38;5;28mself\u001b[39m, conditions, debug\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m, batch_size\u001b[38;5;241m=\u001b[39m\u001b[38;5;241m1\u001b[39m):\n\u001b[0;32m--> 113\u001b[0m     conditions \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;43mself\u001b[39;49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43m_format_conditions\u001b[49m\u001b[43m(\u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mbatch_size\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    115\u001b[0m     \u001b[38;5;66;03m# Run reverse diffusion process\u001b[39;00m\n\u001b[1;32m    116\u001b[0m     sample \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mdiffusion_model(conditions)\n",
+      "Cell \u001b[0;32mIn[3], line 105\u001b[0m, in \u001b[0;36mPolicy._format_conditions\u001b[0;34m(self, conditions, batch_size)\u001b[0m\n\u001b[1;32m    103\u001b[0m device \u001b[38;5;241m=\u001b[39m torch\u001b[38;5;241m.\u001b[39mdevice(\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcuda\u001b[39m\u001b[38;5;124m'\u001b[39m \u001b[38;5;28;01mif\u001b[39;00m torch\u001b[38;5;241m.\u001b[39mcuda\u001b[38;5;241m.\u001b[39mis_available() \u001b[38;5;28;01melse\u001b[39;00m \u001b[38;5;124m'\u001b[39m\u001b[38;5;124mcpu\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m    104\u001b[0m conditions \u001b[38;5;241m=\u001b[39m to_torch(conditions, dtype\u001b[38;5;241m=\u001b[39mtorch\u001b[38;5;241m.\u001b[39mfloat32, device\u001b[38;5;241m=\u001b[39mdevice)\n\u001b[0;32m--> 105\u001b[0m conditions \u001b[38;5;241m=\u001b[39m \u001b[43mapply_dict\u001b[49m\u001b[43m(\u001b[49m\n\u001b[1;32m    106\u001b[0m \u001b[43m    \u001b[49m\u001b[43meinops\u001b[49m\u001b[38;5;241;43m.\u001b[39;49m\u001b[43mrepeat\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    107\u001b[0m \u001b[43m    \u001b[49m\u001b[43mconditions\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    108\u001b[0m \u001b[43m    \u001b[49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[38;5;124;43md -> repeat d\u001b[39;49m\u001b[38;5;124;43m'\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mrepeat\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[43mbatch_size\u001b[49m\u001b[43m,\u001b[49m\n\u001b[1;32m    109\u001b[0m \u001b[43m\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m    110\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m conditions\n",
+      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:67\u001b[0m, in \u001b[0;36mapply_dict\u001b[0;34m(fn, d, *args, **kwargs)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[0;32m---> 67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[1;32m     68\u001b[0m \t\tk: fn(v, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+      "File \u001b[0;32m~/project/diffuser/scripts/diffuser/utils/arrays.py:68\u001b[0m, in \u001b[0;36m<dictcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m     66\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mapply_dict\u001b[39m(fn, d, \u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs):\n\u001b[1;32m     67\u001b[0m \t\u001b[38;5;28;01mreturn\u001b[39;00m {\n\u001b[0;32m---> 68\u001b[0m \t\tk: \u001b[43mfn\u001b[49m\u001b[43m(\u001b[49m\u001b[43mv\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43margs\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43mkwargs\u001b[49m\u001b[43m)\u001b[49m\n\u001b[1;32m     69\u001b[0m \t\t\u001b[38;5;28;01mfor\u001b[39;00m k, v \u001b[38;5;129;01min\u001b[39;00m d\u001b[38;5;241m.\u001b[39mitems()\n\u001b[1;32m     70\u001b[0m \t}\n",
+      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:641\u001b[0m, in \u001b[0;36mrepeat\u001b[0;34m(tensor, pattern, **axes_lengths)\u001b[0m\n\u001b[1;32m    594\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mrepeat\u001b[39m(tensor: Union[Tensor, List[Tensor]], pattern: \u001b[38;5;28mstr\u001b[39m, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39maxes_lengths) \u001b[38;5;241m-\u001b[39m\u001b[38;5;241m>\u001b[39m Tensor:\n\u001b[1;32m    595\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    596\u001b[0m \u001b[38;5;124;03m    einops.repeat allows reordering elements and repeating them in arbitrary combinations.\u001b[39;00m\n\u001b[1;32m    597\u001b[0m \u001b[38;5;124;03m    This operation includes functionality of repeat, tile, broadcast functions.\u001b[39;00m\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    639\u001b[0m \n\u001b[1;32m    640\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 641\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[43mreduce\u001b[49m\u001b[43m(\u001b[49m\u001b[43mtensor\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mpattern\u001b[49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[43mreduction\u001b[49m\u001b[38;5;241;43m=\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[38;5;124;43mrepeat\u001b[39;49m\u001b[38;5;124;43m\"\u001b[39;49m\u001b[43m,\u001b[49m\u001b[43m \u001b[49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[38;5;241;43m*\u001b[39;49m\u001b[43maxes_lengths\u001b[49m\u001b[43m)\u001b[49m\n",
+      "File \u001b[0;32m~/.local/lib/python3.8/site-packages/einops/einops.py:533\u001b[0m, in \u001b[0;36mreduce\u001b[0;34m(tensor, pattern, reduction, **axes_lengths)\u001b[0m\n\u001b[1;32m    531\u001b[0m     message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m Input is list. \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    532\u001b[0m message \u001b[38;5;241m+\u001b[39m\u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mAdditional info: \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m.\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(axes_lengths)\n\u001b[0;32m--> 533\u001b[0m \u001b[38;5;28;01mraise\u001b[39;00m EinopsError(message \u001b[38;5;241m+\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;130;01m\\n\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;132;01m{}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;241m.\u001b[39mformat(e))\n",
+      "\u001b[0;31mEinopsError\u001b[0m:  Error while processing repeat-reduction pattern \"d -> repeat d\".\n Input tensor shape: torch.Size([16, 1, 5, 5]). Additional info: {'repeat': 1}.\n Wrong shape: expected 1 dims. Received 4-dim tensor."
      ]
     }
    ],
@@ -212,7 +239,6 @@
     "import einops\n",
     "from collections import namedtuple\n",
     "\n",
-    "\n",
     "# Define custom namedtuple for storing trajectories\n",
     "Trajectories = namedtuple('Trajectories', 'actions observations')\n",
     "\n",
@@ -258,6 +284,34 @@
     "    padded_waypoints = pad_waypoints(waypoints, max_len)\n",
     "    return torch.stack(grids), torch.stack(starts), torch.stack(goals), padded_waypoints\n",
     "\n",
+    "# Define the PolicyModel class\n",
+    "class PolicyModel(nn.Module):\n",
+    "    def __init__(self, grid_size):\n",
+    "        super(PolicyModel, self).__init__()\n",
+    "        self.conv1 = nn.Conv2d(1, 16, kernel_size=3, padding=1)\n",
+    "        self.conv2 = nn.Conv2d(16, 32, kernel_size=3, padding=1)\n",
+    "        self.fc1 = nn.Linear(32 * grid_size * grid_size, 128)\n",
+    "        self.fc2 = nn.Linear(128, 2)  # Output: next waypoint (x, y)\n",
+    "\n",
+    "    def forward(self, x):\n",
+    "        x = torch.relu(self.conv1(x))\n",
+    "        x = torch.relu(self.conv2(x))\n",
+    "        x = x.view(x.size(0), -1)\n",
+    "        x = torch.relu(self.fc1(x))\n",
+    "        x = self.fc2(x)\n",
+    "        return x\n",
+    "\n",
+    "# Define a dummy normalizer class for simplicity\n",
+    "class DummyNormalizer:\n",
+    "    def __init__(self):\n",
+    "        self.action_dim = 2\n",
+    "\n",
+    "    def normalize(self, data, key):\n",
+    "        return data\n",
+    "\n",
+    "    def unnormalize(self, data, key):\n",
+    "        return data\n",
+    "\n",
     "# Define the Policy class\n",
     "class Policy:\n",
     "    def __init__(self, diffusion_model, normalizer):\n",
@@ -267,17 +321,17 @@
     "\n",
     "    @property\n",
     "    def device(self):\n",
-    "        parameters = list(self.diffusion_model.parameters())\n",
-    "        return parameters[0].device\n",
+    "        return next(self.diffusion_model.parameters()).device\n",
     "\n",
     "    def _format_conditions(self, conditions, batch_size):\n",
-    "        conditions = utils.apply_dict(\n",
+    "        conditions = apply_dict(\n",
     "            self.normalizer.normalize,\n",
     "            conditions,\n",
     "            'observations',\n",
     "        )\n",
-    "        conditions = utils.to_torch(conditions, dtype=torch.float32, device='cuda:0')\n",
-    "        conditions = utils.apply_dict(\n",
+    "        device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n",
+    "        conditions = to_torch(conditions, dtype=torch.float32, device=device)\n",
+    "        conditions = apply_dict(\n",
     "            einops.repeat,\n",
     "            conditions,\n",
     "            'd -> repeat d', repeat=batch_size,\n",
@@ -289,7 +343,7 @@
     "\n",
     "        # Run reverse diffusion process\n",
     "        sample = self.diffusion_model(conditions)\n",
-    "        sample = utils.to_np(sample)\n",
+    "        sample = to_np(sample)\n",
     "\n",
     "        # Extract actions [ batch_size x horizon x transition_dim ]\n",
     "        actions = sample[:, :, :self.action_dim]\n",
@@ -308,8 +362,9 @@
     "# Training the policy-guided diffusion model\n",
     "def train_policy_model(dataset, grid_size, num_epochs=20, batch_size=16, learning_rate=0.001):\n",
     "    dataloader = DataLoader(dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_batch)\n",
-    "    model = PolicyModel(grid_size)\n",
-    "    optimizer = optim.Adam(model.parameters(), lr=learning_rate)\n",
+    "    diffusion_model = PolicyModel(grid_size)\n",
+    "    model = Policy(diffusion_model=diffusion_model, normalizer=DummyNormalizer())\n",
+    "    optimizer = optim.Adam(diffusion_model.parameters(), lr=learning_rate)\n",
     "\n",
     "    # Reward function\n",
     "    def compute_reward(waypoints, goal):\n",
@@ -318,11 +373,12 @@
     "        reward = -distance_to_goal  # Negative reward for distance to goal\n",
     "        return reward\n",
     "\n",
-    "    model.train()\n",
+    "    diffusion_model.train()\n",
     "    for epoch in range(num_epochs):\n",
     "        total_loss = 0.0\n",
     "        for batch in dataloader:\n",
     "            grid, start, goal, waypoints = batch\n",
+    "            conditions = {'observations': grid}\n",
     "\n",
     "            # Use the grid as input and predict the next waypoint after start\n",
     "            optimizer.zero_grad()\n",
@@ -330,7 +386,7 @@
     "            current_position = start\n",
     "            for _ in range(waypoints.size(1)):\n",
     "                input_grid = grid\n",
-    "                predicted_waypoint = model(input_grid)\n",
+    "                predicted_waypoint, _ = model(conditions)\n",
     "                predicted_waypoints.append(predicted_waypoint)\n",
     "                current_position = predicted_waypoint\n",
     "\n",